{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/MapComponent.js\";\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { teal_palette } from '../mui/metMuiThemes';\nimport ReactGlobe from 'react-globe';\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\nimport './styles.css';\nvar markerEvent = new Event(\"UpdateMarkersEvent\");\nvar event2 = new CustomEvent(\"UpdateMarkersEvent\", {\n  data: 1\n});\nvar footAndHeaderheight = \"100px\";\n\nfunction getTooltipContent(marker) {\n  //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere,JSON.stringify(marker.element));\n  return \"\".concat(marker.colwhere, \" \").concat(marker.rowwhere, \")\");\n}\n\nvar styles = function styles(theme) {\n  return {\n    content: {},\n    root: {\n      height: '100%',\n      padding: 0,\n      margin: 0,\n      border: '5px solid red'\n    },\n    dataset: {\n      overflow: 'hidden',\n      height: '100%'\n    },\n    map: {\n      overflow: 'hidden',\n      height: '100%'\n    }\n  };\n};\n\nfunction MapGlobe(props) {\n  var classes = props.classes,\n      onClickMarker = props.onClickMarker,\n      onDefocus = props.onDefocus,\n      data = props.data; // Use State to keep the values\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      markers = _useState2[0],\n      setMarkers = _useState2[1];\n\n  var animations = [];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sequence = _useState4[0],\n      setSequence = _useState4[1];\n\n  var id = useRef(null);\n\n  function updateLoop(props) {\n    if (props.data.cnt != 0) {\n      setMarkers(props.data.markers);\n      props.data.cnt = 0;\n      setSequence(\"default\");\n    }\n\n    id.current = setTimeout(function () {\n      updateLoop(props);\n    }, 500);\n  }\n\n  ;\n\n  switch (sequence) {\n    case 'default':\n      animations = props.data.animations;\n      break;\n  }\n\n  useEffect(function () {\n    updateLoop(props);\n    return function () {\n      return id.current && clearTimeout(id.current);\n    };\n  }); //  useEffect( ()=>{setMarkers(props.data.markers);} );\n  //useEffect( ()=>{console.log(\"Setting Globe markers...\",props.data.cnt);setMarkers(props.data.markers);} ,[props.data.cnt] );\n  //  <button onClick={() => {if (markers.length > 0) {setMarkers([]);} else {setMarkers(props.data.markers);};console.log(\"Button setting markers.\");}}\n  //<div className={classes.map}>\n  //      <button onClick={() => {setMarkers(props.data.markers);console.log(\"Button setting markers.\",props.data.markers.length);}}\n  //      >\n  //        set marker\n  //      </button>\n  //\t</div>)\n\n  return React.createElement(ReactGlobe, {\n    className: classes.map,\n    animations: animations,\n    markers: markers,\n    onClickMarker: onClickMarker,\n    markerOptions: {\n      renderer: markerRenderer,\n      getTooltipContent: getTooltipContent\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  });\n} //                focus={[65,15]} \n//                zoom={2} \n//                initialCoordinates={[65,20]}\n//                onClickMarker={onClickMarker}\n//                markerOptions={{renderer: markerRenderer,\n//                                getTooltipContent:getTooltipContent,  \n//                               }}\n//        markerOptions={{\n//          enableGlow: false,\n//          getTooltipContent: marker => marker.tooltip,\n//          radiusScaleRange: [0.02, 0.05],\n//        }}\n//                focusOptions={{\n//                   animationDuration: 500, \n//                    distanceRadiusScale: 1.75,\n//                    easingFunction: ['Cubic', 'In'],\n//\t            enableAutoRotate:false,\n//\t\t    enableClouds:false,\n//                }}\n\n\nvar EarthMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EarthMap, _Component);\n\n  function EarthMap(props) {\n    var _this;\n\n    _classCallCheck(this, EarthMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EarthMap).call(this, props));\n    var state = _this.props.state;\n    state.React.Map = _assertThisInitialized(_this);\n    _this._ismounted = false;\n    _this.elem = null;\n    _this.data = {\n      cnt: 99,\n      markers: [],\n      animations: []\n    };\n    return _this;\n  }\n\n  _createClass(EarthMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._ismounted = true;\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n    }\n  }, {\n    key: \"onClickMarker\",\n    value: function onClickMarker(marker, markerObject, event) {\n      //console.log(\"Clicked marker...\",marker.id)\n      var state = marker.state;\n      var colkey = marker.colkey;\n      var colrange = marker.colrange;\n      var colwhere = marker.colwhere;\n      var rowkey = marker.rowkey;\n      var rowrange = marker.rowrange;\n      var rowwhere = marker.rowwhere;\n      var cnt = marker.cnt;\n      state.Navigate.selectItemRange(state, colkey, rowkey, colrange, rowrange, colwhere, rowwhere, cnt, 1); // setEvent({\n      //   type: 'CLICK',\n      //   marker,\n      //   markerObjectID: markerObject.uuid,\n      //   pointerEventPosition: { x: event.clientX, y: event.clientY },\n      // });\n      //setDetails(getTooltipContent(marker));\n    }\n  }, {\n    key: \"onDefocus\",\n    value: function onDefocus(previousCoordinates, event) {//setEvent({\n      //  type: 'DEFOCUS',\n      //  previousCoordinates,\n      //  pointerEventPosition: { x: event.clientX, y: event.clientY },\n      //});\n      //setDetails(null);\n    }\n  }, {\n    key: \"showMap\",\n    value: function showMap(state) {\n      // dont re-render the globe... - only change the markers\n      console.log(\"Rendering markers...\");\n      this.getMarkers(state); //this.data.markers=this.getMarkers(state);\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers(state) {\n      // get marker data\n      console.log(\"Setting map markers...\"); //var ll=this.markers.length;\n      //for (var ii=0; ii < ll; ii++) {\n      //    this.markers.splice(ii,1);\n      //};\n      //this.data.markers.splice(0,this.data.markers.length);\n\n      var tcnt = 0;\n      var markers = []; //   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\n      var matrix = state.React.matrix;\n      var first = true;\n      var sum = {\n        x2: 0,\n        y2: 0,\n        z2: 0,\n        x: 0,\n        y: 0,\n        z: 0,\n        cnt: 0\n      };\n\n      if (matrix !== undefined) {\n        state.Matrix.printElements(matrix);\n        var colkey = state.Path.getColKey(state) || \"\";\n        var rowkey = state.Path.getRowKey(state) || \"\";\n        var colvalues = state.Path.filterKeys(state, state.Matrix.values[colkey] || [\"\"]);\n        var rowvalues = state.Path.filterKeys(state, state.Matrix.values[rowkey] || [\"\"]); //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n        //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n        //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n        // make markers\n\n        var rlen = rowvalues.length;\n\n        for (var ii = 0; ii < rlen; ii++) {\n          var rowval = rowvalues[ii];\n          var rowrange = state.Matrix.getLatRange(state, rowvalues[ii]);\n          var rowwhere = state.Matrix.getLatWhere(state, \"lat\", rowvalues[ii]);\n          var clen = colvalues.length;\n\n          for (var jj = 0; jj < clen; jj++) {\n            var colval = colvalues[jj];\n            var colrange = state.Matrix.getLonRange(state, colvalues[jj]);\n            var colwhere = state.Matrix.getLonWhere(state, \"lon\", colvalues[jj]);\n            var element = state.Matrix.getMatrixElement(colval, rowval, matrix);\n\n            if (element !== undefined) {\n              var lon = element.colval;\n              var lat = element.rowval;\n              var lev = element.maxlev;\n              var bgcolor = state.Colors.getLevelBgColor(lev);\n              var fgcolor = state.Colors.getLevelFgColor(lev);\n              var cnt = element.cnt;\n              tcnt = tcnt + 1;\n              var clat = Math.cos(lat);\n              var slat = Math.sin(lat);\n              var clon = Math.cos(lon);\n              var slon = Math.sin(lon);\n              var pos = {\n                x: clat * clon,\n                y: clat,\n                slon: slon,\n                z: slat\n              };\n              sum.cnt = sum.cnt + 1;\n              sum.x = sum.x + pos.x;\n              sum.y = sum.y + pos.y;\n              sum.z = sum.z + pos.z;\n              sum.x2 = sum.x2 + pos.x * pos.x;\n              sum.y2 = sum.y2 + pos.y * pos.y;\n              sum.z2 = sum.z2 + pos.z * pos.z;\n              var mark = {\n                id: tcnt,\n                coordinates: [lat, lon],\n                city: \"Test\",\n                value: 0,\n                element: element,\n                bgcolor: bgcolor,\n                fgcolor: fgcolor,\n                state: state,\n                colkey: \"lon\",\n                colrange: colrange,\n                colwhere: colwhere,\n                rowkey: \"lat\",\n                rowrange: rowrange,\n                rowwhere: rowwhere,\n                cnt: cnt\n              };\n\n              if (first) {\n                first = false; //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n              }\n\n              markers.push(mark); //this.data.markers.push(mark);\n            }\n          }\n        }\n      }\n\n      if (sum.cnt > 0) {\n        sum.x = sum.x / sum.cnt;\n        sum.y = sum.y / sum.cnt;\n        sum.z = sum.z / sum.cnt;\n        sum.x2 = sum.x2 / sum.cnt;\n        sum.y2 = sum.y2 / sum.cnt;\n        sum.z2 = sum.z2 / sum.cnt;\n        var dist = 1 + Math.sqrt(sum.x2 - sum.x * sum.x + sum.y2 - sum.y * sum.y + sum.z2 - sum.z * sum.z);\n        var ll = Math.sqrt(sum.x * sum.x + sum.y * sum.y + sum.z * sum.z);\n\n        if (ll > 0) {\n          sum.x = sum.x / ll;\n          sum.y = sum.y / ll;\n          sum.z = sum.z / ll;\n        } else {\n          sum.x = 1;\n          sum.y = 0;\n          sum.z = 0;\n        }\n\n        ll = Math.sqrt(sum.x * sum.x + sum.y * sum.y);\n        var clat = Math.acos(ll);\n        var clon = Math.atan2(sum.x, sum.y);\n        this.data.animations = [{\n          animationDuration: 1000,\n          coordinates: [clat, clon],\n          distanceRadiusScale: dist,\n          easingFunction: ['Linear', 'None']\n        }];\n      }\n\n      console.log(\"Markers:\", this.data.markers.length);\n      this.data.markers = markers;\n      this.data.cnt = this.data.cnt + 1;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state,\n          markers = _this$props.markers;\n      console.log(\"Rendering map...\"); //this.setMarkers(state);\n\n      var data = {\n        cnt: this.cnt,\n        markers: this.markers\n      };\n\n      var assign = function assign(elem) {\n        _this2.elem = elem;\n        console.log(\"Element...\");\n      };\n\n      return React.createElement(\"div\", {\n        className: classes.root,\n        style: {\n          position: 'fixed',\n          marginLeft: '0%',\n          width: '90%',\n          height: 'calc(95% - ' + footAndHeaderheight + ')',\n          overflow: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275\n        },\n        __self: this\n      }, React.createElement(MapGlobe, {\n        onClickMarker: this.onClickMarker,\n        onDefocus: this.onDefocus,\n        data: this.data,\n        classes: {\n          map: classes.map\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 277\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EarthMap;\n}(Component);\n\nEarthMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EarthMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapComponent.js"],"names":["React","Component","useState","useEffect","useRef","PropTypes","withStyles","teal_palette","ReactGlobe","defmarkers","markerRenderer","markerEvent","Event","event2","CustomEvent","data","footAndHeaderheight","getTooltipContent","marker","colwhere","rowwhere","styles","theme","content","root","height","padding","margin","border","dataset","overflow","map","MapGlobe","props","classes","onClickMarker","onDefocus","markers","setMarkers","animations","sequence","setSequence","id","updateLoop","cnt","current","setTimeout","clearTimeout","renderer","EarthMap","state","Map","_ismounted","elem","window","addEventListener","updateWindowDimensions","markerObject","event","colkey","colrange","rowkey","rowrange","Navigate","selectItemRange","previousCoordinates","console","log","getMarkers","tcnt","matrix","first","sum","x2","y2","z2","x","y","z","undefined","Matrix","printElements","Path","getColKey","getRowKey","colvalues","filterKeys","values","rowvalues","rlen","length","ii","rowval","getLatRange","getLatWhere","clen","jj","colval","getLonRange","getLonWhere","element","getMatrixElement","lon","lat","lev","maxlev","bgcolor","Colors","getLevelBgColor","fgcolor","getLevelFgColor","clat","Math","cos","slat","sin","clon","slon","pos","mark","coordinates","city","value","push","dist","sqrt","ll","acos","atan2","animationDuration","distanceRadiusScale","easingFunction","assign","position","marginLeft","width","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect, useRef} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport ReactGlobe from 'react-globe';\n\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\n\nimport './styles.css';\n\nconst markerEvent=new Event(\"UpdateMarkersEvent\");\n\nconst event2=new CustomEvent(\"UpdateMarkersEvent\",{data:1});\nconst footAndHeaderheight = \"100px\";\n\nfunction getTooltipContent(marker) {\n    //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere,JSON.stringify(marker.element));\n  return `${marker.colwhere} ${marker.rowwhere})`;\n}\n\nconst styles = theme => ({\n    content: {},\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '5px solid red'\n    },\n    dataset: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n    map: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n});\n\n\nfunction MapGlobe(props) {\n    const {classes,onClickMarker,onDefocus,data} = props;\n    // Use State to keep the values\n    const [markers, setMarkers] = useState([]);\n    let animations=[];\n    const[sequence, setSequence] = useState();\n    const id=useRef(null)\n    function updateLoop(props) {\n\tif (props.data.cnt != 0) {\n\t    setMarkers(props.data.markers);\n\t    props.data.cnt=0;\n\t    setSequence(\"default\");\n\t}\n\tid.current=setTimeout(function() {\n\t    updateLoop(props)\n\t},500);\n    };\n    switch(sequence) {\n\tcase 'default':\n\tanimations=props.data.animations;\n\tbreak;\n    }\n    useEffect( ()=>{updateLoop(props);\n\t\t    return () => id.current && clearTimeout(id.current) } );\n  //  useEffect( ()=>{setMarkers(props.data.markers);} );\n    //useEffect( ()=>{console.log(\"Setting Globe markers...\",props.data.cnt);setMarkers(props.data.markers);} ,[props.data.cnt] );\n    //  <button onClick={() => {if (markers.length > 0) {setMarkers([]);} else {setMarkers(props.data.markers);};console.log(\"Button setting markers.\");}}\n//<div className={classes.map}>\n//      <button onClick={() => {setMarkers(props.data.markers);console.log(\"Button setting markers.\",props.data.markers.length);}}\n//      >\n//        set marker\n//      </button>\n//\t</div>)\n    return (<ReactGlobe className={classes.map}\n\t        animations={animations}\n                markers={markers}\n                onClickMarker={onClickMarker}\n                markerOptions={{renderer: markerRenderer,\n                                getTooltipContent:getTooltipContent,  \n                               }}\n\t/>)\n}\n\n//                focus={[65,15]} \n//                zoom={2} \n//                initialCoordinates={[65,20]}\n//                onClickMarker={onClickMarker}\n//                markerOptions={{renderer: markerRenderer,\n//                                getTooltipContent:getTooltipContent,  \n//                               }}\n//        markerOptions={{\n//          enableGlow: false,\n//          getTooltipContent: marker => marker.tooltip,\n//          radiusScaleRange: [0.02, 0.05],\n//        }}\n//                focusOptions={{\n//                   animationDuration: 500, \n//                    distanceRadiusScale: 1.75,\n//                    easingFunction: ['Cubic', 'In'],\n//\t            enableAutoRotate:false,\n//\t\t    enableClouds:false,\n//                }}\n\n\n\n\nclass EarthMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state}=this.props;\n\tstate.React.Map=this;\n\tthis._ismounted = false;\n\tthis.elem=null;\n\tthis.data={cnt:99,markers:[],animations:[]};\n    };\t\n    componentDidMount() { \n\tthis._ismounted = true;\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    };\n    componentWillUnmount() {\n\tthis._ismounted = false;\n    };\n    onClickMarker(marker, markerObject, event) {\n\t//console.log(\"Clicked marker...\",marker.id)\n\tvar state=marker.state;\n\tvar colkey=marker.colkey;\n\tvar colrange=marker.colrange;\n\tvar colwhere=marker.colwhere;\n\tvar rowkey=marker.rowkey;\n\tvar rowrange=marker.rowrange;\n\tvar rowwhere=marker.rowwhere;\n\tvar cnt=marker.cnt;\n\tstate.Navigate.selectItemRange(state,colkey,rowkey,colrange,rowrange,colwhere,rowwhere,cnt,1);\n\t// setEvent({\n\t//   type: 'CLICK',\n\t//   marker,\n\t//   markerObjectID: markerObject.uuid,\n\t//   pointerEventPosition: { x: event.clientX, y: event.clientY },\n\t// });\n\t//setDetails(getTooltipContent(marker));\n    };\n    onDefocus(previousCoordinates, event){\n\t//setEvent({\n\t//  type: 'DEFOCUS',\n\t//  previousCoordinates,\n\t//  pointerEventPosition: { x: event.clientX, y: event.clientY },\n\t//});\n\t//setDetails(null);\n    };\n    showMap(state) {\n\t// dont re-render the globe... - only change the markers\n\tconsole.log(\"Rendering markers...\");\n\tthis.getMarkers(state);//this.data.markers=this.getMarkers(state);\n    };\n    getMarkers(state) {\n\t// get marker data\n\tconsole.log(\"Setting map markers...\");\n\t//var ll=this.markers.length;\n\t//for (var ii=0; ii < ll; ii++) {\n\t//    this.markers.splice(ii,1);\n\t//};\n\t//this.data.markers.splice(0,this.data.markers.length);\n\tvar tcnt=0;\n\tvar markers=[];//   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\tvar matrix=state.React.matrix;\n\tvar first=true;\n\tvar sum={x2:0,y2:0,z2:0,x:0,y:0,z:0,cnt:0};\n\tif (matrix !== undefined) {\n\t    state.Matrix.printElements(matrix);\n\t    var colkey = state.Path.getColKey(state)||\"\";\n\t    var rowkey = state.Path.getRowKey(state)||\"\";\n\t    var colvalues = state.Path.filterKeys(state,state.Matrix.values[colkey]||[\"\"]);\n\t    var rowvalues = state.Path.filterKeys(state,state.Matrix.values[rowkey]||[\"\"]);\n\t    //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n\t    //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n\t    //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n            // make markers\n            var rlen=rowvalues.length;\n            for(var ii=0; ii<rlen; ii++) {\n\t\tvar rowval=rowvalues[ii];\n\t\tvar rowrange=state.Matrix.getLatRange(state,rowvalues[ii]);\n\t\tvar rowwhere = state.Matrix.getLatWhere(state,\"lat\",rowvalues[ii]);\n\t\tvar clen=colvalues.length;\n\t\tfor(var jj=0; jj<clen; jj++) {\n\t\t    var colval=colvalues[jj];\n\t\t    var colrange=state.Matrix.getLonRange(state,colvalues[jj]);\n\t\t    var colwhere = state.Matrix.getLonWhere(state,\"lon\",colvalues[jj]);\n\t\t    var element=state.Matrix.getMatrixElement(colval,rowval,matrix);\n\t\t    if (element !== undefined) {\n\t\t\tvar lon=element.colval;\n\t\t\tvar lat=element.rowval;\n\t\t\tvar lev=element.maxlev;\n\t\t\tvar bgcolor=state.Colors.getLevelBgColor(lev);\n\t\t\tvar fgcolor=state.Colors.getLevelFgColor(lev);\n\t\t\tvar cnt=element.cnt;\n\t\t\ttcnt=tcnt+1;\n\t\t\tvar clat=Math.cos(lat);\n\t\t\tvar slat=Math.sin(lat);\n\t\t\tvar clon=Math.cos(lon);\n\t\t\tvar slon=Math.sin(lon);\n\t\t\tvar pos={x:clat*clon,y:clat,slon,z:slat};\n\t\t\tsum.cnt=sum.cnt+1;\n\t\t\tsum.x=sum.x+pos.x;\n\t\t\tsum.y=sum.y+pos.y;\n\t\t\tsum.z=sum.z+pos.z;\n\t\t\tsum.x2=sum.x2+pos.x*pos.x;\n\t\t\tsum.y2=sum.y2+pos.y*pos.y;\n\t\t\tsum.z2=sum.z2+pos.z*pos.z;\n\t\t\tvar mark={id:tcnt,\n\t\t\t\t  coordinates:[lat,lon],\n\t\t\t\t  city:\"Test\",\n\t\t\t\t  value:0,\n\t\t\t\t  element:element,\n\t\t\t\t  bgcolor:bgcolor,\n\t\t\t\t  fgcolor:fgcolor,\n\t\t\t\t  state:state,\n\t\t\t\t  colkey:\"lon\",\n\t\t\t\t  colrange:colrange,\n\t\t\t\t  colwhere:colwhere,\n\t\t\t\t  rowkey:\"lat\",\n\t\t\t\t  rowrange:rowrange,\n\t\t\t\t  rowwhere:rowwhere,\n\t\t\t\t  cnt:cnt\n\t\t\t\t };\n\t\t\tif (first) {\n\t\t\t    first=false;\n\t\t\t    //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n\t\t\t}\n\t\t\tmarkers.push(mark);\n\t\t\t//this.data.markers.push(mark);\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tif (sum.cnt>0) {\n\t    sum.x=sum.x/sum.cnt;\n\t    sum.y=sum.y/sum.cnt;\n\t    sum.z=sum.z/sum.cnt;\n\t    sum.x2=sum.x2/sum.cnt;\n\t    sum.y2=sum.y2/sum.cnt;\n\t    sum.z2=sum.z2/sum.cnt;\n\t    var dist=1+Math.sqrt(sum.x2 - sum.x*sum.x + sum.y2 - sum.y*sum.y + sum.z2 - sum.z*sum.z);\n\t    var ll=Math.sqrt(sum.x*sum.x+sum.y*sum.y+sum.z*sum.z);\n\t    if (ll>0) {\n\t\tsum.x=sum.x/ll;\n\t\tsum.y=sum.y/ll;\n\t\tsum.z=sum.z/ll;\n\t    } else {\n\t\tsum.x=1;\n\t\tsum.y=0;\n\t\tsum.z=0;\n\t    }\n\t    ll=Math.sqrt(sum.x*sum.x+sum.y*sum.y);\n\t    var clat=Math.acos(ll);\n\t    var clon=Math.atan2(sum.x,sum.y);\n\t    this.data.animations=[{\n\t\tanimationDuration:1000,\n\t\tcoordinates:[clat,clon],\n\t\tdistanceRadiusScale:dist,\n\t\teasingFunction: ['Linear','None'],\n\t    }];\n\t}\n\tconsole.log(\"Markers:\",this.data.markers.length);\n\tthis.data.markers=markers;\n\tthis.data.cnt=this.data.cnt+1;\n    };\n    render() {\n\tconst { classes, state, markers } = this.props;\n\tconsole.log(\"Rendering map...\");\n\t//this.setMarkers(state);\n\tconst data={cnt:this.cnt,markers:this.markers};\n\tconst assign= (elem) => {this.elem = elem;console.log(\"Element...\");};\n\treturn (<div className={classes.root}\n\t         style={{position:'fixed', marginLeft:'0%',width: '90%', height: 'calc(95% - '+footAndHeaderheight+')',overflow:'hidden'}} >\n\t\t   <MapGlobe onClickMarker={this.onClickMarker} onDefocus={this.onDefocus} data={this.data} classes={{map:classes.map}}/>\n\t      </div>\n\t     );\n    }\n}\n\nEarthMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EarthMap);\n"]},"metadata":{},"sourceType":"module"}