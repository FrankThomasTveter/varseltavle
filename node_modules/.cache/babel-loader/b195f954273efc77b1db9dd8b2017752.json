{"ast":null,"code":"import _slicedToArray from\"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import*as THREE from'three';var TWEEN=require('es6-tween');//import * as TWEEN from 'es6-tween';\nfunction random(scaleFactor){return Math.random()>0.5?scaleFactor*Math.random():-scaleFactor*Math.random();}var MARKER_COLOR='#ff0000';var MARKER_LIGHT='#ffcccc';var MARKER_COMPANION_COLOR='#ff7777';export default function markerRenderer(marker){var size=Math.max(marker.value/20,1);var geometry=new THREE.SphereGeometry(size,10,10);var material=new THREE.MeshBasicMaterial({color:new THREE.Color(MARKER_COLOR)});// add light\nvar mesh=new THREE.Mesh(geometry,material);var light=new THREE.PointLight(MARKER_LIGHT,1,0,0);mesh.children=[];mesh.add(light);// add companion markers based on size\nvar companions=[];for(var i=0;i<5;i++){var companionGeometry=new THREE.SphereGeometry(Math.min(size*Math.random()/2,1),10,10);var companionMaterial=new THREE.MeshBasicMaterial({color:new THREE.Color(MARKER_COMPANION_COLOR)});var companion=new THREE.Mesh(companionGeometry,companionMaterial);companion.lookAt(new THREE.Vector3(0,0,0));companions.push(companion);mesh.add(companion);}companions.forEach(function(companion,i){function animate(){var from={opacity:0.1,position:companion.position.clone().toArray(),scale:Math.max(0.5,Math.random())};var to={opacity:0.5,position:[random(size*3),random(size*3),random(size)],scale:0.01};var tween=new TWEEN.Tween(from).to(to,4000).easing(TWEEN.Easing.Quadratic.InOut).delay(i*200);tween.on('update',function(){var _from$position=_slicedToArray(from.position,3),x=_from$position[0],y=_from$position[1],z=_from$position[2];var companionMaterial=companion.material;//\nvar intensityChange=random(0.05);if(light.intensity+intensityChange>0&&light.intensity+intensityChange<1.5){light.intensity+=intensityChange;}companionMaterial.opacity=from.opacity;companion.scale.x=from.scale;companion.scale.y=from.scale;companion.scale.z=from.scale;companion.position.set(x,y,z);}).on('complete',animate).start();}animate();});return mesh;}","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/markerRenderer.ts"],"names":["THREE","TWEEN","require","random","scaleFactor","Math","MARKER_COLOR","MARKER_LIGHT","MARKER_COMPANION_COLOR","markerRenderer","marker","size","max","value","geometry","SphereGeometry","material","MeshBasicMaterial","color","Color","mesh","Mesh","light","PointLight","children","add","companions","i","companionGeometry","min","companionMaterial","companion","lookAt","Vector3","push","forEach","animate","from","opacity","position","clone","toArray","scale","to","tween","Tween","easing","Easing","Quadratic","InOut","delay","on","x","y","z","intensityChange","intensity","set","start"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { Marker } from 'react-globe';\n\nconst TWEEN = require('es6-tween');\n//import * as TWEEN from 'es6-tween';\n\n\nfunction random(scaleFactor: number): number {\n  return Math.random() > 0.5\n    ? scaleFactor * Math.random()\n    : -scaleFactor * Math.random();\n}\n\nconst MARKER_COLOR = '#ff0000';\nconst MARKER_LIGHT = '#ffcccc';\nconst MARKER_COMPANION_COLOR = '#ff7777';\n\nexport default function markerRenderer(marker: Marker): THREE.Object3D {\n  const size = Math.max(marker.value / 20, 1);\n  const geometry = new THREE.SphereGeometry(size, 10, 10);\n  const material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(MARKER_COLOR),\n  });\n\n  // add light\n  const mesh = new THREE.Mesh(geometry, material);\n  const light = new THREE.PointLight(MARKER_LIGHT, 1, 0, 0);\n  mesh.children = [];\n  mesh.add(light);\n\n  // add companion markers based on size\n  const companions: THREE.Mesh[] = [];\n  for (let i = 0; i < 5; i++) {\n    const companionGeometry = new THREE.SphereGeometry(\n      Math.min((size * Math.random())/2, 1),\n      10,\n      10,\n    );\n    const companionMaterial = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(MARKER_COMPANION_COLOR),\n    });\n    const companion = new THREE.Mesh(companionGeometry, companionMaterial);\n    companion.lookAt(new THREE.Vector3(0, 0, 0));\n    companions.push(companion);\n    mesh.add(companion);\n  }\n\n  companions.forEach(\n    (companion, i: number): void => {\n      function animate(): void {\n        const from = {\n          opacity: 0.1,\n          position: companion.position.clone().toArray(),\n          scale: Math.max(0.5, Math.random()),\n        };\n        const to = {\n          opacity: 0.5,\n          position: [random(size * 3), random(size * 3), random(size)],\n          scale: 0.01,\n        };\n        const tween = new TWEEN.Tween(from)\n          .to(to, 4000)\n          .easing(TWEEN.Easing.Quadratic.InOut)\n          .delay(i * 200);\n        tween\n          .on(\n            'update',\n            (): void => {\n              const [x, y, z] = from.position;\n              const companionMaterial = companion.material as THREE.MeshBasicMaterial; //\n              const intensityChange = random(0.05);\n              if (\n                light.intensity + intensityChange > 0 &&\n                light.intensity + intensityChange < 1.5\n              ) {\n                light.intensity += intensityChange;\n              }\n              companionMaterial.opacity = from.opacity;\n              companion.scale.x = from.scale;\n              companion.scale.y = from.scale;\n              companion.scale.z = from.scale;\n              companion.position.set(x, y, z);\n            },\n          )\n          .on('complete', animate)\n          .start();\n      }\n      animate();\n    },\n  );\n  return mesh;\n}\n"]},"metadata":{},"sourceType":"module"}