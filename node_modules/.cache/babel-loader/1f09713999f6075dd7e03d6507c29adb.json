{"ast":null,"code":"//console.log(\"Loading DatabaseLib.js\");\nvar alasql = window.alasql;\n\nfunction Database() {\n  this.cnt = 0;\n  this.keyCnt = {};\n  this.values = {};\n  this.epoch0 = 0;\n  this.regfile = \"register\"; // register file (shows current datfile)\n\n  this.datfile = \"\"; // json data file\n\n  this.arrayConstructor = [].constructor;\n  this.objectConstructor = {}.constructor;\n  this.casc = 0; // key is sorted ascending\n\n  this.cdes = 1; // key is sorted descending\n\n  this.nasc = 2; // key is sorted ascending\n\n  this.ndes = 3; // key is sorted descending\n\n  this.delay = 100000; // server-polling period in ms\n\n  this.ready = true; // can we poll server or is another poll running\n\n  this.log = \"\";\n  this.mod = \"\";\n\n  this.init = function (state) {\n    var par = \"Database\";\n    state.Utils.init(par, this);\n  };\n\n  this.update = function (state) {\n    this.setTime(state);\n    this.load(state);\n    setTimeout(function () {\n      return function () {\n        this.update(state);\n      };\n    }, this.delay);\n  };\n\n  this.load = function (state) {\n    //console.log(\"Loading...\",this.cnt++);\n    state.Default.loadDefault(state, [this.loadRegister, this.loadData]);\n  };\n\n  this.getKeyValues = function (state, key) {\n    //console.log(\"Database:\",JSON.stringify(state.Database.values));\n    var vals = state.Database.values[key];\n\n    if (vals !== undefined) {\n      return vals;\n    } else {\n      return [];\n    }\n  };\n\n  this.loadRegister = function (state, callbacks) {\n    //console.log(\"loadRegister\");\n    if (this.ready) {\n      // make sure we do not re-load if we are already loading\n      this.ready = false;\n      state.Html.setFootnote(state, \"Server-request: \" + this.regfile, \"secondary\");\n      var regHttp = new XMLHttpRequest();\n      regHttp.addEventListener(\"progress\", function (e) {\n        return state.Html.progressInfo(state, e);\n      }); //regHttp.addEventListener(\"load\",(e)=>state.Html.loadInfo(state,e));\n\n      regHttp.addEventListener(\"error\", function (e) {\n        return state.Html.errorInfo(state, e);\n      });\n      regHttp.addEventListener(\"abort\", function (e) {\n        return state.Html.abortInfo(state, e);\n      });\n\n      regHttp.onreadystatechange = function () {\n        this.ready = true;\n\n        if (regHttp.readyState === 4) {\n          if (regHttp.status === 200) {\n            //console.log(regHttp.responseText);\n            var file = regHttp.responseText;\n\n            if (file !== this.datfile) {\n              // load new data\n              this.datfile = file;\n              var callback = callbacks.shift();\n\n              if (callback !== undefined) {\n                setTimeout(callback(state, file, callbacks), 0);\n              }\n            } else {\n              state.Html.setFootnote(state);\n            }\n          } else {\n            state.Html.setFootnote(state, \"Unable to load \" + this.regfile, \"\"); //state.Html.setConsole(this.regfile+\" error\");\n          }\n        } else {\n          state.Html.setFootnote(state, this.regfile + \" error\", \"\");\n        }\n\n        ;\n      }.bind(this);\n\n      regHttp.responseType = \"\";\n      regHttp.overrideMimeType(\"text/text\");\n      regHttp.open(\"GET\", \"data/\" + this.regfile, true);\n      regHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n      regHttp.setRequestHeader('cache-control', 'max-age=0');\n      regHttp.setRequestHeader('expires', '0');\n      regHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n      regHttp.setRequestHeader('pragma', 'no-cache');\n      regHttp.send();\n    } else {\n      //state.Html.setConsole(\"\");\n      state.Html.setFootnote(state, \"Already waiting for reply...\");\n    }\n\n    ;\n  }.bind(this);\n\n  this.loadData = function (state, file, callbacks) {\n    //console.log(\"loadData\");\n    if (this.ready) {\n      // make sure we do not re-load if we are already loading\n      this.ready = false;\n      state.Html.setFootnote(state, \"Server-request: \" + this.datfile, \"secondary\");\n      var datHttp = new XMLHttpRequest();\n      datHttp.addEventListener(\"progress\", function (e) {\n        return state.Html.progressInfo(state, e);\n      }); //datHttp.addEventListener(\"load\",(e)=>state.Html.loadInfo(state,e));\n\n      datHttp.addEventListener(\"error\", function (e) {\n        return state.Html.errorInfo(state, e);\n      });\n      datHttp.addEventListener(\"abort\", function (e) {\n        return state.Html.abortInfo(state, e);\n      });\n\n      datHttp.onreadystatechange = function () {\n        this.ready = true;\n\n        if (datHttp.readyState === 4) {\n          if (datHttp.status === 200) {\n            console.log(\"Loaded \" + this.datfile);\n            state.Html.setConsole(\"100%\");\n            state.Html.broadcast(state, \"Loaded \" + this.datfile);\n            state.Html.setFootnote(state, \"Creating database\", \"tertiary\");\n            console.log(\"Creating database from \" + file);\n            setTimeout(function () {\n              this.dbInsert(state, datHttp.responseText);\n              state.Html.setFootnote(state, \"Extracting data.\", \"secondary\");\n              setTimeout(function () {\n                state.Show.showAll(state);\n                state.Html.setFootnote(state);\n                state.Html.setConsole(file);\n                var callback = callbacks.shift();\n\n                if (callback !== undefined) {\n                  //console.log(\"Found callback\");\n                  setTimeout(callback(state, callbacks), 0);\n                } else {//console.log(\"No callback\");\n                }\n              }.bind(this), 0);\n            }.bind(this), 0);\n          } else {\n            state.Html.setFootnote(state, \"Unable to load \" + file, \"\");\n            state.Html.setConsole(file + \" error\");\n          }\n        }\n      }.bind(this);\n\n      datHttp.responseType = \"\";\n      datHttp.overrideMimeType(\"text/text\");\n      datHttp.open(\"GET\", \"data/\" + this.datfile, true);\n      datHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n      datHttp.setRequestHeader('cache-control', 'max-age=0');\n      datHttp.setRequestHeader('expires', '0');\n      datHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n      datHttp.setRequestHeader('pragma', 'no-cache');\n      datHttp.send();\n    } else {\n      state.Html.setConsole(\"\");\n      state.Html.setFootnote(state, \"Already waiting for reply...\");\n    }\n\n    ;\n  }.bind(this);\n\n  this.getTime = function (state, s) {\n    var nn = s.match(/\\d+/g).map(Number);\n    var date0 = new Date(Date.UTC(nn[0], nn[1] - 1, nn[2], nn[3], nn[4], nn[5], ((nn[6] || '') + '000').slice(0, 3))); // modification time\n    //console.log(\"Gettime:\",s,JSON.stringify(nn));\n\n    return date0.getTime();\n  };\n\n  this.setTime = function (state) {\n    var d = new Date();\n    var epoch = d.getTime(); //console.log(\"Times:\",epoch,this.epoch0);\n\n    if (this.epoch0 !== undefined) {\n      var age = epoch - this.epoch0;\n      this.mod = this.getTimeDiff(state, age);\n\n      if (state.React !== undefined && state.React.Status !== undefined) {\n        state.React.Status.setAge(state, this.mod); //console.log(\"Age:\",epoch,this.epoch0,age);\n      }\n    }\n  };\n\n  this.dbInsert = function (state, raw) {\n    try {\n      //console.log(\"Parsing JSON.\");\n      var json = JSON.parse(raw);\n      var len = json.data.length;\n\n      for (var ii = 0; ii < len; ii++) {\n        json.data[ii][\"cnt\"] = ii;\n      } // get modified date\n      //console.log(\"Setting time.\");\n\n\n      this.epoch0 = this.getTime(state, json.epoch); // data file time\n\n      this.setTime(state); // data file time\n      // make database for raw data\n\n      this.makeTable(state); // reset key counts and range\n\n      this.cnt = 0;\n      this.keyCnt = {}; // reset key-count\n      // put data into databse\n      //console.log(\"inserting\");\n\n      var data = [];\n      var rcnt = this.extractData(state, data, {}, \"\", json.data); //console.log(\"Count:\",rcnt);\n      //console.log(\"Data:\",JSON.stringify(data));\n\n      console.log(\"Raw length:\", data.length, \" count:\", rcnt);\n      this.dataToDb(state, data); // sanity check\n\n      var sql = \"select count(*) AS cnt, max(lev) AS lev FROM alarm\";\n      var dd0 = alasql(sql);\n      var nrec = dd0[0].cnt;\n      console.log(\"Records in database:\", nrec);\n      this.postProcess(state);\n      state.Path.makePath(state); // initialise path\n      //console.log(\"Indexing and cleaning up.\");\n\n      this.dbindex(state, state.Path.other.table); // make indexes\n\n      this.dbindex(state, state.Path.other.rest); // make indexes\n\n      state.Path.checkTableKeys(state);\n      state.Html.broadcast(state, \"Database is ready.\"); // set home\n\n      state.Path.cleanSelect(state);\n      state.Navigate.setHome(state); //console.log(\"Database is ready.\");\n    } catch (e) {\n      alert(e);\n    }\n\n    ;\n  };\n\n  this.updateKeyCnt = function (state, key, val) {\n    if (this.keyCnt[key] === undefined) {\n      this.keyCnt[key] = {\n        cnt: 0,\n        type: \"num\",\n        order: this.nasc\n      };\n    }\n\n    this.keyCnt[key].cnt = this.keyCnt[key].cnt + 1;\n\n    if (this.keyCnt[key].type === \"num\" && isNaN(val)) {\n      this.keyCnt[key].type = \"nan\";\n      this.keyCnt[key].order = this.casc;\n    }\n  };\n\n  this.postProcess = function (state) {\n    // update meta-data\n    var keys = Object.keys(state.Database.keyCnt);\n    var lenk = keys.length;\n\n    for (var ii = 0; ii < lenk; ii++) {\n      var key = keys[ii]; // make list of values in Database for each key\n\n      state.Database.values[key] = [];\n      var sql = \"select DISTINCT \" + key + \" AS \" + key + \" FROM alarm\";\n      var dd0 = alasql(sql);\n      var lend = dd0.length;\n\n      for (var jj = 0; jj < lend; jj++) {\n        var doc = dd0[jj];\n        state.Database.values[key].push(doc[key]);\n      }\n\n      ;\n    }\n\n    ;\n  };\n\n  this.extractData = function (state, data, parent, key, raw) {\n    // insert records into db (recursive)\n    var rcnt = 0;\n    var kk, kii, child, dkey; //console.log(\"Processing {\",state.Utils.toString(parent),\"} '\",key,\"' (\",state.Utils.toString(raw),\")\");\n\n    var wii = this.whatIsIt(raw);\n\n    if (wii === \"Object\" && key === \"\") {\n      //console.log(\"Found object (\",state.Utils.toString(parent),\")\");\n      child = state.Utils.cp(parent); // loop over plain values first\n\n      for (kk in raw) {\n        kii = this.whatIsIt(raw[kk]);\n\n        if (kii === \"value\") {\n          child[kk] = raw[kk];\n        }\n      } // loop over sub-objects\n\n\n      var nn = 0;\n\n      for (kk in raw) {\n        kii = this.whatIsIt(raw[kk]);\n\n        if (kii !== \"value\") {\n          nn = nn + 1;\n          rcnt = rcnt + this.extractData(state, data, child, kk, raw[kk]);\n        }\n      }\n\n      if (nn === 0) {\n        // insert \n        //console.log(\"Object was empty.\");\n        rcnt = rcnt + this.extractData(state, data, child, null, null);\n      }\n    } else if (wii === \"Object\" && key !== \"\") {\n      //console.log(\"Found object key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n      child = state.Utils.cp(parent); // loop over plain values first\n\n      for (kk in raw) {\n        child[key] = kk;\n        rcnt = rcnt + this.extractData(state, data, child, \"\", raw[kk]);\n      }\n    } else if (wii === \"Array\") {\n      //console.log(\"Found array key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n      var dlen = raw.length;\n\n      for (var ii = 0; ii < dlen; ii++) {\n        rcnt = rcnt + this.extractData(state, data, parent, key, raw[ii]);\n      }\n    } else {\n      //console.log(\"Found key '\",key,\"' \",wii,\" (\",state.Utils.toString(parent),\")\");\n      var doc = state.Utils.cp(parent);\n\n      if (raw !== null) {\n        if (key === \"\") {\n          doc.value = raw;\n        } else {\n          doc[key] = raw;\n        }\n      } //console.log(\"Updating internal raw structure\",JSON.stringify(setup));\n\n\n      for (dkey in doc) {\n        var val = doc[dkey];\n        this.updateKeyCnt(state, dkey, val); //// this takes too much time...\n        //if (this.values[dkey]  === undefined) {\n        //\tthis.values[dkey]=[];\n        //  };\n        ////console.log(\"Setup:\",JSON.stringify(setup));\n        ////console.log(\"Key:\",key,JSON.stringify(this.values));\n        //if (this.values[dkey].indexOf(val)  === -1 ) { // value not in range\n        //    this.values[dkey].push(val); // add value to range\n        //};\n      }\n\n      ; //console.log(\">>> Inserting:\",state.Utils.toString(doc));\n\n      rcnt = rcnt + 1;\n      this.cnt = this.cnt + 1; //if (this.cnt < 10) { // debug purposes\n\n      state.Threshold.setGThr(state, doc);\n      doc.lev = state.Threshold.getLevel(state, doc);\n      doc.lat = state.Threshold.getLat(state, doc);\n      doc.lon = state.Threshold.getLon(state, doc);\n      this.updateKeyCnt(state, \"lon\", doc.lon);\n      this.updateKeyCnt(state, \"lat\", doc.lat);\n      data.push(doc);\n    }\n\n    return rcnt;\n  };\n\n  this.dbextract = function (state, showFunc) {\n    // extract data from db and show\n    // extract data from db and insert into data-array\n    // var parent={};//{test:{$exists:false}};\n    var docs;\n    var where = this.getWhere(state);\n    var docs0 = this.getCntDocs(state, where);\n    console.log(\"Where:\", where, JSON.stringify(docs0));\n    var nrec = docs0[0].cnt;\n    var m = {};\n    state.Matrix.cnt = nrec;\n\n    if (nrec > state.Matrix.popSeries) {\n      // only use counts...\n      state.Matrix.initKeyCnt(state);\n      state.Matrix.mapKeyCnt(state, where, nrec, state.Path.keys.other);\n      state.Matrix.mapKeyCnt(state, where, nrec, state.Path.trash); //console.log(\"Setup:\",\n      //\t    JSON.stringify(state.Matrix.values),\n      //\t    JSON.stringify(state.Matrix.keyCnt));\n\n      state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\n      state.Matrix.sortMatrixValues(state);\n      docs = this.getCntDocs(state, where, state.Path.other.table); //console.log(\"Count:\",sql,JSON.stringify(docs));\n      // add \"undefined\" range of keys that are not present in every doc...\n\n      state.Matrix.makeMatrixCnt(state, docs, m);\n    } else {\n      //console.log(\"Database where:\",where);\n      docs = this.getDocs(state, where); // get all docs\n      //console.log(\">>>Extraction key (where='\",where,\"') Docs:\",docs.length);\n\n      state.Matrix.initKeyCnt(state);\n      state.Matrix.mapKeys(state, docs);\n      state.Matrix.addMapKeys(state, docs); //console.log(\"Setup=\",JSON.stringify(setup));\n      //console.log (\"Maprange:\",JSON.stringify(state.Matrix.values));\n      // subset contains the keys being displayed in matrix...\n\n      state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\n      state.Matrix.sortMatrixValues(state); // make matrix\n\n      state.Matrix.makeMatrix(state, docs, m); //console.log (\"Matrix:\",JSON.stringify(m));\n    }\n\n    showFunc(state, m);\n  };\n\n  this.dbindex = function (state, ks) {\n    // make indexes on all keys\n    var s = \"\";\n    var klen = ks.length;\n\n    for (var ii = 0; ii < klen; ii++) {\n      //alasql(\"CREATE INDEX ? ON TABLE alarm.?\",ks[ii],ks[ii]);\n      s = s + \" \" + ks[ii];\n    }\n\n    ; //console.log(\"Indexes:\",s);\n  };\n\n  this.getWhereDetail = function (key, val) {\n    if (val === undefined || val === null || val === \"\") {\n      return key + ' is NULL';\n    } else {\n      return key + '=\"' + val + '\"';\n    }\n\n    ;\n  };\n\n  this.getWhere = function (state) {\n    var where = \"\"; //console.log(\"Path:\",JSON.stringify(state.Path.keys));\n\n    if (state.Path.keys.path !== undefined) {\n      var plen = state.Path.keys.path.length;\n\n      for (var ii = 0; ii < plen; ii++) {\n        var key = state.Path.keys.path[ii];\n        var whereKey = state.Path.parseWhere(state, key);\n\n        if (whereKey === undefined || whereKey === null || whereKey === \"\") {\n          if (where !== \"\") {\n            where = where + ' AND ';\n          }\n\n          ;\n          where = where + key + ' is NULL';\n        } else {\n          if (where !== \"\") {\n            where = where + ' AND ';\n          }\n\n          ;\n          where = where + \"(\" + whereKey + \")\";\n        }\n      }\n\n      ;\n\n      if (where !== \"\") {\n        where = \" WHERE \" + where;\n      } //console.log(\"Where=|\"+where+\"|\")\n\n    }\n\n    ;\n    return where;\n  };\n\n  this.getColWhere = function (key, values, index, step) {\n    var clen = values.length;\n    var where = \"\";\n\n    for (var kk = index; kk < Math.min(clen, index + step); kk++) {\n      if (where !== \"\") {\n        where = where + \" or \";\n      }\n\n      where = where + this.getWhereDetail(key, values[kk]);\n    }\n\n    ;\n    return where;\n  };\n\n  this.getGroup = function (keys) {\n    var group = \"\";\n    var plen = keys.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = keys[ii];\n\n      if (group !== \"\") {\n        group = group + ',';\n      }\n\n      ;\n      group = group + key;\n    }\n\n    ;\n\n    if (group !== \"\") {\n      group = \" GROUP BY \" + group;\n    }\n\n    return group;\n  };\n\n  this.getCols = function (keys) {\n    var cols = \"\";\n    var plen = keys.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = keys[ii];\n      cols = cols + key;\n\n      if (cols !== \"\") {\n        cols = cols + ',';\n      }\n\n      ;\n    }\n\n    ;\n    return cols;\n  };\n\n  this.getAll = function (state) {\n    var cols = \"\";\n    var plen = state.Path.keys.other.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = state.Path.keys.other[ii];\n      cols = cols + key;\n\n      if (cols !== \"\") {\n        cols = cols + ',';\n      }\n\n      ;\n    }\n\n    ;\n    return cols;\n  };\n\n  this.getCntDocs = function (state, where, keys) {\n    var sql, dd;\n    var body = \"count(*) AS cnt, max(lev) AS lev, max(lat) AS maxlat, min(lat) AS minlat, max(lon) AS maxlon, min(lon) AS minlon FROM alarm\";\n\n    if (keys === undefined) {\n      sql = \"select \" + body + where; //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\n      dd = alasql(sql); //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n      //console.log(\"Cnt:\",JSON.stringify(dd));\n\n      return dd;\n    } else {\n      var cols = this.getCols(keys);\n      var group = this.getGroup(keys);\n      sql = \"select \" + cols + body + where + group;\n      dd = alasql(sql); //console.log(\"Cnt:\",JSON.stringify(dd));\n\n      return dd;\n    }\n  };\n\n  this.getDocs = function (state, where) {\n    var dd;\n    dd = alasql(\"select * FROM alarm\" + where);\n    return dd;\n  };\n\n  this.makeTable = function (state) {\n    alasql('DROP TABLE IF EXISTS alarm; CREATE TABLE alarm;');\n  };\n\n  this.dataToDb = function (state, data) {\n    alasql.tables.alarm.data = data;\n  };\n\n  this.getKeyCnt = function (state, key, where) {\n    var sql = \"select \" + key + \",count(*) AS cnt FROM alarm\" + where + \" GROUP BY \" + key;\n    return alasql(sql);\n  };\n\n  this.whatIsIt = function (object) {\n    // determine object type\n    if (object === null) {\n      return \"null\";\n    } else if (object.constructor === this.arrayConstructor) {\n      return \"Array\";\n    } else if (object.constructor === this.objectConstructor) {\n      return \"Object\";\n    } else {\n      return \"value\";\n    }\n  };\n\n  this.getTimeDiff = function (state, dt) {\n    var s = \"\";\n\n    if (dt === undefined || isNaN(state, dt)) {\n      return s;\n    }\n\n    ;\n    var msec = Math.abs(state, dt);\n    var dd = Math.floor(state, (state, msec / 1000 / 60) / 60 / 24);\n    msec -= dd * 1000 * 60 * 60 * 24;\n    var hh = Math.floor(state, (state, msec / 1000) / 60 / 60);\n    msec -= hh * 1000 * 60 * 60;\n    var mm = Math.floor(state, msec / 1000 / 60);\n    msec -= mm * 1000 * 60;\n    var ss = Math.floor(state, msec / 1000);\n    msec -= ss * 1000;\n\n    if (dt < 0) {\n      s = \"-\";\n    } else if (dt > 0) {\n      s = \"+\";\n    } else {\n      s = \"0\";\n    }\n\n    if (dd !== 0) s = s + \" \" + state.Utils.numberWithCommas(dd) + \"d\";\n    if (hh !== 0) s = s + \" \" + hh + \"h\";\n    if (mm !== 0) s = s + \" \" + mm + \"m\"; //if (ss !== 0) s=s+\" \"+ss+\"s\";\n\n    return s;\n  };\n}\n\n;\nexport default Database;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/lib/DatabaseLib.js"],"names":["alasql","window","Database","cnt","keyCnt","values","epoch0","regfile","datfile","arrayConstructor","constructor","objectConstructor","casc","cdes","nasc","ndes","delay","ready","log","mod","init","state","par","Utils","update","setTime","load","setTimeout","Default","loadDefault","loadRegister","loadData","getKeyValues","key","vals","undefined","callbacks","Html","setFootnote","regHttp","XMLHttpRequest","addEventListener","e","progressInfo","errorInfo","abortInfo","onreadystatechange","readyState","status","file","responseText","callback","shift","bind","responseType","overrideMimeType","open","setRequestHeader","send","datHttp","console","setConsole","broadcast","dbInsert","Show","showAll","getTime","s","nn","match","map","Number","date0","Date","UTC","slice","d","epoch","age","getTimeDiff","React","Status","setAge","raw","json","JSON","parse","len","data","length","ii","makeTable","rcnt","extractData","dataToDb","sql","dd0","nrec","postProcess","Path","makePath","dbindex","other","table","rest","checkTableKeys","cleanSelect","Navigate","setHome","alert","updateKeyCnt","val","type","order","isNaN","keys","Object","lenk","lend","jj","doc","push","parent","kk","kii","child","dkey","wii","whatIsIt","cp","dlen","value","Threshold","setGThr","lev","getLevel","lat","getLat","lon","getLon","dbextract","showFunc","docs","where","getWhere","docs0","getCntDocs","stringify","m","Matrix","popSeries","initKeyCnt","mapKeyCnt","trash","exportAllKeys","sortMatrixValues","makeMatrixCnt","getDocs","mapKeys","addMapKeys","makeMatrix","ks","klen","getWhereDetail","path","plen","whereKey","parseWhere","getColWhere","index","step","clen","Math","min","getGroup","group","getCols","cols","getAll","dd","body","tables","alarm","getKeyCnt","object","dt","msec","abs","floor","hh","mm","ss","numberWithCommas"],"mappings":"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","sourcesContent":["//console.log(\"Loading DatabaseLib.js\");\n\nconst alasql = window.alasql;\n\nfunction Database() {\n    this.cnt=0;\n    this.keyCnt={};\n    this.values= {};\n    this.epoch0=0;\n    this.regfile=\"register\";      // register file (shows current datfile)\n    this.datfile=\"\";              // json data file\n    this.arrayConstructor=[].constructor;\n    this.objectConstructor={}.constructor;\n    this.casc=0; // key is sorted ascending\n    this.cdes=1; // key is sorted descending\n    this.nasc=2; // key is sorted ascending\n    this.ndes=3; // key is sorted descending\n    this.delay=100000;  // server-polling period in ms\n    this.ready=true;     // can we poll server or is another poll running\n    this.log=\"\";\n    this.mod=\"\";\n    this.init=function(state){\n\tvar par=\"Database\";\n\tstate.Utils.init(par,this);\n    };\n    this.update=function(state) {\n\tthis.setTime(state);\n\tthis.load(state);\n\tsetTimeout(()=>function() {this.update(state)},this.delay);\n    };\n    this.load=function(state) {\n\t//console.log(\"Loading...\",this.cnt++);\n\tstate.Default.loadDefault(state,[this.loadRegister,\n\t\t\t\t\t this.loadData,\n\t\t\t\t\t //function(state,callbacks){console.log(\">>> Default:\",JSON.stringify(state.Default.trash));}\n\t\t\t\t\t]);\n    };\n    this.getKeyValues=function(state, key) {\n\t//console.log(\"Database:\",JSON.stringify(state.Database.values));\n\tvar vals=state.Database.values[key];\n\tif (vals !== undefined) {\n\t    return vals;\n\t} else {\n\t    return [];\n\t}\n    };\n    this.loadRegister=function(state, callbacks ) {\n\t//console.log(\"loadRegister\");\n\tif (this.ready) { // make sure we do not re-load if we are already loading\n\t    this.ready=false;\n\t    state.Html.setFootnote(state, \"Server-request: \"+this.regfile,\"secondary\");\n\t    var regHttp = new XMLHttpRequest();\n\t    regHttp.addEventListener(\"progress\",(e)=>state.Html.progressInfo(state,e));\n\t    //regHttp.addEventListener(\"load\",(e)=>state.Html.loadInfo(state,e));\n\t    regHttp.addEventListener(\"error\",(e)=>state.Html.errorInfo(state,e));\n\t    regHttp.addEventListener(\"abort\",(e)=>state.Html.abortInfo(state,e));\n\t    regHttp.onreadystatechange = function() {\n\t\tthis.ready=true;\n\t\tif (regHttp.readyState  === 4) {\n\t\t    if (regHttp.status  === 200) {\n\t\t\t//console.log(regHttp.responseText);\n\t\t\tvar file = regHttp.responseText;\n\t\t\tif (file !== this.datfile) { // load new data\n\t    \t\t    this.datfile=file;\n\t\t\t    var callback=callbacks.shift();\n\t\t\t    if (callback !== undefined) {\n\t\t\t\tsetTimeout(callback(state,file,callbacks),0);\n\t\t\t    }\n\t\t\t} else {\n\t\t\t    state.Html.setFootnote(state);\n\t\t\t}\n\t\t    } else {\n\t\t\tstate.Html.setFootnote(state,\"Unable to load \"+this.regfile,\"\");\n\t\t\t//state.Html.setConsole(this.regfile+\" error\");\n\t\t    }\n\t\t} else {\n\t\t    state.Html.setFootnote(state,this.regfile+\" error\",\"\");\t\t\n\t\t};\n\t    }.bind(this);\n\t    regHttp.responseType=\"\";\n\t    regHttp.overrideMimeType(\"text/text\");\n\t    regHttp.open(\"GET\", \"data/\"+this.regfile, true);\n\t    regHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n\t    regHttp.setRequestHeader('cache-control', 'max-age=0');\n\t    regHttp.setRequestHeader('expires', '0');\n\t    regHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n\t    regHttp.setRequestHeader('pragma', 'no-cache');\n\t    regHttp.send(); \n\t} else {\n\t    //state.Html.setConsole(\"\");\n\t    state.Html.setFootnote(state,\"Already waiting for reply...\");\n\t};\n    }.bind(this);\n    this.loadData=function(state,file, callbacks ) {\n\t//console.log(\"loadData\");\n\tif (this.ready) { // make sure we do not re-load if we are already loading\n\t    this.ready=false;\n\t    state.Html.setFootnote(state, \"Server-request: \"+this.datfile,\"secondary\");\n\t    var datHttp = new XMLHttpRequest();\n\t    datHttp.addEventListener(\"progress\",(e)=>state.Html.progressInfo(state,e));\n\t    //datHttp.addEventListener(\"load\",(e)=>state.Html.loadInfo(state,e));\n\t    datHttp.addEventListener(\"error\",(e)=>state.Html.errorInfo(state,e));\n\t    datHttp.addEventListener(\"abort\",(e)=>state.Html.abortInfo(state,e));\n\t    datHttp.onreadystatechange = function() {\n\t\tthis.ready=true;\n\t\tif (datHttp.readyState  === 4) {\n\t\t    if (datHttp.status  === 200) {\n\t\t\tconsole.log(\"Loaded \"+this.datfile);\n\t\t\tstate.Html.setConsole(\"100%\");\n\t\t\tstate.Html.broadcast(state,\"Loaded \"+this.datfile);\n\t    \t\tstate.Html.setFootnote(state,\"Creating database\",\"tertiary\");\n\t\t\tconsole.log(\"Creating database from \"+file);\n\t\t\tsetTimeout(function() {\n\t\t\t    this.dbInsert(state,datHttp.responseText);\n\t    \t\t    state.Html.setFootnote(state,\"Extracting data.\",\"secondary\");\n\t\t\t    setTimeout(function() {\n\t\t\t\tstate.Show.showAll(state);\n\t\t\t\tstate.Html.setFootnote(state);\n\t\t\t\tstate.Html.setConsole(file);\n\t\t\t\tvar callback=callbacks.shift();\n\t\t\t\tif (callback !== undefined) {\n\t\t\t\t    //console.log(\"Found callback\");\n\t\t\t    \t    setTimeout(callback(state,callbacks),0);\n\t\t\t\t} else {\n\t\t\t\t    //console.log(\"No callback\");\n\t\t\t\t}\n\t\t\t    }.bind(this),0);\n\t\t\t}.bind(this),0);\n\t\t    } else {\n\t    \t\tstate.Html.setFootnote(state,\"Unable to load \"+file,\"\");\n\t\t\tstate.Html.setConsole(file+\" error\");\n\t\t    }\n\t\t}\n\t    }.bind(this);\n\t    datHttp.responseType=\"\";\n\t    datHttp.overrideMimeType(\"text/text\");\n\t    datHttp.open(\"GET\", \"data/\"+this.datfile, true);\n\t    datHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n\t    datHttp.setRequestHeader('cache-control', 'max-age=0');\n\t    datHttp.setRequestHeader('expires', '0');\n\t    datHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n\t    datHttp.setRequestHeader('pragma', 'no-cache');\n\t    datHttp.send(); \n\t} else {\n\t    state.Html.setConsole(\"\");\n\t    state.Html.setFootnote(state, \"Already waiting for reply...\");\n\t};\n    }.bind(this);\n    this.getTime=function(state,s) {\n\tvar nn = s.match(/\\d+/g).map(Number);\n\tvar date0 = new Date(Date.UTC(nn[0],nn[1]-1,nn[2],nn[3],nn[4],nn[5],\n\t\t\t\t      ((nn[6]||'')+'000').slice(0,3))); // modification time\n\t//console.log(\"Gettime:\",s,JSON.stringify(nn));\n\treturn date0.getTime();\n    };\n    this.setTime=function(state) {\n\tvar d = new Date();\n\tvar epoch=d.getTime();\n\t//console.log(\"Times:\",epoch,this.epoch0);\n\tif (this.epoch0 !== undefined) {\n\t    var age = epoch - this.epoch0;\n\t    this.mod=this.getTimeDiff(state,age);\n\t    if (state.React !== undefined && state.React.Status !== undefined) {\n\t\tstate.React.Status.setAge(state,this.mod);\n\t\t//console.log(\"Age:\",epoch,this.epoch0,age);\n\t    }\n\t}\n    };\n    this.dbInsert=function(state,raw) {\n\ttry {\n\t    //console.log(\"Parsing JSON.\");\n\t    var json = JSON.parse(raw);\n\t    var len=json.data.length\n\t    for (var ii=0;ii<len;ii++) {\n\t\tjson.data[ii][\"cnt\"]=ii\n\t    }\n\t    // get modified date\n\t    //console.log(\"Setting time.\");\n\t    this.epoch0=this.getTime(state,json.epoch);     // data file time\n\t    this.setTime(state);     // data file time\n\t    // make database for raw data\n\t    this.makeTable(state);\n\t    // reset key counts and range\n\t    this.cnt=0;\n\t    this.keyCnt={}; // reset key-count\n\t    // put data into databse\n\t    //console.log(\"inserting\");\n\t    var data=[];\n\t    var rcnt=this.extractData(state,data,{},\"\",json.data);\n\t    //console.log(\"Count:\",rcnt);\n\t    //console.log(\"Data:\",JSON.stringify(data));\n\t    console.log(\"Raw length:\",data.length,\" count:\",rcnt);\n\t    this.dataToDb(state,data);\n\t    // sanity check\n\t    var sql=\"select count(*) AS cnt, max(lev) AS lev FROM alarm\";\n\t    var dd0=alasql(sql);\n\t    var nrec= dd0[0].cnt;\n\t    console.log(\"Records in database:\",nrec);\n\t    this.postProcess(state);\n\t    state.Path.makePath(state); // initialise path\n\t    //console.log(\"Indexing and cleaning up.\");\n\t    this.dbindex(state,state.Path.other.table); // make indexes\n\t    this.dbindex(state,state.Path.other.rest); // make indexes\n\t    state.Path.checkTableKeys(state);\n\t    state.Html.broadcast(state,\"Database is ready.\");\n\t    // set home\n\t    state.Path.cleanSelect(state);\n\t    state.Navigate.setHome(state);\n\t    //console.log(\"Database is ready.\");\n\t} catch (e) {\n\t    alert(e);\n\t};\n    };\n    this.updateKeyCnt=function(state,key,val) {\n\tif (this.keyCnt[key] === undefined) {\n\t    this.keyCnt[key]={cnt:0,type:\"num\",order:this.nasc};\n\t}\n\tthis.keyCnt[key].cnt=(this.keyCnt[key].cnt)+1;\n\tif (this.keyCnt[key].type  === \"num\" && isNaN(val)) {\n\t    this.keyCnt[key].type=\"nan\";\n\t    this.keyCnt[key].order=this.casc;\n\t}\n    };\n    this.postProcess=function(state) { // update meta-data\n\tvar keys=Object.keys(state.Database.keyCnt);\n\tvar lenk=keys.length;\n\tfor (var ii=0;ii<lenk;ii++) {\n\t    var key=keys[ii];\n\t    // make list of values in Database for each key\n\t    state.Database.values[key]=[];\n\t    var sql=\"select DISTINCT \"+key+\" AS \"+key+\" FROM alarm\";\n\t    var dd0=alasql(sql);\n\t    var lend=dd0.length;\n\t    for (var jj=0;jj<lend;jj++) {\n\t\tvar doc=dd0[jj];\n\t\tstate.Database.values[key].push(doc[key]);\n\t    };\n\t};\n    };\n    this.extractData=function(state,data,parent,key,raw) { // insert records into db (recursive)\n\tvar rcnt=0;\n\tvar kk,kii,child,dkey;\n\t//console.log(\"Processing {\",state.Utils.toString(parent),\"} '\",key,\"' (\",state.Utils.toString(raw),\")\");\n\tvar wii=this.whatIsIt(raw);\n\tif (wii  === \"Object\" && key  === \"\") {\n\t    //console.log(\"Found object (\",state.Utils.toString(parent),\")\");\n\t    child=state.Utils.cp(parent);\n\t    // loop over plain values first\n\t    for (kk in raw) {\n\t\tkii=this.whatIsIt(raw[kk]);\n\t\tif (kii  === \"value\") {\n\t\t    child[kk]=raw[kk];\n\t\t}\n\t    }\n\t    // loop over sub-objects\n\t    var nn=0;\n\t    for (kk in raw) {\n\t\tkii=this.whatIsIt(raw[kk]);\n\t\tif (kii !== \"value\") {\n\t\t    nn=nn+1;\n\t\t    rcnt=rcnt+this.extractData(state,data,child,kk,raw[kk]);\n\t\t}\n\t    }\n\t    if (nn  === 0) { // insert \n\t\t//console.log(\"Object was empty.\");\n\t\trcnt=rcnt+this.extractData(state,data,child,null,null);\n\t    }\n\t} else if (wii  === \"Object\" && key !== \"\") {\n\t    //console.log(\"Found object key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n\t    child=state.Utils.cp(parent);\n\t    // loop over plain values first\n\t    for (kk in raw) {\n\t\tchild[key]=kk;\n\t\trcnt=rcnt+this.extractData(state,data,child,\"\",raw[kk]);\n\t    }\n\t} else if (wii  === \"Array\") {\n\t    //console.log(\"Found array key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n\t    var dlen = raw.length;\n\t    for (var ii = 0; ii < dlen; ii++) {\n\t\trcnt=rcnt+this.extractData(state,data,parent,key,raw[ii]);\n\t    }\n\t} else {\n\t    //console.log(\"Found key '\",key,\"' \",wii,\" (\",state.Utils.toString(parent),\")\");\n\t    var doc=state.Utils.cp(parent);\n\t    if (raw !== null) {\n\t\tif (key  === \"\") {\n\t\t    doc.value=raw;\n\t\t} else {\n\t\t    doc[key]=raw;\n\t\t}\n\t    }\n\t    //console.log(\"Updating internal raw structure\",JSON.stringify(setup));\n\t    for (dkey in doc) {\n\t\tvar val=doc[dkey];\n\t\tthis.updateKeyCnt(state,dkey,val);\n\t\t//// this takes too much time...\n\t\t//if (this.values[dkey]  === undefined) {\n\t\t//\tthis.values[dkey]=[];\n\t\t//  };\n\t\t////console.log(\"Setup:\",JSON.stringify(setup));\n\t\t////console.log(\"Key:\",key,JSON.stringify(this.values));\n    \t\t//if (this.values[dkey].indexOf(val)  === -1 ) { // value not in range\n\t\t//    this.values[dkey].push(val); // add value to range\n\t\t//};\n\t    };\n\t    //console.log(\">>> Inserting:\",state.Utils.toString(doc));\n\t    rcnt=rcnt+1;\n\t    this.cnt=this.cnt+1;\n\t    //if (this.cnt < 10) { // debug purposes\n\t    state.Threshold.setGThr(state,doc);\n\t    doc.lev=state.Threshold.getLevel(state,doc);\n\t    doc.lat=state.Threshold.getLat(state,doc);\n\t    doc.lon=state.Threshold.getLon(state,doc);\n\t    this.updateKeyCnt(state,\"lon\",doc.lon);\n\t    this.updateKeyCnt(state,\"lat\",doc.lat);\n\t    data.push(doc);\n\t}\n\treturn rcnt;\n    };\n    this.dbextract=function(state,showFunc) { // extract data from db and show\n\t// extract data from db and insert into data-array\n\t// var parent={};//{test:{$exists:false}};\n\tvar docs;\n\tvar where = this.getWhere(state);\n\tvar docs0=this.getCntDocs(state,where);\n\n\tconsole.log(\"Where:\",where,JSON.stringify(docs0));\n\n\n\tvar nrec= docs0[0].cnt;\n\tvar m={};\n\tstate.Matrix.cnt=nrec;\n\tif (nrec > state.Matrix.popSeries) { // only use counts...\n\t    state.Matrix.initKeyCnt(state);\n\t    state.Matrix.mapKeyCnt(state,where,nrec,state.Path.keys.other);\n\t    state.Matrix.mapKeyCnt(state,where,nrec,state.Path.trash);\n\t    //console.log(\"Setup:\",\n\t    //\t    JSON.stringify(state.Matrix.values),\n\t    //\t    JSON.stringify(state.Matrix.keyCnt));\n\t    state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\t    state.Matrix.sortMatrixValues(state);\n\t    docs=this.getCntDocs(state,where,state.Path.other.table);\n\t    //console.log(\"Count:\",sql,JSON.stringify(docs));\n\t    // add \"undefined\" range of keys that are not present in every doc...\n\t    state.Matrix.makeMatrixCnt(state,docs,m);\n\t} else {\n\t    //console.log(\"Database where:\",where);\n\t    docs=this.getDocs(state,where); // get all docs\n\t    //console.log(\">>>Extraction key (where='\",where,\"') Docs:\",docs.length);\n\t    state.Matrix.initKeyCnt(state);\n\t    state.Matrix.mapKeys(state,docs);\n\t    state.Matrix.addMapKeys(state,docs);\n\t    //console.log(\"Setup=\",JSON.stringify(setup));\n\t    //console.log (\"Maprange:\",JSON.stringify(state.Matrix.values));\n\t    // subset contains the keys being displayed in matrix...\n\t    state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\t    state.Matrix.sortMatrixValues(state);\n\t    // make matrix\n\t    state.Matrix.makeMatrix(state,docs,m);\n\t    //console.log (\"Matrix:\",JSON.stringify(m));\n\t}\n\tshowFunc(state,m);\n    };\n    this.dbindex=function(state,ks) { // make indexes on all keys\n\tvar s=\"\";\n\tvar klen = ks.length;\n\tfor (var ii = 0; ii < klen; ii++) {\n\t    //alasql(\"CREATE INDEX ? ON TABLE alarm.?\",ks[ii],ks[ii]);\n\t    s=s+\" \"+ks[ii];\n\t};\n\t//console.log(\"Indexes:\",s);\n    };\n    this.getWhereDetail=function(key,val) {\n\tif (val  === undefined ||\n\t    val  === null ||\n\t    val  === \"\") {\n\t    return key +' is NULL';\n\t} else {\n\t    return key + '=\"'+val+'\"'\n\t};\n    };\n    this.getWhere=function(state) {\n\tvar where=\"\";\n\t//console.log(\"Path:\",JSON.stringify(state.Path.keys));\n\tif (state.Path.keys.path !== undefined) {\n\t    var plen = state.Path.keys.path.length;\n\t    for (var ii = 0; ii < plen; ii++) {\n\t\tvar key=state.Path.keys.path[ii];\n\t\tvar whereKey=state.Path.parseWhere(state,key)\n\t\tif (whereKey  === undefined ||\n\t\t    whereKey  === null ||\n\t\t    whereKey  === \"\" ) {\n\t\t    if (where !== \"\") { where = where +  ' AND ';};\n\t\t    where= where + key +' is NULL';\n\t\t} else {\n\t\t    if (where !== \"\") { where = where +  ' AND ';};\n\t\t    where=where + \"(\"+ whereKey+\")\";\n\t\t}\n\t    };\n\t    if (where !== \"\") {where=\" WHERE \"+where;}\n\t    //console.log(\"Where=|\"+where+\"|\")\n\t};\n\treturn where;\n    };\n    this.getColWhere=function(key,values,index,step) {\n\tvar clen=values.length;\n\tvar where=\"\";\n        for (var kk=index;kk<Math.min(clen,index+step);kk++) {\n\t    if (where !== \"\") {where=where + \" or \";}\n\t    where=where + this.getWhereDetail(key,values[kk]);\n        };               \n\treturn where;\n    };\n    this.getGroup=function(keys) {\n\tvar group=\"\";\n\tvar plen = keys.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=keys[ii];\n\t    if (group !== \"\") { group = group +  ',';};\n\t    group= group + key;\n\t};\n\tif (group !== \"\") {group=\" GROUP BY \"+group;}\n\treturn group;\n    };\n    this.getCols=function(keys) {\n\tvar cols=\"\";\n\tvar plen = keys.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=keys[ii];\n\t    cols= cols + key;\n\t    if (cols !== \"\") { cols = cols +  ',';};\n\t};\n\treturn cols;\n    };\n    this.getAll=function(state) {\n\tvar cols=\"\";\n\tvar plen = state.Path.keys.other.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=state.Path.keys.other[ii];\n\t    cols= cols + key;\n\t    if (cols !== \"\") { cols = cols +  ',';};\n\t};\n\treturn cols;\n    };\n    this.getCntDocs=function(state,where,keys) {\n\tvar sql,dd;\n\tvar body=\"count(*) AS cnt, max(lev) AS lev, max(lat) AS maxlat, min(lat) AS minlat, max(lon) AS maxlon, min(lon) AS minlon FROM alarm\";\n\tif (keys  === undefined) {\n\t    sql=\"select \"+body+where;\n\t    //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\t    dd=alasql(sql);\n\t    //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n\t    //console.log(\"Cnt:\",JSON.stringify(dd));\n\t    return dd;\n\t} else {\n\t    var cols = this.getCols(keys);\n\t    var group = this.getGroup(keys);\n\t    sql=\"select \"+cols+body+\n    \t\twhere+group;\n\t    dd=alasql(sql);\n\t    //console.log(\"Cnt:\",JSON.stringify(dd));\n\t    return dd\n\t}\n    };\n    this.getDocs=function(state,where) {\n\tvar dd;\n\tdd=alasql(\"select * FROM alarm\"+where);\n\treturn dd;\n    };\n    this.makeTable=function(state) {\n\talasql('DROP TABLE IF EXISTS alarm; CREATE TABLE alarm;');\n    };\n    this.dataToDb=function(state,data) {\n\talasql.tables.alarm.data = data;\n    };\n    this.getKeyCnt=function(state,key,where){\n\tvar sql=\"select \"+key+\",count(*) AS cnt FROM alarm\"+\n\t    where+\" GROUP BY \"+key;\n\treturn alasql(sql);\n    };\n    this.whatIsIt=function(object) { // determine object type\n\tif (object  === null) {\n\t    return \"null\";\n\t} else if (object.constructor  === this.arrayConstructor) {\n\t    return \"Array\";\n\t}\n\telse if (object.constructor  === this.objectConstructor) {\n\t    return \"Object\";\n\t}\n\telse {\n\t    return \"value\";\n\t}\n    };\n    this.getTimeDiff=function(state,dt) {\n\tvar s=\"\";\n\tif (dt  === undefined || isNaN(state,dt)) {return s;};\n\tvar msec=Math.abs(state,dt);\n\tvar dd = Math.floor(state,((state,(msec / 1000) / 60) / 60) / 24);\n\tmsec -= dd * 1000 * 60 * 60 * 24;\n\tvar hh = Math.floor(state,((state,msec / 1000) / 60) / 60);\n\tmsec -= hh * 1000 * 60 * 60;\n\tvar mm = Math.floor(state,(msec / 1000) / 60);\n\tmsec -= mm * 1000 * 60;\n\tvar ss = Math.floor(state,msec / 1000);\n\tmsec -= ss * 1000;\n\tif (dt<0) {\n\t    s=\"-\";\n\t} else if (dt > 0) {\n\t    s=\"+\";\n\t} else {\n\t    s=\"0\";\n\t}\n\tif (dd !== 0) s=s+\" \"+state.Utils.numberWithCommas(dd)+\"d\";\n\tif (hh !== 0) s=s+\" \"+hh+\"h\";\n\tif (mm !== 0) s=s+\" \"+mm+\"m\";\n\t//if (ss !== 0) s=s+\" \"+ss+\"s\";\n\treturn s;\n    }\n};\n\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}