{"ast":null,"code":"import _classCallCheck from\"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _possibleConstructorReturn from\"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";import _getPrototypeOf from\"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";import _assertThisInitialized from\"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";import _inherits from\"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import React,{Component}from\"react\";import{withStyles}from'@material-ui/core/styles';import{teal_palette}from'../mui/metMuiThemes';import Paper from'@material-ui/core/Paper';import Grid from'@material-ui/core/Grid';import{Map as LeafletMap,GeoJSON,TileLayer,Marker,Popup}from'react-leaflet';import worldGeoJSON from'geojson-world-map';import divIcon from'leaflet';//\tbackground:'lightblue'\n//\tbackground:'red'\nvar styles=function styles(theme){return{content:{},paper:{height:'100%',overflow:'hidden',tableLayout:'fixed',padding:0,margin:0},root:{height:'100%',padding:0,margin:0,border:'5px solid red'},map:{overflow:'hidden',height:'100%'},divHdrLeft:{display:'inline-block',justifyContent:'left',cursor:\"pointer\"},divHdrRight:{display:'inline-block',justifyContent:'right',cursor:\"pointer\"},divTable:{display:'table',width:'100%'},divTableRow:{backgroundColor:teal_palette.main,border:'0px solid #999999',display:'table-row',padding:'0px'},divTableCell:{border:'0px solid #999999',display:'table-cell',padding:'0px'},divTableCellCursor:{cursor:\"pointer\",border:'0px solid #999999',display:'table-cell',padding:'0px'},divTableHead:{border:'0px',display:'table-cell',padding:'0px'},divTableHeading:{display:'table-header-group'},divTableHeadingCenter:{display:'flex',justifyContent:'center'},divTableFoot:{backgroundColor:'#DDD',display:'table-footer-group',fontWeight:'bold'},divTableBody:{display:'table-row-group'},paperImage:{textAlign:'center',padding:theme.spacing.unit*2}};};var GeoJsonMap=/*#__PURE__*/function(_Component){_inherits(GeoJsonMap,_Component);function GeoJsonMap(props){var _this;_classCallCheck(this,GeoJsonMap);_this=_possibleConstructorReturn(this,_getPrototypeOf(GeoJsonMap).call(this,props));_this.updateWindowDimensions=function(){_this.width=window.innerWidth;_this.height=window.innerHeight;_this.bbx=_this.el.getBoundingClientRect();//console.log(\"Width/Height:\",this.width,this.height,this.bbx.width,this.bbx.height)\n};var state=props.state;state.React.Map=_assertThisInitialized(_this);_this.bbx={height:0,width:0};return _this;}_createClass(GeoJsonMap,[{key:\"handleClick\",value:function handleClick(){this.refs.map.leafletElement.locate();}},{key:\"componentDidMount\",value:function componentDidMount(){window.addEventListener(\"resize\",this.updateWindowDimensions);}},{key:\"element\",value:function element(el){if(el!==undefined&&el!==null){this.el=el;this.bbx=this.el.getBoundingClientRect();console.log(\"BBX width/height:\",this.bbx.width,this.bbx.height);};}},{key:\"render\",value:function render(){var _this2=this;var _this$props=this.props,classes=_this$props.classes,state=_this$props.state;return React.createElement(\"div\",{ref:function ref(el){_this2.element(el);},className:classes.content,style:{position:'fixed',width:'90%',height:'calc(95% - 160px)',overflow:'hidden'}},React.createElement(LeafletMap,{className:classes.map,center:[60,10],zoom:3,maxZoom:10,attributionControl:true,zoomControl:false,doubleClickZoom:true,scrollWheelZoom:true,dragging:true,animate:true,easeLinearity:0.35},React.createElement(GeoJSON,{data:worldGeoJSON,style:function style(){return{color:'#4a83ec',weight:0.5,fillColor:\"#1a1d62\",fillOpacity:1,zIndex:1};}}),React.createElement(\"divIcon\",{position:{lat:60,lng:10},style:{zIndex:'100'}},\"test\")));}}]);return GeoJsonMap;}(Component);export default withStyles(styles)(GeoJsonMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapComponent.js"],"names":["React","Component","withStyles","teal_palette","Paper","Grid","Map","LeafletMap","GeoJSON","TileLayer","Marker","Popup","worldGeoJSON","divIcon","styles","theme","content","paper","height","overflow","tableLayout","padding","margin","root","border","map","divHdrLeft","display","justifyContent","cursor","divHdrRight","divTable","width","divTableRow","backgroundColor","main","divTableCell","divTableCellCursor","divTableHead","divTableHeading","divTableHeadingCenter","divTableFoot","fontWeight","divTableBody","paperImage","textAlign","spacing","unit","GeoJsonMap","props","updateWindowDimensions","window","innerWidth","innerHeight","bbx","el","getBoundingClientRect","state","refs","leafletElement","locate","addEventListener","undefined","console","log","classes","element","position","color","weight","fillColor","fillOpacity","zIndex","lat","lng"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport { Map as LeafletMap, GeoJSON, TileLayer, Marker, Popup } from 'react-leaflet';\nimport worldGeoJSON from 'geojson-world-map';\nimport divIcon from 'leaflet';\n\n//\tbackground:'lightblue'\n//\tbackground:'red'\n\nconst styles = theme => ({\n    content: {},\n    paper: {\n\theight: '100%',\n\toverflow: 'hidden',\n\ttableLayout: 'fixed',\n\tpadding:0,\n\tmargin:0,\n    },\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '5px solid red'\n    },\n    map: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n    divHdrLeft : {\n\tdisplay: 'inline-block',\n\tjustifyContent: 'left',\n\tcursor: \"pointer\",\n    },\n    divHdrRight : {\n\tdisplay: 'inline-block',\n\tjustifyContent: 'right',\n\tcursor: \"pointer\",\n    },\n    divTable :{\n\tdisplay: 'table',\n\twidth: '100%',\n    },\n    divTableRow:  {\n\tbackgroundColor:teal_palette.main,\n\tborder: '0px solid #999999',\n\tdisplay: 'table-row',\n\tpadding: '0px',\n    },\n    divTableCell:{\n\tborder: '0px solid #999999',\n\tdisplay: 'table-cell',\n\tpadding: '0px',\n    },\n    divTableCellCursor:{\n\tcursor: \"pointer\",\n\tborder: '0px solid #999999',\n\tdisplay: 'table-cell',\n\tpadding: '0px',\n    },\n    divTableHead : {\n\tborder: '0px',\n\tdisplay: 'table-cell',\n\tpadding: '0px',\n    },\n    divTableHeading : {\n\tdisplay: 'table-header-group',\n    },\n    divTableHeadingCenter : {\n\tdisplay: 'flex',\n\tjustifyContent: 'center',\n    },\n    divTableFoot : {\n\tbackgroundColor: '#DDD',\n\tdisplay: 'table-footer-group',\n\tfontWeight: 'bold',\n    },\n    divTableBody : {\n\tdisplay: 'table-row-group',\n    },\n    paperImage: {\n        textAlign: 'center',\n        padding: theme.spacing.unit * 2,\n    }\n});\n\n\nclass GeoJsonMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state} = props;\n\tstate.React.Map=this;\n\tthis.bbx={height:0,width:0};\n    };    \n    handleClick() {\n\tthis.refs.map.leafletElement.locate();\n    }\n    componentDidMount() {\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    } \n    updateWindowDimensions = () => {\n        this.width= window.innerWidth;\n\tthis.height=window.innerHeight;\n\tthis.bbx=this.el.getBoundingClientRect();\n\t//console.log(\"Width/Height:\",this.width,this.height,this.bbx.width,this.bbx.height)\n    };\n    element(el) {\n\tif (el !== undefined && el !== null) {\n\t    this.el=el;\n\t    this.bbx=this.el.getBoundingClientRect();\n\t    console.log(\"BBX width/height:\",this.bbx.width,this.bbx.height);\n\t};\n    };\n  render() {\n      const { classes, state } = this.props;\n      return (<div ref={el=>{this.element(el)}}\n\t         className={classes.content}\n\t         style={{position:'fixed', width: '90%', height: 'calc(95% - 160px)',overflow:'hidden'}} >\n\t         <LeafletMap className={classes.map}\n                    center={[60, 10]}\n                    zoom={3}\n                    maxZoom={10}\n                    attributionControl={true}\n                    zoomControl={false}\n                    doubleClickZoom={true}\n                    scrollWheelZoom={true}\n                    dragging={true}\n                    animate={true}\n                    easeLinearity={0.35} \n   \t         >\n                    <GeoJSON\n                       data={worldGeoJSON}\n                       style={() => ({\n\t\t \t   color: '#4a83ec',\n\t\t\t   weight: 0.5,\n\t\t\t   fillColor: \"#1a1d62\",\n\t\t\t   fillOpacity: 1,\n\t\t\t   zIndex: 1,\n\t\t       })}\n                    />\n\t\t    <divIcon position={{lat: 60,lng: 10}} style={{zIndex:'100'}}>\n\t\t       test\n\t\t    </divIcon>\n\t         </LeafletMap>\n\t      </div>\n\t     );\n  }\n}\n\nGeoJsonMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(GeoJsonMap);\n"]},"metadata":{},"sourceType":"module"}