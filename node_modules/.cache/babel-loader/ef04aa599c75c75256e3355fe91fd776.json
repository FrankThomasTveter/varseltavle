{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _get = function get(object, property, receiver) {\n  if (object === null) object = Function.prototype;\n  var desc = Object.getOwnPropertyDescriptor(object, property);\n\n  if (desc === undefined) {\n    var parent = Object.getPrototypeOf(object);\n\n    if (parent === null) {\n      return undefined;\n    } else {\n      return get(parent, property, receiver);\n    }\n  } else if (\"value\" in desc) {\n    return desc.value;\n  } else {\n    var getter = desc.get;\n\n    if (getter === undefined) {\n      return undefined;\n    }\n\n    return getter.call(receiver);\n  }\n};\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _reactDom = require('react-dom');\n\nvar _leaflet = require('leaflet');\n\nvar _reactLeaflet = require('react-leaflet');\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _objectWithoutProperties(obj, keys) {\n  var target = {};\n\n  for (var i in obj) {\n    if (keys.indexOf(i) >= 0) continue;\n    if (!Object.prototype.hasOwnProperty.call(obj, i)) continue;\n    target[i] = obj[i];\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nfunction createContextProvider(context) {\n  var ContextProvider = function (_Component) {\n    _inherits(ContextProvider, _Component);\n\n    function ContextProvider() {\n      _classCallCheck(this, ContextProvider);\n\n      return _possibleConstructorReturn(this, (ContextProvider.__proto__ || Object.getPrototypeOf(ContextProvider)).apply(this, arguments));\n    }\n\n    _createClass(ContextProvider, [{\n      key: 'getChildContext',\n      value: function getChildContext() {\n        return context;\n      }\n    }, {\n      key: 'render',\n      value: function render() {\n        return this.props.children;\n      }\n    }]);\n\n    return ContextProvider;\n  }(_react.Component);\n\n  ContextProvider.childContextTypes = {};\n  Object.keys(context).forEach(function (key) {\n    ContextProvider.childContextTypes[key] = _propTypes2.default.any;\n  });\n  return ContextProvider;\n}\n\nvar Divicon = function (_MapLayer) {\n  _inherits(Divicon, _MapLayer);\n\n  function Divicon() {\n    var _ref;\n\n    var _temp, _this2, _ret;\n\n    _classCallCheck(this, Divicon);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this2 = _possibleConstructorReturn(this, (_ref = Divicon.__proto__ || Object.getPrototypeOf(Divicon)).call.apply(_ref, [this].concat(args))), _this2), _this2.renderComponent = function () {\n      var ContextProvider = createContextProvider(_extends({}, _this2.context, _this2.getChildContext()));\n      var container = _this2.leafletElement._icon;\n\n      var component = _react2.default.createElement(ContextProvider, null, _this2.props.children);\n\n      if (container) {\n        (0, _reactDom.render)(component, container);\n      }\n    }, _temp), _possibleConstructorReturn(_this2, _ret);\n  }\n\n  _createClass(Divicon, [{\n    key: 'getChildContext',\n    value: function getChildContext() {\n      return {\n        popupContainer: this.leafletElement\n      };\n    } // See https://github.com/PaulLeCam/react-leaflet/issues/275\n\n  }, {\n    key: 'createLeafletElement',\n    value: function createLeafletElement(newProps) {\n      var _map = newProps.map,\n          _lc = newProps.layerContainer,\n          position = newProps.position,\n          props = _objectWithoutProperties(newProps, ['map', 'layerContainer', 'position']);\n\n      this.icon = new _leaflet.DivIcon(props);\n      return (0, _leaflet.marker)(position, _extends({\n        icon: this.icon\n      }, props));\n    }\n  }, {\n    key: 'updateLeafletElement',\n    value: function updateLeafletElement(fromProps, toProps) {\n      if (toProps.position !== fromProps.position) {\n        this.leafletElement.setLatLng(toProps.position);\n      }\n\n      if (toProps.zIndexOffset !== fromProps.zIndexOffset) {\n        this.leafletElement.setZIndexOffset(toProps.zIndexOffset);\n      }\n\n      if (toProps.opacity !== fromProps.opacity) {\n        this.leafletElement.setOpacity(toProps.opacity);\n      }\n\n      if (toProps.draggable !== fromProps.draggable) {\n        if (toProps.draggable) {\n          this.leafletElement.dragging.enable();\n        } else {\n          this.leafletElement.dragging.disable();\n        }\n      }\n    }\n  }, {\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      _get(Divicon.prototype.__proto__ || Object.getPrototypeOf(Divicon.prototype), 'componentWillMount', this).call(this);\n\n      this.leafletElement = this.createLeafletElement(this.props);\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      _get(Divicon.prototype.__proto__ || Object.getPrototypeOf(Divicon.prototype), 'componentDidMount', this).call(this);\n\n      this.renderComponent();\n    }\n  }, {\n    key: 'componentDidUpdate',\n    value: function componentDidUpdate(fromProps) {\n      this.renderComponent();\n      this.updateLeafletElement(fromProps, this.props);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      return null;\n    }\n  }]);\n\n  return Divicon;\n}(_reactLeaflet.MapLayer);\n\nDivicon.propTypes = {\n  opacity: _propTypes2.default.number,\n  zIndexOffset: _propTypes2.default.number\n};\nDivicon.childContextTypes = {\n  popupContainer: _propTypes2.default.object\n};\nexports.default = Divicon;","map":null,"metadata":{},"sourceType":"script"}