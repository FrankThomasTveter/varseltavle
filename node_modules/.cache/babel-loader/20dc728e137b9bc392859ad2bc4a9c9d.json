{"ast":null,"code":"import _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as THREE from 'three';\n\nvar TWEEN = require('es6-tween'); //import * as TWEEN from 'es6-tween';\n\n\nfunction random(scaleFactor) {\n  return Math.random() > 0.5 ? scaleFactor * Math.random() : -scaleFactor * Math.random();\n}\n\nvar MARKER_COLOR = '#ff0000';\nvar MARKER_LIGHT = '#ffcccc';\nvar MARKER_COMPANION_COLOR = '#ff7777';\nexport default function markerRenderer(marker) {\n  var sizex = (marker.colrange[1] - marker.colrange[0]) * 10;\n  var sizey = (marker.rowrange[1] - marker.rowrange[0]) * 10;\n  var size = Math.max(marker.value, 1); //  const geometry = new THREE.SphereGeometry(size, 10, 10);\n\n  var geometry = new THREE.BoxGeometry(sizex, sizey, size / 10); //  console.log(\"Marker:\",JSON.stringify(marker));\n\n  var material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(marker.bgcolor) //    color: new THREE.Color(MARKER_COLOR),\n\n  });\n  var mesh = new THREE.Mesh(geometry, material);\n  mesh.children = []; // add light\n  //  const light = new THREE.PointLight(MARKER_LIGHT, 1, 0, 0);\n  //  mesh.add(light);\n  // add companion markers based on size\n\n  var companions = [];\n\n  for (var i = 0; i < 1; i++) {\n    var companionGeometry = new THREE.SphereGeometry(Math.min(size * Math.random() / 2, 1), 10, 10);\n    var companionMaterial = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(MARKER_COMPANION_COLOR)\n    });\n    var companion = new THREE.Mesh(companionGeometry, companionMaterial);\n    companion.lookAt(new THREE.Vector3(0, 0, 0));\n    companions.push(companion);\n    mesh.add(companion);\n  }\n\n  companions.forEach(function (companion, i) {\n    function animate() {\n      var from = {\n        opacity: 0.1,\n        position: companion.position.clone().toArray(),\n        scale: Math.max(0.5, Math.random())\n      };\n      var to = {\n        opacity: 0.5,\n        position: [random(size * 3), random(size * 3), random(size)],\n        scale: 0.01\n      };\n      var tween = new TWEEN.Tween(from).to(to, 4000).easing(TWEEN.Easing.Quadratic.InOut).delay(i * 200);\n      tween.on('update', function () {\n        var _from$position = _slicedToArray(from.position, 3),\n            x = _from$position[0],\n            y = _from$position[1],\n            z = _from$position[2];\n\n        var companionMaterial = companion.material; //\n\n        var intensityChange = random(0.05); //if (\n        //light.intensity + intensityChange > 0 &&\n        //light.intensity + intensityChange < 1.5\n        //) {\n        //light.intensity += intensityChange;\n        //}\n\n        companionMaterial.opacity = from.opacity;\n        companion.scale.x = from.scale;\n        companion.scale.y = from.scale;\n        companion.scale.z = from.scale;\n        companion.position.set(x, y, z);\n      }).on('complete', animate).start();\n    }\n\n    animate();\n  });\n  return mesh;\n}","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/markerRenderer.ts"],"names":["THREE","TWEEN","require","random","scaleFactor","Math","MARKER_COLOR","MARKER_LIGHT","MARKER_COMPANION_COLOR","markerRenderer","marker","sizex","colrange","sizey","rowrange","size","max","value","geometry","BoxGeometry","material","MeshBasicMaterial","color","Color","bgcolor","mesh","Mesh","children","companions","i","companionGeometry","SphereGeometry","min","companionMaterial","companion","lookAt","Vector3","push","add","forEach","animate","from","opacity","position","clone","toArray","scale","to","tween","Tween","easing","Easing","Quadratic","InOut","delay","on","x","y","z","intensityChange","set","start"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { Marker } from 'react-globe';\n\nconst TWEEN = require('es6-tween');\n//import * as TWEEN from 'es6-tween';\n\n\nfunction random(scaleFactor: number): number {\n  return Math.random() > 0.5\n    ? scaleFactor * Math.random()\n    : -scaleFactor * Math.random();\n}\n\nconst MARKER_COLOR = '#ff0000';\nconst MARKER_LIGHT = '#ffcccc';\nconst MARKER_COMPANION_COLOR = '#ff7777';\n\nexport default function markerRenderer(marker: Marker): THREE.Object3D {\n  const sizex=(marker.colrange[1]-marker.colrange[0])*10;\n  const sizey=(marker.rowrange[1]-marker.rowrange[0])*10;\n  const size = Math.max(marker.value, 1);\n//  const geometry = new THREE.SphereGeometry(size, 10, 10);\n  const geometry = new THREE.BoxGeometry(sizex,sizey, size/10);\n  //  console.log(\"Marker:\",JSON.stringify(marker));\n  const material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(marker.bgcolor),\n//    color: new THREE.Color(MARKER_COLOR),\n  });\n\n  const mesh = new THREE.Mesh(geometry, material);\n  mesh.children = [];\n\n// add light\n//  const light = new THREE.PointLight(MARKER_LIGHT, 1, 0, 0);\n//  mesh.add(light);\n\n  // add companion markers based on size\n  const companions: THREE.Mesh[] = [];\n  for (let i = 0; i < 1; i++) {\n    const companionGeometry = new THREE.SphereGeometry(\n      Math.min((size * Math.random())/2, 1),\n      10,\n      10,\n    );\n    const companionMaterial = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(MARKER_COMPANION_COLOR),\n    });\n    const companion = new THREE.Mesh(companionGeometry, companionMaterial);\n    companion.lookAt(new THREE.Vector3(0, 0, 0));\n    companions.push(companion);\n    mesh.add(companion);\n  }\n\n  companions.forEach(\n    (companion, i: number): void => {\n      function animate(): void {\n        const from = {\n          opacity: 0.1,\n          position: companion.position.clone().toArray(),\n          scale: Math.max(0.5, Math.random()),\n        };\n        const to = {\n          opacity: 0.5,\n          position: [random(size * 3), random(size * 3), random(size)],\n          scale: 0.01,\n        };\n        const tween = new TWEEN.Tween(from)\n          .to(to, 4000)\n          .easing(TWEEN.Easing.Quadratic.InOut)\n          .delay(i * 200);\n        tween\n          .on(\n            'update',\n            (): void => {\n              const [x, y, z] = from.position;\n              const companionMaterial = companion.material as THREE.MeshBasicMaterial; //\n              const intensityChange = random(0.05);\n              //if (\n                //light.intensity + intensityChange > 0 &&\n                //light.intensity + intensityChange < 1.5\n              //) {\n                //light.intensity += intensityChange;\n              //}\n              companionMaterial.opacity = from.opacity;\n              companion.scale.x = from.scale;\n              companion.scale.y = from.scale;\n              companion.scale.z = from.scale;\n              companion.position.set(x, y, z);\n            },\n          )\n          .on('complete', animate)\n          .start();\n      }\n      animate();\n    },\n  );\n  return mesh;\n}\n"]},"metadata":{},"sourceType":"module"}