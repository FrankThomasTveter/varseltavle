{"ast":null,"code":"import _objectWithoutProperties from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/CanvasGraphComponent.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    canvas: {\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"hidden\"\n    },\n    pointer: {\n      cursor: \"pointer\"\n    },\n    nopointer: {},\n    div: {}\n  };\n};\n\nfunction drawThresholds(state, elements, colkey, colvalues, index, range, plan, level, ctx, height, dw, tot) {\n  //console.log(\"Canvas:\",cnv.width,cnv.height);\n  var step = plan.step;\n  var clen = 0;\n\n  if (colvalues !== undefined) {\n    clen = colvalues.length;\n  }\n\n  ; // number of columns\n\n  var elen = elements.length;\n  var blev = -1;\n  var ee;\n  var cnt = 0;\n\n  for (ee = 0; ee < elen; ee++) {\n    // loop over elements\n    var el = elements[ee];\n    var elevel = el.lev;\n    var color = state.Colors.getLevelColor(elevel);\n    blev = Math.max(blev, elevel);\n    var docs = el.docs;\n    var dlen = docs.length; //console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n    //console.log(\"Element:\",elevel,color,tot,cnt);\n\n    if (dlen > 0) {\n      for (var jj = 0; jj < dlen; jj++) {\n        // loop over segments in each element\n        cnt = cnt + 1;\n        var d = docs[jj];\n        state.Threshold.setGThr(state, d); //var lev=state.Threshold.getLevel(state,d);\n        //var col=state.Colors.getLevelColor(lev);\n        //console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n\n        for (var ii = index; ii < Math.min(index + step, clen); ii++) {\n          //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n          //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n          if (colvalues[ii] === \"\" || d[colkey] === colvalues[ii]) {\n            var t = state.Threshold.getThresholds(d); //console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n            //\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n            //console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\n            var min = range[0];\n            var max = range[1];\n            var mm = ii - index;\n\n            if (step < tot) {\n              mm = cnt - 1;\n            } //console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\n\n            var xmin = mm * dw; // width/10;\n\n            var xmax = (mm + 1) * dw; //width-xmin;\n\n            if (color !== undefined) {\n              for (var msr in t) {\n                var tt = t[msr];\n                var tmax = tt[state.Threshold.imax];\n                var tthr = tt[state.Threshold.ithr];\n                var tkey = tt[state.Threshold.ikey]; //var tlev  = tt[state.Threshold.ilev];\n                //var tval  = tt[state.Threshold.ival];\n\n                var ts;\n\n                if (tmax) {\n                  ts = state.Threshold.thrs[tthr][tkey].max;\n                } else {\n                  ts = state.Threshold.thrs[tthr][tkey].min;\n                }\n\n                ;\n                var tlen = ts.length;\n\n                for (var ll = 0; ll < tlen; ll++) {\n                  var tyval = ts[ll];\n                  var tzval = state.Show.scale(tyval, min, max, height, 0);\n                  var scolor = undefined;\n\n                  if (ll === level) {\n                    scolor = 'black';\n                  } else {\n                    scolor = state.Colors.getLevelColor(ll);\n                  }\n\n                  ;\n                  ctx.beginPath();\n                  ctx.lineWidth = 1;\n\n                  if (scolor !== undefined) {\n                    ctx.strokeStyle = scolor;\n                  }\n\n                  ctx.moveTo(xmin, tzval);\n                  ctx.lineTo(xmax, tzval);\n                  ctx.stroke(); //console.log(\"Stroke color:\",scolor,ll,tzval,cnv.width);\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ;\n  return blev;\n}\n\n;\n\nfunction drawData(state, elements, colkey, colvalues, index, range, plan, level, ctx, height, dw, tot) {\n  //console.log(\"Canvas:\",cnv.width,cnv.height);\n  var step = plan.step;\n  var clen = 0;\n\n  if (colvalues !== undefined) {\n    clen = colvalues.length;\n  }\n\n  ; // number of columns\n\n  var elen = elements.length;\n  var blev = -1;\n  var ee;\n  var cnt = 0;\n\n  for (ee = 0; ee < elen; ee++) {\n    // loop over elements\n    var el = elements[ee];\n    var elevel = el.lev;\n    var color = state.Colors.getLevelColor(elevel);\n    blev = Math.max(blev, elevel);\n    var docs = el.docs;\n    var dlen = docs.length; //console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n    //console.log(\"Element:\",elevel,color,tot,cnt,dlen);\n\n    if (dlen > 0) {\n      for (var jj = 0; jj < dlen; jj++) {\n        // loop over segments in each element\n        cnt = cnt + 1;\n        var d = docs[jj];\n        state.Threshold.setGThr(state, d);\n        var lev = state.Threshold.getLevel(state, d);\n        var col = state.Colors.getLevelColor(lev); //console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n        //console.log(\"   Doc:\",JSON.stringify(colkey),JSON.stringify(colvalues),clen,index); // \n\n        for (var ii = index; ii < Math.min(index + step, clen); ii++) {\n          //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n          //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n          if (colvalues[ii] === \"\" || d[colkey] === colvalues[ii]) {\n            var t = state.Threshold.getThresholds(d); //console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n            //\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n            //console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\n            var min = range[0];\n            var max = range[1];\n            var ymin = min;\n\n            if (t.min !== undefined && t.min[state.Threshold.ival] !== undefined) {\n              ymin = t.min[state.Threshold.ival];\n            }\n\n            var ymax = max;\n\n            if (t.max !== undefined && t.max[state.Threshold.ival] !== undefined) {\n              ymax = t.max[state.Threshold.ival];\n            }\n\n            var mm = ii - index;\n\n            if (step < tot) {\n              mm = cnt - 1;\n            } //console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\n\n            var xmin = mm * dw; // width/10;\n\n            var xmax = (mm + 1) * dw; // width-2*xmin;\n\n            var zmin = state.Show.scale(ymin, min, max, height, 0);\n            var zmax = state.Show.scale(ymax, min, max, height, 0); //console.log(\"Fill:\",xmin,xmax,zmin,zmax,ymin,ymax,min,max,height);\n            //console.log(\"Fill:\",xmin,xmax,zmin,(zmax-zmin),height,color);\n            //ctx.fillStyle=\"cornflowerblue\";\n\n            color = col;\n\n            if (color !== undefined) {\n              var dx = Math.max(1, xmax - xmin);\n              var dz = zmax - zmin; //if (Math.abs(dz)/height < 0.5) {\n              //ctx.fillStyle=\"black\";\n              //ctx.fillRect(xmin,zmin,dx,dz);\n              //} else {\n\n              ctx.strokeStyle = 'black';\n              ctx.strokeRect(xmin, zmin, dx, dz); //}\n              //\n              //console.log(\"rect:\",lev,xmin,xmax,zmin,zmax);\n              //\n            }\n\n            ;\n          }\n        }\n      }\n    }\n  }\n\n  ;\n  return blev;\n}\n\n;\n\nfunction updateCanvas(item) {\n  var _item$props = item.props,\n      state = _item$props.state,\n      elements = _item$props.elements,\n      colkey = _item$props.colkey,\n      colvalues = _item$props.colvalues,\n      index = _item$props.index,\n      range = _item$props.range,\n      plan = _item$props.plan,\n      level = _item$props.level;\n  var cnv = item.refs.canvas; // canvas\n\n  var ctx = cnv.getContext('2d'); // context\n  //console.log(\"Canvas:\",cnv.width,cnv.height);\n\n  var step = plan.step;\n  var height = cnv.height;\n  var elen = elements.length;\n  var tot = 0;\n\n  for (var ee = 0; ee < elen; ee++) {\n    tot = tot + elements[ee].docs.length;\n  }\n\n  ; // total number of segments\n\n  var dw = cnv.width / Math.max(step, tot); // width of graph segment\n\n  ctx.clearRect(0, 0, cnv.width, cnv.height);\n  drawThresholds(state, elements, colkey, colvalues, index, range, plan, level, ctx, height, dw, tot);\n  drawData(state, elements, colkey, colvalues, index, range, plan, level, ctx, height, dw, tot);\n}\n\n;\n\nvar CanvasGraphComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CanvasGraphComponent, _React$Component);\n\n  function CanvasGraphComponent() {\n    _classCallCheck(this, CanvasGraphComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CanvasGraphComponent).apply(this, arguments));\n  }\n\n  _createClass(CanvasGraphComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          onclick = _this$props.onclick,\n          title = _this$props.title,\n          plan = _this$props.plan,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"onclick\", \"title\", \"plan\"]);\n\n      return React.createElement(\"canvas\", Object.assign({}, other, {\n        className: classes.canvas,\n        classes: classes,\n        onClick: onclick,\n        title: title,\n        plan: plan,\n        width: plan.width,\n        height: plan.height,\n        ref: \"canvas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 199\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CanvasGraphComponent;\n}(React.Component); // width={plan.width} height={plan.height}\n\n\nCanvasGraphComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CanvasGraphComponent);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/CanvasGraphComponent.js"],"names":["React","PropTypes","withStyles","styles","theme","canvas","width","height","overflow","pointer","cursor","nopointer","div","drawThresholds","state","elements","colkey","colvalues","index","range","plan","level","ctx","dw","tot","step","clen","undefined","length","elen","blev","ee","cnt","el","elevel","lev","color","Colors","getLevelColor","Math","max","docs","dlen","jj","d","Threshold","setGThr","ii","min","t","getThresholds","mm","xmin","xmax","msr","tt","tmax","imax","tthr","ithr","tkey","ikey","ts","thrs","tlen","ll","tyval","tzval","Show","scale","scolor","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","drawData","getLevel","col","ymin","ival","ymax","zmin","zmax","dx","dz","strokeRect","updateCanvas","item","props","cnv","refs","getContext","clearRect","CanvasGraphComponent","classes","onclick","title","other","Component","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    canvas: {\n\twidth:\"100%\",\n\theight:\"100%\",\n\toverflow:\"hidden\",\n    },\n    pointer: {\n\tcursor:\"pointer\"\n    },\n    nopointer: {\n    },\n    div :{},\n});\nfunction drawThresholds(state,elements,colkey,colvalues,index,range,plan,level,ctx,height,dw,tot) {\n    //console.log(\"Canvas:\",cnv.width,cnv.height);\n    const step=plan.step;\n    var clen=0; if (colvalues !== undefined) {clen=colvalues.length;}; // number of columns\n    var elen=elements.length;\n    var blev=-1;\n    var ee;\n    var cnt=0;\n    for (ee=0;ee<elen;ee++) {   // loop over elements\n\tvar el=elements[ee];\n\tvar elevel=el.lev;\n\tvar color=state.Colors.getLevelColor(elevel);\n\tblev=Math.max(blev,elevel);\n\tvar docs=el.docs;\n\tvar dlen=docs.length;\n\t//console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n\t//console.log(\"Element:\",elevel,color,tot,cnt);\n\tif (dlen>0) {\n\t    for (var jj=0;jj<dlen;jj++) {   // loop over segments in each element\n\t\tcnt=cnt+1;\n\t\tvar d=docs[jj];\n\t\tstate.Threshold.setGThr(state,d);\n\t\t//var lev=state.Threshold.getLevel(state,d);\n\t\t//var col=state.Colors.getLevelColor(lev);\n\t\t//console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n\t\tfor (var ii=index;ii<Math.min(index+step,clen);ii++) {\n\t\t    //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n\t\t    //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n\t\t    if (colvalues[ii]===\"\" || d[colkey]  === colvalues[ii]) {\n\t\t\tvar t=state.Threshold.getThresholds(d);\n\t\t\t//console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n\t\t\t//\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n\t\t\t//console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\t\t\tvar min=range[0]\n\t\t\tvar max=range[1];\n\t\t\tvar mm=ii-index\n\t\t\tif (step<tot) {mm=cnt-1;}\n\t\t\t//console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\t\t\tvar xmin=mm*dw;       // width/10;\n\t\t\tvar xmax=(mm+1)*dw;   //width-xmin;\n\t\t\tif (color !== undefined) {\n\t\t\t    for (var msr in t) {\n\t\t\t\tvar tt    = t[msr];\n\t\t\t\tvar tmax  = tt[state.Threshold.imax];\n\t\t\t\tvar tthr  = tt[state.Threshold.ithr];\n\t\t\t\tvar tkey  = tt[state.Threshold.ikey];\n\t\t\t\t//var tlev  = tt[state.Threshold.ilev];\n\t\t\t\t//var tval  = tt[state.Threshold.ival];\n\t\t\t\tvar ts;\n\t\t\t\tif (tmax) {\n\t\t\t\t    ts=state.Threshold.thrs[tthr][tkey].max;\n\t\t\t\t} else {\n\t\t\t\t    ts=state.Threshold.thrs[tthr][tkey].min;\n\t\t\t\t};\n\t\t\t\tvar tlen=ts.length;\n\t\t\t\tfor (var ll=0;ll<tlen;ll++) {\n\t\t\t\t    var tyval=ts[ll];\n\t\t\t\t    var tzval=state.Show.scale(tyval,min,max,height,0);\n\t\t\t\t    var scolor=undefined;\n\t\t\t\t    if (ll === level) {\n\t\t\t\t\tscolor='black';\n\t\t\t\t    } else {\n\t\t\t\t\tscolor=state.Colors.getLevelColor(ll);\n\t\t\t\t    };\n\t\t\t\t    ctx.beginPath();\n\t\t\t\t    ctx.lineWidth=1;\n\t\t\t\t    if (scolor !== undefined) {ctx.strokeStyle=scolor;}\n\t\t\t\t    ctx.moveTo(xmin,tzval);\n\t\t\t\t    ctx.lineTo(xmax,tzval);\n\t\t\t\t    ctx.stroke();\n\t\t\t\t    //console.log(\"Stroke color:\",scolor,ll,tzval,cnv.width);\n\t\t\t\t}\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n    };\n    return blev;\n};\nfunction drawData(state,elements,colkey,colvalues,index,range,plan,level,ctx,height,dw,tot) {\n    //console.log(\"Canvas:\",cnv.width,cnv.height);\n    const step=plan.step;\n    var clen=0; if (colvalues !== undefined) {clen=colvalues.length;}; // number of columns\n    var elen=elements.length;\n    var blev=-1;\n    var ee;\n    var cnt=0;\n    for (ee=0;ee<elen;ee++) {   // loop over elements\n\tvar el=elements[ee];\n\tvar elevel=el.lev;\n\tvar color=state.Colors.getLevelColor(elevel);\n\tblev=Math.max(blev,elevel);\n\tvar docs=el.docs;\n\tvar dlen=docs.length;\n\t//console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n\t//console.log(\"Element:\",elevel,color,tot,cnt,dlen);\n\tif (dlen>0) {\n\t    for (var jj=0;jj<dlen;jj++) {   // loop over segments in each element\n\t\tcnt=cnt+1;\n\t\tvar d=docs[jj];\n\t\tstate.Threshold.setGThr(state,d);\n\t\tvar lev=state.Threshold.getLevel(state,d);\n\t\tvar col=state.Colors.getLevelColor(lev);\n\t\t//console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n\t\t//console.log(\"   Doc:\",JSON.stringify(colkey),JSON.stringify(colvalues),clen,index); // \n\t\tfor (var ii=index;ii<Math.min(index+step,clen);ii++) {\n\t\t    //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n\t\t    //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n\t\t    if (colvalues[ii]===\"\" || d[colkey]  === colvalues[ii]) {\n\t\t\tvar t=state.Threshold.getThresholds(d);\n\t\t\t//console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n\t\t\t//\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n\t\t\t//console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\t\t\tvar min=range[0]\n\t\t\tvar max=range[1];\n\t\t\tvar ymin=min;\n\t\t\tif (t.min !== undefined && t.min[state.Threshold.ival] !== undefined) {\n\t\t\t    ymin=t.min[state.Threshold.ival];\n\t\t\t}\n\t\t\tvar ymax=max;\n\t\t\tif (t.max !== undefined && t.max[state.Threshold.ival] !== undefined) {\n\t\t\t    ymax=t.max[state.Threshold.ival];\n\t\t\t}\n\t\t\tvar mm=ii-index\n\t\t\tif (step<tot) {mm=cnt-1;}\n\t\t\t//console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\t\t\tvar xmin=mm*dw;       // width/10;\n\t\t\tvar xmax=(mm+1)*dw;   // width-2*xmin;\n\t\t\tvar zmin=state.Show.scale(ymin,min,max,height,0);\n\t\t\tvar zmax=state.Show.scale(ymax,min,max,height,0);\n\t\t\t//console.log(\"Fill:\",xmin,xmax,zmin,zmax,ymin,ymax,min,max,height);\n\t\t\t//console.log(\"Fill:\",xmin,xmax,zmin,(zmax-zmin),height,color);\n\t\t\t//ctx.fillStyle=\"cornflowerblue\";\n\t\t\tcolor=col;\n\t\t\tif (color !== undefined) {\n\t\t\t    var dx=Math.max(1,xmax-xmin);\n\t\t\t    var dz=zmax-zmin;\n\t\t\t    //if (Math.abs(dz)/height < 0.5) {\n\t\t\t    //ctx.fillStyle=\"black\";\n\t\t\t    //ctx.fillRect(xmin,zmin,dx,dz);\n\t\t\t    //} else {\n\t\t\t    ctx.strokeStyle='black';\n\t\t\t    ctx.strokeRect(xmin,zmin,dx,dz);\n\t\t\t    //}\n\t\t\t    //\n\t\t\t    //console.log(\"rect:\",lev,xmin,xmax,zmin,zmax);\n\t\t\t    //\n\t\t\t};\n\t\t    }\n\t\t}\n\t    }\n\t}\n    };\n    return blev;\n};\nfunction updateCanvas(item) {\n    const {state,elements,colkey,colvalues,index,range,plan,level} = item.props;\n    const cnv=item.refs.canvas;        // canvas\n    const ctx = cnv.getContext('2d');  // context\n    //console.log(\"Canvas:\",cnv.width,cnv.height);\n    const step=plan.step;\n    var height = cnv.height;\n    var elen=elements.length;\n    var tot=0; for (var ee=0;ee<elen;ee++) {tot=tot+elements[ee].docs.length;}; // total number of segments\n    var dw= cnv.width/Math.max(step,tot); // width of graph segment\n    ctx.clearRect(0, 0, cnv.width, cnv.height);\n    drawThresholds(state,elements,colkey,colvalues,index,range,plan,level,ctx,height,dw,tot);\n    drawData(state,elements,colkey,colvalues,index,range,plan,level,ctx,height,dw,tot);\n};\nclass CanvasGraphComponent extends React.Component {\n    componentDidMount() {\n        updateCanvas(this);\n    }\n    componentDidUpdate() {\n        updateCanvas(this);\n    }\n    render() {\n        const { classes, onclick, title, plan, ...other } = this.props;\n        return (\n\t\t<canvas {...other} className={classes.canvas} classes={classes} onClick={onclick} title={title} plan={plan} width={plan.width} height={plan.height} ref=\"canvas\"/>\n        );\n    }\n}\n\n// width={plan.width} height={plan.height}\n\nCanvasGraphComponent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CanvasGraphComponent);\n"]},"metadata":{},"sourceType":"module"}