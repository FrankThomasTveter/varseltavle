{"ast":null,"code":"import _toConsumableArray from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/MapTest.js\";\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { teal_palette } from '../mui/metMuiThemes';\nimport ReactGlobe from 'react-globe';\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\n\nvar styles = function styles(theme) {\n  return {\n    content: {},\n    root: {\n      height: '100%',\n      padding: 0,\n      margin: 0,\n      border: '5px solid red'\n    },\n    dataset: {\n      overflow: 'hidden',\n      height: '100%'\n    },\n    map: {\n      overflow: 'hidden',\n      height: '100%'\n    }\n  };\n};\n\nfunction EarthMap(props) {\n  var randomMarkers = defmarkers.map(function (marker) {\n    return _objectSpread({}, marker, {\n      tooltip: \"Random number: \".concat(Math.random().toFixed(3))\n    });\n  });\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      markers = _useState2[0],\n      setMarkers = _useState2[1];\n\n  return React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  }, React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setMarkers(randomMarkers);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39\n    },\n    __self: this\n  }, \"Randomize markers\"), React.createElement(\"button\", {\n    onClick: function onClick() {\n      return setMarkers([]);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42\n    },\n    __self: this\n  }, \"Clear markers\"), React.createElement(\"button\", {\n    disabled: markers.length === randomMarkers.length,\n    onClick: function onClick() {\n      return setMarkers([].concat(_toConsumableArray(markers), [randomMarkers[markers.length]]));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43\n    },\n    __self: this\n  }, \"Add marker\"), React.createElement(\"button\", {\n    disabled: markers.length === 0,\n    onClick: function onClick() {\n      return setMarkers(markers.slice(0, markers.length - 1));\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51\n    },\n    __self: this\n  }, \"Remove marker\"), React.createElement(ReactGlobe, {\n    markers: markers,\n    markerOptions: {\n      enableGlow: false,\n      getTooltipContent: function getTooltipContent(marker) {\n        return marker.tooltip;\n      },\n      radiusScaleRange: [0.02, 0.05]\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57\n    },\n    __self: this\n  }));\n}\n\nEarthMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EarthMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapTest.js"],"names":["React","Component","useState","useEffect","useRef","PropTypes","withStyles","teal_palette","ReactGlobe","defmarkers","markerRenderer","styles","theme","content","root","height","padding","margin","border","dataset","overflow","map","EarthMap","props","randomMarkers","marker","tooltip","Math","random","toFixed","markers","setMarkers","length","slice","enableGlow","getTooltipContent","radiusScaleRange","propTypes","classes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect, useRef} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport ReactGlobe from 'react-globe';\n\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\n\nconst styles = theme => ({\n    content: {},\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '5px solid red'\n    },\n    dataset: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n    map: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n});\n\n\nfunction EarthMap(props) {\n  const randomMarkers = defmarkers.map(marker => ({\n    ...marker,\n    tooltip: `Random number: ${Math.random().toFixed(3)}`,\n  }))\n  const [markers, setMarkers] = useState([])\n  return (\n    <div>\n      <button onClick={() => setMarkers(randomMarkers)}>\n        Randomize markers\n      </button>\n      <button onClick={() => setMarkers([])}>Clear markers</button>\n      <button\n        disabled={markers.length === randomMarkers.length}\n        onClick={() =>\n          setMarkers([...markers, randomMarkers[markers.length]])\n        }\n      >\n        Add marker\n      </button>\n      <button\n        disabled={markers.length === 0}\n        onClick={() => setMarkers(markers.slice(0, markers.length - 1))}\n      >\n        Remove marker\n      </button>\n      <ReactGlobe\n        markers={markers}\n        markerOptions={{\n          enableGlow: false,\n          getTooltipContent: marker => marker.tooltip,\n          radiusScaleRange: [0.02, 0.05],\n        }}\n      />\n    </div>\n  )\n}\nEarthMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EarthMap);\n"]},"metadata":{},"sourceType":"module"}