{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/MapComponent.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { teal_palette } from '../mui/metMuiThemes';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport { Map as LeafletMap, GeoJSON, TileLayer, Marker, Popup } from 'react-leaflet';\nimport worldGeoJSON from 'geojson-world-map';\nimport DivIcon from 'react-leaflet-div-icon'; //\tbackground:'lightblue'\n//\tbackground:'red'\n\nvar styles = function styles(theme) {\n  return {\n    content: {},\n    paper: {\n      height: '100%',\n      overflow: 'hidden',\n      tableLayout: 'fixed',\n      padding: 0,\n      margin: 0\n    },\n    root: {\n      height: '100%',\n      padding: 0,\n      margin: 0,\n      border: '5px solid red'\n    },\n    map: {\n      overflow: 'hidden',\n      height: '100%'\n    },\n    divHdrLeft: {\n      display: 'inline-block',\n      justifyContent: 'left',\n      cursor: \"pointer\"\n    },\n    divHdrRight: {\n      display: 'inline-block',\n      justifyContent: 'right',\n      cursor: \"pointer\"\n    },\n    divTable: {\n      display: 'table',\n      width: '100%'\n    },\n    divTableRow: {\n      backgroundColor: teal_palette.main,\n      border: '0px solid #999999',\n      display: 'table-row',\n      padding: '0px'\n    },\n    divTableCell: {\n      border: '0px solid #999999',\n      display: 'table-cell',\n      padding: '0px'\n    },\n    divTableCellCursor: {\n      cursor: \"pointer\",\n      border: '0px solid #999999',\n      display: 'table-cell',\n      padding: '0px'\n    },\n    divTableHead: {\n      border: '0px',\n      display: 'table-cell',\n      padding: '0px'\n    },\n    divTableHeading: {\n      display: 'table-header-group'\n    },\n    divTableHeadingCenter: {\n      display: 'flex',\n      justifyContent: 'center'\n    },\n    divTableFoot: {\n      backgroundColor: '#DDD',\n      display: 'table-footer-group',\n      fontWeight: 'bold'\n    },\n    divTableBody: {\n      display: 'table-row-group'\n    },\n    paperImage: {\n      textAlign: 'center',\n      padding: theme.spacing.unit * 2\n    }\n  };\n};\n\nvar GeoJsonMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(GeoJsonMap, _Component);\n\n  function GeoJsonMap(props) {\n    var _this;\n\n    _classCallCheck(this, GeoJsonMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GeoJsonMap).call(this, props));\n\n    _this.updateWindowDimensions = function () {\n      _this.width = window.innerWidth;\n      _this.height = window.innerHeight;\n      _this.bbx = _this.el.getBoundingClientRect(); //console.log(\"Width/Height:\",this.width,this.height,this.bbx.width,this.bbx.height)\n    };\n\n    var state = props.state;\n    state.React.Map = _assertThisInitialized(_this);\n    _this.bbx = {\n      height: 0,\n      width: 0\n    };\n    _this.state = {\n      hasLocation: true,\n      latlng: {\n        lat: 60,\n        lng: 10\n      }\n    };\n    return _this;\n  }\n\n  _createClass(GeoJsonMap, [{\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.refs.map.leafletElement.locate();\n    }\n  }, {\n    key: \"handleLocationFound\",\n    value: function handleLocationFound(e) {\n      this.setState({\n        hasLocation: true,\n        latlng: e.latlng\n      });\n    } //   componentDidMount() {\n    //       window.addEventListener(\"resize\", this.updateWindowDimensions);\n    //   } \n\n  }, {\n    key: \"element\",\n    value: function element(el) {\n      if (el !== undefined && el !== null) {\n        this.el = el;\n        this.bbx = this.el.getBoundingClientRect();\n        console.log(\"BBX width/height:\", this.bbx.width, this.bbx.height);\n      }\n\n      ;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state;\n      var marker = this.state.hasLocation ? React.createElement(DivIcon, {\n        position: this.state.latlng,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }) : null;\n      return React.createElement(\"div\", {\n        ref: function ref(el) {\n          _this2.element(el);\n        },\n        className: classes.content,\n        style: {\n          position: 'fixed',\n          width: '90%',\n          height: 'calc(95% - 160px)',\n          overflow: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142\n        },\n        __self: this\n      }, React.createElement(LeafletMap, {\n        className: classes.map,\n        center: [60, 10],\n        zoom: 3,\n        maxZoom: 10,\n        attributionControl: true,\n        zoomControl: false,\n        doubleClickZoom: true,\n        scrollWheelZoom: true,\n        dragging: true,\n        animate: true,\n        easeLinearity: 0.35,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 145\n        },\n        __self: this\n      }, React.createElement(GeoJSON, {\n        data: worldGeoJSON,\n        style: function style() {\n          return {\n            color: '#4a83ec',\n            weight: 0.5,\n            fillColor: \"#1a1d62\",\n            fillOpacity: 1,\n            zIndex: 1\n          };\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }), marker));\n    }\n  }]);\n\n  return GeoJsonMap;\n}(Component); //              <GeoJSON\n//                   data={worldGeoJSON}\n//                     style={() => ({\n//\t\t \t   color: '#4a83ec',\n//\t\t\t   weight: 0.5,\n//\t\t\t   fillColor: \"#1a1d62\",\n//\t\t\t   fillOpacity: 1,\n//\t\t       })}\n//                    />\n//              <Marker position={[50, 10]}>\n//              <Popup>\n//              Popup for any custom information.\n//              </Popup>\n//              </Marker>\n\n\nGeoJsonMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(GeoJsonMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapComponent.js"],"names":["React","Component","PropTypes","withStyles","teal_palette","Paper","Grid","Map","LeafletMap","GeoJSON","TileLayer","Marker","Popup","worldGeoJSON","DivIcon","styles","theme","content","paper","height","overflow","tableLayout","padding","margin","root","border","map","divHdrLeft","display","justifyContent","cursor","divHdrRight","divTable","width","divTableRow","backgroundColor","main","divTableCell","divTableCellCursor","divTableHead","divTableHeading","divTableHeadingCenter","divTableFoot","fontWeight","divTableBody","paperImage","textAlign","spacing","unit","GeoJsonMap","props","updateWindowDimensions","window","innerWidth","innerHeight","bbx","el","getBoundingClientRect","state","hasLocation","latlng","lat","lng","refs","leafletElement","locate","e","setState","undefined","console","log","classes","marker","element","position","color","weight","fillColor","fillOpacity","zIndex","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,SAAQC,YAAR,QAA2B,qBAA3B;AAEA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AAEA,SAASC,GAAG,IAAIC,UAAhB,EAA4BC,OAA5B,EAAqCC,SAArC,EAAgDC,MAAhD,EAAwDC,KAAxD,QAAqE,eAArE;AACA,OAAOC,YAAP,MAAyB,mBAAzB;AACA,OAAOC,OAAP,MAAoB,wBAApB,C,CAEA;AACA;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,OAAO,EAAE,EADY;AAErBC,IAAAA,KAAK,EAAE;AACVC,MAAAA,MAAM,EAAE,MADE;AAEVC,MAAAA,QAAQ,EAAE,QAFA;AAGVC,MAAAA,WAAW,EAAE,OAHH;AAIVC,MAAAA,OAAO,EAAC,CAJE;AAKVC,MAAAA,MAAM,EAAC;AALG,KAFc;AASrBC,IAAAA,IAAI,EAAE;AACTL,MAAAA,MAAM,EAAE,MADC;AAETG,MAAAA,OAAO,EAAC,CAFC;AAGTC,MAAAA,MAAM,EAAC,CAHE;AAITE,MAAAA,MAAM,EAAE;AAJC,KATe;AAerBC,IAAAA,GAAG,EAAE;AACRN,MAAAA,QAAQ,EAAE,QADF;AAERD,MAAAA,MAAM,EAAE;AAFA,KAfgB;AAmBrBQ,IAAAA,UAAU,EAAG;AAChBC,MAAAA,OAAO,EAAE,cADO;AAEhBC,MAAAA,cAAc,EAAE,MAFA;AAGhBC,MAAAA,MAAM,EAAE;AAHQ,KAnBQ;AAwBrBC,IAAAA,WAAW,EAAG;AACjBH,MAAAA,OAAO,EAAE,cADQ;AAEjBC,MAAAA,cAAc,EAAE,OAFC;AAGjBC,MAAAA,MAAM,EAAE;AAHS,KAxBO;AA6BrBE,IAAAA,QAAQ,EAAE;AACbJ,MAAAA,OAAO,EAAE,OADI;AAEbK,MAAAA,KAAK,EAAE;AAFM,KA7BW;AAiCrBC,IAAAA,WAAW,EAAG;AACjBC,MAAAA,eAAe,EAAC/B,YAAY,CAACgC,IADZ;AAEjBX,MAAAA,MAAM,EAAE,mBAFS;AAGjBG,MAAAA,OAAO,EAAE,WAHQ;AAIjBN,MAAAA,OAAO,EAAE;AAJQ,KAjCO;AAuCrBe,IAAAA,YAAY,EAAC;AAChBZ,MAAAA,MAAM,EAAE,mBADQ;AAEhBG,MAAAA,OAAO,EAAE,YAFO;AAGhBN,MAAAA,OAAO,EAAE;AAHO,KAvCQ;AA4CrBgB,IAAAA,kBAAkB,EAAC;AACtBR,MAAAA,MAAM,EAAE,SADc;AAEtBL,MAAAA,MAAM,EAAE,mBAFc;AAGtBG,MAAAA,OAAO,EAAE,YAHa;AAItBN,MAAAA,OAAO,EAAE;AAJa,KA5CE;AAkDrBiB,IAAAA,YAAY,EAAG;AAClBd,MAAAA,MAAM,EAAE,KADU;AAElBG,MAAAA,OAAO,EAAE,YAFS;AAGlBN,MAAAA,OAAO,EAAE;AAHS,KAlDM;AAuDrBkB,IAAAA,eAAe,EAAG;AACrBZ,MAAAA,OAAO,EAAE;AADY,KAvDG;AA0DrBa,IAAAA,qBAAqB,EAAG;AAC3Bb,MAAAA,OAAO,EAAE,MADkB;AAE3BC,MAAAA,cAAc,EAAE;AAFW,KA1DH;AA8DrBa,IAAAA,YAAY,EAAG;AAClBP,MAAAA,eAAe,EAAE,MADC;AAElBP,MAAAA,OAAO,EAAE,oBAFS;AAGlBe,MAAAA,UAAU,EAAE;AAHM,KA9DM;AAmErBC,IAAAA,YAAY,EAAG;AAClBhB,MAAAA,OAAO,EAAE;AADS,KAnEM;AAsErBiB,IAAAA,UAAU,EAAE;AACRC,MAAAA,SAAS,EAAE,QADH;AAERxB,MAAAA,OAAO,EAAEN,KAAK,CAAC+B,OAAN,CAAcC,IAAd,GAAqB;AAFtB;AAtES,GAAL;AAAA,CAApB;;IA6EMC,U;;;;;AACF,sBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACtB,oFAAMA,KAAN;;AADsB,UA0BnBC,sBA1BmB,GA0BM,YAAM;AAC3B,YAAKlB,KAAL,GAAYmB,MAAM,CAACC,UAAnB;AACP,YAAKlC,MAAL,GAAYiC,MAAM,CAACE,WAAnB;AACA,YAAKC,GAAL,GAAS,MAAKC,EAAL,CAAQC,qBAAR,EAAT,CAHkC,CAIlC;AACI,KA/BkB;;AAAA,QAEfC,KAFe,GAENR,KAFM,CAEfQ,KAFe;AAGtBA,IAAAA,KAAK,CAAC1D,KAAN,CAAYO,GAAZ;AACA,UAAKgD,GAAL,GAAS;AAACpC,MAAAA,MAAM,EAAC,CAAR;AAAUc,MAAAA,KAAK,EAAC;AAAhB,KAAT;AACA,UAAKyB,KAAL,GAAa;AACTC,MAAAA,WAAW,EAAE,IADJ;AAETC,MAAAA,MAAM,EAAE;AACXC,QAAAA,GAAG,EAAE,EADM;AAEXC,QAAAA,GAAG,EAAE;AAFM;AAFC,KAAb;AALsB;AAYlB;;;;kCACa;AACjB,WAAKC,IAAL,CAAUrC,GAAV,CAAcsC,cAAd,CAA6BC,MAA7B;AACI;;;wCAEmBC,C,EAAG;AAC1B,WAAKC,QAAL,CAAc;AACVR,QAAAA,WAAW,EAAE,IADH;AAEVC,QAAAA,MAAM,EAAEM,CAAC,CAACN;AAFA,OAAd;AAII,K,CACJ;AACA;AACA;;;;4BAOWJ,E,EAAI;AACf,UAAIA,EAAE,KAAKY,SAAP,IAAoBZ,EAAE,KAAK,IAA/B,EAAqC;AACjC,aAAKA,EAAL,GAAQA,EAAR;AACA,aAAKD,GAAL,GAAS,KAAKC,EAAL,CAAQC,qBAAR,EAAT;AACAY,QAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAgC,KAAKf,GAAL,CAAStB,KAAzC,EAA+C,KAAKsB,GAAL,CAASpC,MAAxD;AACH;;AAAA;AACG;;;6BACM;AAAA;;AAAA,wBACsB,KAAK+B,KAD3B;AAAA,UACGqB,OADH,eACGA,OADH;AAAA,UACYb,KADZ,eACYA,KADZ;AAEL,UAAMc,MAAM,GAAG,KAAKd,KAAL,CAAWC,WAAX,GAEf,oBAAC,OAAD;AAAS,QAAA,QAAQ,EAAE,KAAKD,KAAL,CAAWE,MAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAFe,GAKd,IALD;AAMA,aAAQ;AAAK,QAAA,GAAG,EAAE,aAAAJ,EAAE,EAAE;AAAC,UAAA,MAAI,CAACiB,OAAL,CAAajB,EAAb;AAAiB,SAAhC;AACJ,QAAA,SAAS,EAAEe,OAAO,CAACtD,OADf;AAEJ,QAAA,KAAK,EAAE;AAACyD,UAAAA,QAAQ,EAAC,OAAV;AAAmBzC,UAAAA,KAAK,EAAE,KAA1B;AAAiCd,UAAAA,MAAM,EAAE,mBAAzC;AAA6DC,UAAAA,QAAQ,EAAC;AAAtE,SAFH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAGJ,oBAAC,UAAD;AAAY,QAAA,SAAS,EAAEmD,OAAO,CAAC7C,GAA/B;AACU,QAAA,MAAM,EAAE,CAAC,EAAD,EAAK,EAAL,CADlB;AAEU,QAAA,IAAI,EAAE,CAFhB;AAGU,QAAA,OAAO,EAAE,EAHnB;AAIU,QAAA,kBAAkB,EAAE,IAJ9B;AAKU,QAAA,WAAW,EAAE,KALvB;AAMU,QAAA,eAAe,EAAE,IAN3B;AAOU,QAAA,eAAe,EAAE,IAP3B;AAQU,QAAA,QAAQ,EAAE,IARpB;AASU,QAAA,OAAO,EAAE,IATnB;AAUU,QAAA,aAAa,EAAE,IAVzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAYU,oBAAC,OAAD;AACG,QAAA,IAAI,EAAEb,YADT;AAEG,QAAA,KAAK,EAAE;AAAA,iBAAO;AAC9B8D,YAAAA,KAAK,EAAE,SADuB;AAE/BC,YAAAA,MAAM,EAAE,GAFuB;AAG/BC,YAAAA,SAAS,EAAE,SAHoB;AAI/BC,YAAAA,WAAW,EAAE,CAJkB;AAK/BC,YAAAA,MAAM,EAAE;AALuB,WAAP;AAAA,SAFV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAZV,EAsBIP,MAtBJ,CAHI,CAAR;AA6BH;;;;EA7EsBvE,S,GAiFnB;AACF;AACF;AACF;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;;AAGAgD,UAAU,CAAC+B,SAAX,GAAuB;AACnBT,EAAAA,OAAO,EAAErE,SAAS,CAAC+E,MAAV,CAAiBC;AADP,CAAvB;AAIA,eAAe/E,UAAU,CAACY,MAAD,CAAV,CAAmBkC,UAAnB,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\n\nimport { Map as LeafletMap, GeoJSON, TileLayer, Marker, Popup } from 'react-leaflet';\nimport worldGeoJSON from 'geojson-world-map';\nimport DivIcon from 'react-leaflet-div-icon';\n\n//\tbackground:'lightblue'\n//\tbackground:'red'\n\nconst styles = theme => ({\n    content: {},\n    paper: {\n\theight: '100%',\n\toverflow: 'hidden',\n\ttableLayout: 'fixed',\n\tpadding:0,\n\tmargin:0,\n    },\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '5px solid red'\n    },\n    map: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n    divHdrLeft : {\n\tdisplay: 'inline-block',\n\tjustifyContent: 'left',\n\tcursor: \"pointer\",\n    },\n    divHdrRight : {\n\tdisplay: 'inline-block',\n\tjustifyContent: 'right',\n\tcursor: \"pointer\",\n    },\n    divTable :{\n\tdisplay: 'table',\n\twidth: '100%',\n    },\n    divTableRow:  {\n\tbackgroundColor:teal_palette.main,\n\tborder: '0px solid #999999',\n\tdisplay: 'table-row',\n\tpadding: '0px',\n    },\n    divTableCell:{\n\tborder: '0px solid #999999',\n\tdisplay: 'table-cell',\n\tpadding: '0px',\n    },\n    divTableCellCursor:{\n\tcursor: \"pointer\",\n\tborder: '0px solid #999999',\n\tdisplay: 'table-cell',\n\tpadding: '0px',\n    },\n    divTableHead : {\n\tborder: '0px',\n\tdisplay: 'table-cell',\n\tpadding: '0px',\n    },\n    divTableHeading : {\n\tdisplay: 'table-header-group',\n    },\n    divTableHeadingCenter : {\n\tdisplay: 'flex',\n\tjustifyContent: 'center',\n    },\n    divTableFoot : {\n\tbackgroundColor: '#DDD',\n\tdisplay: 'table-footer-group',\n\tfontWeight: 'bold',\n    },\n    divTableBody : {\n\tdisplay: 'table-row-group',\n    },\n    paperImage: {\n        textAlign: 'center',\n        padding: theme.spacing.unit * 2,\n    }\n});\n\n\nclass GeoJsonMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state} = props;\n\tstate.React.Map=this;\n\tthis.bbx={height:0,width:0};\n\tthis.state = {\n\t    hasLocation: true,\n\t    latlng: {\n\t\tlat: 60,\n\t\tlng: 10,\n\t    },\n\t};\n    };    \n    handleClick() {\n\tthis.refs.map.leafletElement.locate();\n    }\n    \n    handleLocationFound(e) {\n\tthis.setState({\n\t    hasLocation: true,\n\t    latlng: e.latlng,\n\t});\n    }\n //   componentDidMount() {\n //       window.addEventListener(\"resize\", this.updateWindowDimensions);\n //   } \n    updateWindowDimensions = () => {\n        this.width= window.innerWidth;\n\tthis.height=window.innerHeight;\n\tthis.bbx=this.el.getBoundingClientRect();\n\t//console.log(\"Width/Height:\",this.width,this.height,this.bbx.width,this.bbx.height)\n    };\n    element(el) {\n\tif (el !== undefined && el !== null) {\n\t    this.el=el;\n\t    this.bbx=this.el.getBoundingClientRect();\n\t    console.log(\"BBX width/height:\",this.bbx.width,this.bbx.height);\n\t};\n    };\n  render() {\n      const { classes, state } = this.props;\n      const marker = this.state.hasLocation\n\t    ? (\n\t\t    <DivIcon position={this.state.latlng}>\n\t\t    </DivIcon>\n\t    )\n\t    : null;\n      return (<div ref={el=>{this.element(el)}}\n\t         className={classes.content}\n\t         style={{position:'fixed', width: '90%', height: 'calc(95% - 160px)',overflow:'hidden'}} >\n\t         <LeafletMap className={classes.map}\n                    center={[60, 10]}\n                    zoom={3}\n                    maxZoom={10}\n                    attributionControl={true}\n                    zoomControl={false}\n                    doubleClickZoom={true}\n                    scrollWheelZoom={true}\n                    dragging={true}\n                    animate={true}\n                    easeLinearity={0.35} \n   \t         >\n                    <GeoJSON\n                       data={worldGeoJSON}\n                       style={() => ({\n\t\t \t   color: '#4a83ec',\n\t\t\t   weight: 0.5,\n\t\t\t   fillColor: \"#1a1d62\",\n\t\t\t   fillOpacity: 1,\n\t\t\t   zIndex: 1,\n\t\t       })}\n                    />\n\t            {marker}\n\t         </LeafletMap>\n\t      </div>\n\t     );\n  }\n}\n\n\n      //              <GeoJSON\n    //                   data={worldGeoJSON}\n  //                     style={() => ({\n//\t\t \t   color: '#4a83ec',\n//\t\t\t   weight: 0.5,\n//\t\t\t   fillColor: \"#1a1d62\",\n//\t\t\t   fillOpacity: 1,\n//\t\t       })}\n//                    />\n\n\n\n//              <Marker position={[50, 10]}>\n//              <Popup>\n//              Popup for any custom information.\n//              </Popup>\n//              </Marker>\n\n\nGeoJsonMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(GeoJsonMap);\n"]},"metadata":{},"sourceType":"module"}