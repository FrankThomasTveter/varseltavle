{"ast":null,"code":"//console.log(\"Loading DatabaseLib.js\");\nvar alasql = window.alasql;\n\nfunction Database() {\n  this.cnt = 0;\n  this.keyCnt = {};\n  this.values = {};\n  this.epoch0 = 0;\n  this.regfile = \"register\"; // register file (shows current datfile)\n\n  this.datfile = \"\"; // json data file\n\n  this.arrayConstructor = [].constructor;\n  this.objectConstructor = {}.constructor;\n  this.casc = 0; // key is sorted ascending\n\n  this.cdes = 1; // key is sorted descending\n\n  this.nasc = 2; // key is sorted ascending\n\n  this.ndes = 3; // key is sorted descending\n\n  this.delay = 100000; // server-polling period in ms\n\n  this.ready = true; // can we poll server or is another poll running\n\n  this.log = \"\";\n  this.mod = \"\";\n\n  this.init = function (state) {\n    var par = \"Database\" + state.Utils.version;\n    state.Utils.init(par, this);\n  };\n\n  this.update = function (state) {\n    this.setTime(state);\n    this.load(state);\n    setTimeout(function () {\n      this.update(state);\n    }, this.delay);\n  };\n\n  this.load = function (state) {\n    //console.log(\"Loading\",nn++);\n    state.Default.loadDefault(state, [this.loadRegister, this.loadData]);\n  };\n\n  this.loadRegister = function (state, callbacks) {\n    //console.log(\"loadRegister\");\n    if (this.ready) {\n      // make sure we do not re-load if we are already loading\n      this.ready = false;\n      state.Html.setLog(state, \"<em>Server-request: \" + this.regfile + \"</em>\");\n      var regHttp = new XMLHttpRequest();\n      regHttp.addEventListener(\"progress\", state.Html.progressInfo); //regHttp.addEventListener(\"load\",state.Html.loadInfo);\n\n      regHttp.addEventListener(\"error\", state.Html.errorInfo);\n      regHttp.addEventListener(\"abort\", state.Html.abortInfo);\n\n      regHttp.onreadystatechange = function () {\n        this.ready = true;\n\n        if (regHttp.readyState === 4) {\n          if (regHttp.status === 200) {\n            //console.log(regHttp.responseText);\n            var file = regHttp.responseText;\n\n            if (file !== this.datfile) {\n              // load new data\n              this.datfile = file;\n              var callback = callbacks.shift();\n\n              if (callback !== undefined) {\n                callback(state, file, callbacks);\n              }\n\n              state.Html.setInfo(file);\n            } else {\n              state.Html.setInfo(file);\n              state.Html.setLog(state);\n            }\n          } else {\n            state.Html.setLog(state, \"<em>Unable to load \" + this.regfile + \"</em>\");\n            state.Html.setInfo(this.regfile + \" error\");\n          }\n        } else {\n          state.Html.setInfo(this.regfile + \" error\");\n        }\n\n        ;\n      };\n\n      regHttp.responseType = \"\";\n      regHttp.overrideMimeType(\"text/text\");\n      regHttp.open(\"GET\", \"data/\" + this.regfile, true);\n      regHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n      regHttp.setRequestHeader('cache-control', 'max-age=0');\n      regHttp.setRequestHeader('expires', '0');\n      regHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n      regHttp.setRequestHeader('pragma', 'no-cache');\n      regHttp.send();\n    } else {\n      state.Html.setInfo(\"\");\n      state.Html.setLog(state, \"<em>Already waiting for reply...</em>\");\n    }\n\n    ;\n  };\n\n  this.loadData = function (state, file, callbacks) {\n    //console.log(\"loadData\");\n    if (this.ready) {\n      // make sure we do not re-load if we are already loading\n      this.ready = false;\n      state.Html.setLog(state, \"<em>Server-request: \" + this.datfile + \"</em>\");\n      var datHttp = new XMLHttpRequest();\n      datHttp.addEventListener(\"progress\", state.Html.progressInfo); //datHttp.addEventListener(\"load\",state.Html.loadInfo);\n\n      datHttp.addEventListener(\"error\", state.Html.errorInfo);\n      datHttp.addEventListener(\"abort\", state.Html.abortInfo);\n\n      datHttp.onreadystatechange = function () {\n        this.ready = true;\n\n        if (datHttp.readyState === 4) {\n          if (datHttp.status === 200) {\n            state.Html.setInfo(\"100%\");\n            state.Html.setLog(state, \"<em>Creating database</em>\");\n            console.log(\"Creating database from \" + file);\n            this.dbInsert(state, datHttp.responseText);\n            state.Show.showAll(state);\n            state.Html.setLog(state);\n            state.Html.setInfo(file);\n          } else {\n            state.Html.setLog(state, \"<em>Unable to load \" + file + \"</em>\");\n            state.Html.setInfo(file + \" error\");\n          }\n        }\n      };\n\n      datHttp.responseType = \"\";\n      datHttp.overrideMimeType(\"text/text\");\n      datHttp.open(\"GET\", \"data/\" + this.datfile, true);\n      datHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n      datHttp.setRequestHeader('cache-control', 'max-age=0');\n      datHttp.setRequestHeader('expires', '0');\n      datHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n      datHttp.setRequestHeader('pragma', 'no-cache');\n      datHttp.send();\n    } else {\n      state.Html.setInfo(\"\");\n      state.Html.setLog(state, \"<em>Already waiting for reply...</em>\");\n    }\n\n    ;\n  };\n\n  this.getTime = function (state, s) {\n    var nn = s.match(/\\d+/g).map(Number);\n    var date0 = new Date(Date.UTC(nn[0], nn[1] - 1, nn[2], nn[3], nn[4], nn[5], ((nn[6] || '') + '000').slice(0, 3))); // modification time\n\n    console.log(\"Gettime:\", s, JSON.stringify(nn));\n    return date0.getTime();\n  };\n\n  this.setTime = function (state) {\n    var d = new Date();\n    var epoch = d.getTime(); //console.log(\"Times:\",epoch,this.epoch0);\n\n    if (this.epoch0 !== undefined) {\n      var age = epoch - this.epoch0;\n      this.mod = this.getTimeDiff(state, age);\n      state.autoUpdate(); //console.log(\"Age:\",epoch,this.epoch0,age);\n    }\n  };\n\n  this.dbInsert = function (state, raw) {\n    try {\n      //console.log(\"Parsing JSON.\");\n      var json = JSON.parse(raw);\n      var len = json.data.length;\n\n      for (var ii = 0; ii < len; ii++) {\n        json.data[ii][\"cnt\"] = ii;\n      } // get modified date\n      //console.log(\"Setting time.\");\n\n\n      this.epoch0 = this.getTime(state, json.epoch); // data file time\n\n      this.setTime(state); // data file time\n      // make database for raw data\n\n      this.makeTable(state); // reset key counts and range\n\n      this.cnt = 0;\n      this.keyCnt = {}; // reset key-count\n      // put data into databse\n\n      var raw = json.data; //console.log(\"inserting\");\n\n      var data = [];\n      var rcnt = this.extractData(state, data, {}, \"\", raw); //console.log(\"Data:\",JSON.stringify(data));\n\n      console.log(\"Raw data length:\", data.length);\n      this.dataToDb(state, data); // sanity check\n\n      var sql = \"select count(*) AS cnt, max(level) AS lev FROM alarm\";\n      var dd0 = alasql(sql);\n      var nrec = dd0[0].cnt;\n      console.log(\"Records in database:\", nrec);\n      state.Path.makePath(state); // initialise path\n\n      console.log(\"Indexing and cleaning up.\");\n      this.dbindex(state, state.Path.other.table); // make indexes\n\n      this.dbindex(state, state.Path.other.rest); // make indexes\n\n      state.Layout.checkTableKeys(state);\n      console.log(\"Database is ready.\");\n    } catch (e) {\n      alert(e);\n    }\n\n    ;\n  };\n\n  this.updateKeyCnt = function (state, key, val) {\n    if (this.keyCnt[key] === undefined) {\n      this.keyCnt[key] = {\n        cnt: 0,\n        type: \"num\",\n        order: this.nasc\n      };\n    }\n\n    this.keyCnt[key].cnt = this.keyCnt[key].cnt + 1;\n\n    if (this.keyCnt[key].type === \"num\" && isNaN(val)) {\n      this.keyCnt[key].type = \"nan\";\n      this.keyCnt[key].order = this.casc;\n    }\n  };\n\n  this.extractData = function (state, data, parent, key, raw) {\n    // insert records into db (recursive)\n    var rcnt = 0; //console.log(\"Processing {\",state.Utils.toString(parent),\"} '\",key,\"' (\",state.Utils.toString(raw),\")\");\n\n    var wii = this.whatIsIt(raw);\n\n    if (wii === \"Object\" && key === \"\") {\n      //console.log(\"Found object (\",state.Utils.toString(parent),\")\");\n      var child = state.Utils.cp(parent); // loop over plain values first\n\n      for (var kk in raw) {\n        var kii = this.whatIsIt(raw[kk]);\n\n        if (kii === \"value\") {\n          child[kk] = raw[kk];\n        }\n      } // loop over sub-objects\n\n\n      var nn = 0;\n\n      for (var kk in raw) {\n        var kii = this.whatIsIt(raw[kk]);\n\n        if (kii !== \"value\") {\n          nn = nn + 1;\n          rcnt = rcnt + this.extractData(state, data, child, kk, raw[kk]);\n        }\n      }\n\n      if (nn === 0) {\n        // insert \n        //console.log(\"Object was empty.\");\n        rcnt = rcnt + this.extractData(state, data, child, null, null);\n      }\n    } else if (wii === \"Object\" && key !== \"\") {\n      //console.log(\"Found object key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n      var child = state.Utils.cp(parent); // loop over plain values first\n\n      for (var kk in raw) {\n        child[key] = kk;\n        rcnt = rcnt + this.extractData(state, data, child, \"\", raw[kk]);\n      }\n    } else if (wii === \"Array\") {\n      //console.log(\"Found array key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n      var dlen = raw.length;\n\n      for (var ii = 0; ii < dlen; ii++) {\n        rcnt = rcnt + this.extractData(state, data, parent, key, raw[ii]);\n      }\n    } else {\n      //console.log(\"Found key '\",key,\"' \",wii,\" (\",state.Utils.toString(parent),\")\");\n      var doc = state.Utils.cp(parent);\n\n      if (raw !== null) {\n        if (key === \"\") {\n          doc.value = raw;\n        } else {\n          doc[key] = raw;\n        }\n      } //console.log(\"Updating internal raw structure\",JSON.stringify(setup));\n\n\n      for (var key in doc) {\n        var val = doc[key];\n        this.updateKeyCnt(state, key, val); //if (this.values[key]  === undefined) {\n        //\tthis.values[key]=[];\n        //  };\n        //console.log(\"Setup:\",JSON.stringify(setup));\n        //console.log(\"Key:\",key,JSON.stringify(this.values));\n        //if (this.values[key].indexOf(val)  === -1 ) { // value not in range\n        //\t\tthis.values[key].push(val); // add value to range\n        //\t    };\n      }\n\n      ; //console.log(\">>> Inserting:\",state.Utils.toString(doc));\n\n      rcnt = rcnt + 1;\n      this.cnt = this.cnt + 1; //if (this.cnt < 10) { // debug purposes\n\n      state.Threshold.setGThr(state, doc);\n      doc.level = state.Threshold.getLevel(state, doc);\n      doc.lat = state.Threshold.getLat(state, doc);\n      doc.lon = state.Threshold.getLon(state, doc);\n      this.updateKeyCnt(state, \"lon\", doc.lon);\n      this.updateKeyCnt(state, \"lat\", doc.lat);\n      data.push(doc);\n    }\n\n    return rcnt;\n  };\n\n  this.dbextract = function (state, showFunc) {\n    // extract data from db and show\n    // extract data from db and insert into data-array\n    var parent = {}; //{test:{$exists:false}};\n\n    var where = this.getWhere(state);\n    var m = {};\n    var docs0 = this.getCntDocs(state, where);\n    var nrec = docs0[0].cnt;\n    state.Matrix.cnt = nrec;\n\n    if (nrec > state.Matrix.popSeries) {\n      // only use counts...\n      state.Matrix.initKeyCnt(state);\n      state.Matrix.mapKeyCnt(state, where, nrec, state.Path.keys.other);\n      state.Matrix.mapKeyCnt(state, where, nrec, state.Path.keys.trash); //console.log(\"Setup:\",\n      //\t    JSON.stringify(state.Matrix.values),\n      //\t    JSON.stringify(state.Matrix.keyCnt));\n\n      state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\n      state.Matrix.sortMatrixValues(state);\n      var docs = this.getCntDocs(state, where, state.Path.other.table); //console.log(\"Count:\",sql,JSON.stringify(docs));\n      // add \"undefined\" range of keys that are not present in every doc...\n\n      state.Matrix.makeMatrixCnt(state, docs, m);\n    } else {\n      console.log(\"Where:\", where);\n      var docs = this.getDocs(state, where); // get all docs\n\n      var dlen = docs.length; //console.log(\">>>Extraction key (where='\",where,\"') Docs:\",dlen);\n\n      state.Matrix.initKeyCnt(state);\n      state.Matrix.mapKeys(state, docs);\n      state.Matrix.addMapKeys(state, docs); //console.log(\"Setup=\",JSON.stringify(setup));\n      //console.log (\"Maprange:\",JSON.stringify(state.Matrix.values));\n      // subset contains the keys being displayed in matrix...\n\n      state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\n      state.Matrix.sortMatrixValues(state); // make matrix\n\n      state.Matrix.makeMatrix(state, docs, m); //console.log (\"Matrix:\",JSON.stringify(matrix));\n    }\n\n    showFunc(state, m);\n  };\n\n  this.dbindex = function (state, ks) {\n    // make indexes on all keys\n    var s = \"\";\n    var klen = ks.length;\n\n    for (var ii = 0; ii < klen; ii++) {\n      //alasql(\"CREATE INDEX ? ON TABLE alarm.?\",ks[ii],ks[ii]);\n      s = s + \" \" + ks[ii];\n    }\n\n    ; //console.log(\"Indexes:\",s);\n  };\n\n  this.getWhereDetail = function (key, val) {\n    if (val === undefined || val === null || val === \"\") {\n      return key + ' is NULL';\n    } else {\n      return key + '=\"' + val + '\"';\n    }\n\n    ;\n  };\n\n  this.getWhere = function (state) {\n    var where = \"\";\n    var plen = state.Path.keys.path.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = state.Path.keys.path[ii];\n\n      if (state.Path.select.where[key] === undefined || state.Path.select.where[key] === null || state.Path.select.where[key] === \"\") {\n        if (where !== \"\") {\n          where = where + ' AND ';\n        }\n\n        ;\n        where = where + key + ' is NULL';\n      } else {\n        //if (where !== \"\") { where = where +  ' AND ';};\n        //where=where + key +'=\"'+state.Path.select.val[key]+'\"';\n        if (where !== \"\") {\n          where = where + ' AND ';\n        }\n\n        ;\n        where = where + \"(\" + state.Path.select.where[key] + \")\";\n      }\n    }\n\n    ;\n\n    if (where !== \"\") {\n      where = \" WHERE \" + where;\n    } //console.log(\"Where=|\"+where+\"|\")\n\n\n    return where;\n  };\n\n  this.getGroup = function (keys) {\n    var group = \"\";\n    var plen = keys.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = keys[ii];\n\n      if (group !== \"\") {\n        group = group + ',';\n      }\n\n      ;\n      group = group + key;\n    }\n\n    ;\n\n    if (group !== \"\") {\n      group = \" GROUP BY \" + group;\n    }\n\n    return group;\n  };\n\n  this.getCols = function (keys) {\n    var cols = \"\";\n    var plen = keys.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = keys[ii];\n      cols = cols + key;\n\n      if (cols !== \"\") {\n        cols = cols + ',';\n      }\n\n      ;\n    }\n\n    ;\n    return cols;\n  };\n\n  this.getAll = function (state) {\n    var cols = \"\";\n    var plen = state.Path.keys.other.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = state.Path.keys.other[ii];\n      cols = cols + key;\n\n      if (cols !== \"\") {\n        cols = cols + ',';\n      }\n\n      ;\n    }\n\n    ;\n    return cols;\n  };\n\n  this.getCntDocs = function (state, where, keys) {\n    var body = \"count(*) AS cnt, max(level) AS lev, max(lat) AS maxlat, min(lat) AS minlat, max(lon) AS maxlon, min(lon) AS minlon FROM alarm\";\n\n    if (keys === undefined) {\n      var sql = \"select \" + body + where;\n      var dd = alasql(sql); //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n\n      console.log(\"Cnt:\", JSON.stringify(dd));\n      return dd;\n    } else {\n      var cols = this.getCols(keys);\n      var group = this.getGroup(keys);\n      var sql = \"select \" + cols + body + where + group;\n      var dd = alasql(sql);\n      console.log(\"Cnt:\", JSON.stringify(dd));\n      return dd;\n    }\n  };\n\n  this.getDocs = function (state, where) {\n    var dd = alasql(\"select * FROM alarm\" + where);\n    return dd;\n  };\n\n  this.makeTable = function (state) {\n    alasql('DROP TABLE IF EXISTS alarm; CREATE TABLE alarm;');\n  };\n\n  this.dataToDb = function (state, data) {\n    alasql.tables.alarm.data = data;\n  };\n\n  this.getKeyCnt = function (state, key, where) {\n    var sql = \"select \" + key + \",count(*) AS cnt FROM alarm\" + where + \" GROUP BY \" + key;\n    return alasql(sql);\n  };\n\n  this.whatIsIt = function (object) {\n    // determine object type\n    if (object === null) {\n      return \"null\";\n    } else if (object.constructor === this.arrayConstructor) {\n      return \"Array\";\n    } else if (object.constructor === this.objectConstructor) {\n      return \"Object\";\n    } else {\n      return \"value\";\n    }\n  };\n\n  this.getTimeDiff = function (state, dt) {\n    var s = \"\";\n\n    if (dt === undefined || isNaN(state, dt)) {\n      return s;\n    }\n\n    ;\n    var msec = Math.abs(state, dt);\n    var dd = Math.floor(state, (state, msec / 1000 / 60) / 60 / 24);\n    msec -= dd * 1000 * 60 * 60 * 24;\n    var hh = Math.floor(state, (state, msec / 1000) / 60 / 60);\n    msec -= hh * 1000 * 60 * 60;\n    var mm = Math.floor(state, msec / 1000 / 60);\n    msec -= mm * 1000 * 60;\n    var ss = Math.floor(state, msec / 1000);\n    msec -= ss * 1000;\n\n    if (dt < 0) {\n      s = \"-\";\n    } else if (dt > 0) {\n      s = \"+\";\n    } else {\n      s = \"0\";\n    }\n\n    if (dd !== 0) s = s + \" \" + state.Utils.numberWithCommas(dd) + \"d\";\n    if (hh !== 0) s = s + \" \" + hh + \"h\";\n    if (mm !== 0) s = s + \" \" + mm + \"m\"; //if (ss !== 0) s=s+\" \"+ss+\"s\";\n\n    return s;\n  };\n}\n\n;\nexport default Database;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/system/DatabaseLib.js"],"names":["alasql","window","Database","cnt","keyCnt","values","epoch0","regfile","datfile","arrayConstructor","constructor","objectConstructor","casc","cdes","nasc","ndes","delay","ready","log","mod","init","state","par","Utils","version","update","setTime","load","setTimeout","Default","loadDefault","loadRegister","loadData","callbacks","Html","setLog","regHttp","XMLHttpRequest","addEventListener","progressInfo","errorInfo","abortInfo","onreadystatechange","readyState","status","file","responseText","callback","shift","undefined","setInfo","responseType","overrideMimeType","open","setRequestHeader","send","datHttp","console","dbInsert","Show","showAll","getTime","s","nn","match","map","Number","date0","Date","UTC","slice","JSON","stringify","d","epoch","age","getTimeDiff","autoUpdate","raw","json","parse","len","data","length","ii","makeTable","rcnt","extractData","dataToDb","sql","dd0","nrec","Path","makePath","dbindex","other","table","rest","Layout","checkTableKeys","e","alert","updateKeyCnt","key","val","type","order","isNaN","parent","wii","whatIsIt","child","cp","kk","kii","dlen","doc","value","Threshold","setGThr","level","getLevel","lat","getLat","lon","getLon","push","dbextract","showFunc","where","getWhere","m","docs0","getCntDocs","Matrix","popSeries","initKeyCnt","mapKeyCnt","keys","trash","exportAllKeys","sortMatrixValues","docs","makeMatrixCnt","getDocs","mapKeys","addMapKeys","makeMatrix","ks","klen","getWhereDetail","plen","path","select","getGroup","group","getCols","cols","getAll","body","dd","tables","alarm","getKeyCnt","object","dt","msec","Math","abs","floor","hh","mm","ss","numberWithCommas"],"mappings":"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","sourcesContent":["//console.log(\"Loading DatabaseLib.js\");\n\nconst alasql = window.alasql;\n\nfunction Database() {\n    this.cnt=0;\n    this.keyCnt={};\n    this.values= {};\n    this.epoch0=0;\n    this.regfile=\"register\";      // register file (shows current datfile)\n    this.datfile=\"\";              // json data file\n    this.arrayConstructor=[].constructor;\n    this.objectConstructor={}.constructor;\n    this.casc=0; // key is sorted ascending\n    this.cdes=1; // key is sorted descending\n    this.nasc=2; // key is sorted ascending\n    this.ndes=3; // key is sorted descending\n    this.delay=100000;  // server-polling period in ms\n    this.ready=true;     // can we poll server or is another poll running\n    this.log=\"\";\n    this.mod=\"\";\n    this.init=function(state){\n\tvar par=\"Database\"+state.Utils.version;\n\tstate.Utils.init(par,this);\n    };\n    this.update=function(state) {\n\tthis.setTime(state);\n\tthis.load(state);\n\tsetTimeout(function() {this.update(state)},this.delay);\n    };\n    this.load=function(state) {\n\t//console.log(\"Loading\",nn++);\n\tstate.Default.loadDefault(state,[this.loadRegister,\n\t\t\t     this.loadData]);\n    };\n    this.loadRegister=function(state, callbacks ) {\n\t//console.log(\"loadRegister\");\n\tif (this.ready) { // make sure we do not re-load if we are already loading\n\t    this.ready=false;\n\t    state.Html.setLog(state, \"<em>Server-request: \"+this.regfile+\"</em>\");\n\t    var regHttp = new XMLHttpRequest();\n\t    regHttp.addEventListener(\"progress\",state.Html.progressInfo);\n\t    //regHttp.addEventListener(\"load\",state.Html.loadInfo);\n\t    regHttp.addEventListener(\"error\",state.Html.errorInfo);\n\t    regHttp.addEventListener(\"abort\",state.Html.abortInfo);\n\t    regHttp.onreadystatechange = function() {\n\t\tthis.ready=true;\n\t\tif (regHttp.readyState  === 4) {\n\t\t    if (regHttp.status  === 200) {\n\t\t\t//console.log(regHttp.responseText);\n\t\t\tvar file = regHttp.responseText;\n\t\t\tif (file !== this.datfile) { // load new data\n\t    \t\t    this.datfile=file;\n\t\t\t    var callback=callbacks.shift();\n\t\t\t    if (callback !== undefined) {\n\t\t\t\tcallback(state,file,callbacks);\n\t\t\t    }\n\t\t\t    state.Html.setInfo(file);\n\t\t\t} else {\n\t\t\t    state.Html.setInfo(file);\n\t\t\t    state.Html.setLog(state);\n\t\t\t}\n\t\t    } else {\n\t\t\tstate.Html.setLog(state,\"<em>Unable to load \"+this.regfile+\"</em>\");\n\t\t\tstate.Html.setInfo(this.regfile+\" error\");\n\t\t    }\n\t\t} else {\n\t\t    state.Html.setInfo(this.regfile+\" error\");\t\t\n\t\t};\n\t    };\n\t    regHttp.responseType=\"\";\n\t    regHttp.overrideMimeType(\"text/text\");\n\t    regHttp.open(\"GET\", \"data/\"+this.regfile, true);\n\t    regHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n\t    regHttp.setRequestHeader('cache-control', 'max-age=0');\n\t    regHttp.setRequestHeader('expires', '0');\n\t    regHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n\t    regHttp.setRequestHeader('pragma', 'no-cache');\n\t    regHttp.send(); \n\t} else {\n\t    state.Html.setInfo(\"\");\n\t    state.Html.setLog(state,\"<em>Already waiting for reply...</em>\");\n\t};\n    };\n    this.loadData=function(state,file, callbacks ) {\n\t//console.log(\"loadData\");\n\tif (this.ready) { // make sure we do not re-load if we are already loading\n\t    this.ready=false;\n\t    state.Html.setLog(state, \"<em>Server-request: \"+this.datfile+\"</em>\");\n\t    var datHttp = new XMLHttpRequest();\n\t    datHttp.addEventListener(\"progress\",state.Html.progressInfo);\n\t    //datHttp.addEventListener(\"load\",state.Html.loadInfo);\n\t    datHttp.addEventListener(\"error\",state.Html.errorInfo);\n\t    datHttp.addEventListener(\"abort\",state.Html.abortInfo);\n\t    datHttp.onreadystatechange = function() {\n\t\tthis.ready=true;\n\t\tif (datHttp.readyState  === 4) {\n\t\t    if (datHttp.status  === 200) {\n\t\t\tstate.Html.setInfo(\"100%\");\n\t    \t\tstate.Html.setLog(state,\"<em>Creating database</em>\");\n\t\t\tconsole.log(\"Creating database from \"+file);\n\t\t\tthis.dbInsert(state,datHttp.responseText);\n\t\t\tstate.Show.showAll(state);\n\t\t\tstate.Html.setLog(state);\n\t\t\tstate.Html.setInfo(file);\n\t\t    } else {\n\t    \t\tstate.Html.setLog(state,\"<em>Unable to load \"+file+\"</em>\");\n\t\t\tstate.Html.setInfo(file+\" error\");\n\t\t    }\n\t\t}\n\t    };\n\t    datHttp.responseType=\"\";\n\t    datHttp.overrideMimeType(\"text/text\");\n\t    datHttp.open(\"GET\", \"data/\"+this.datfile, true);\n\t    datHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n\t    datHttp.setRequestHeader('cache-control', 'max-age=0');\n\t    datHttp.setRequestHeader('expires', '0');\n\t    datHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n\t    datHttp.setRequestHeader('pragma', 'no-cache');\n\t    datHttp.send(); \n\t} else {\n\t    state.Html.setInfo(\"\");\n\t    state.Html.setLog(state, \"<em>Already waiting for reply...</em>\");\n\t};\n    };\n    this.getTime=function(state,s) {\n\tvar nn = s.match(/\\d+/g).map(Number);\n\tvar date0 = new Date(Date.UTC(nn[0],nn[1]-1,nn[2],nn[3],nn[4],nn[5],\n\t\t\t\t      ((nn[6]||'')+'000').slice(0,3))); // modification time\n\tconsole.log(\"Gettime:\",s,JSON.stringify(nn));\n\treturn date0.getTime();\n    };\n    this.setTime=function(state) {\n\tvar d = new Date();\n\tvar epoch=d.getTime();\n\t//console.log(\"Times:\",epoch,this.epoch0);\n\tif (this.epoch0 !== undefined) {\n\t    var age = epoch - this.epoch0;\n\t    this.mod=this.getTimeDiff(state,age);\n\t    state.autoUpdate();\n\t    //console.log(\"Age:\",epoch,this.epoch0,age);\n\t}\n    };\n    this.dbInsert=function(state,raw) {\n\ttry {\n\t    //console.log(\"Parsing JSON.\");\n\t    var json = JSON.parse(raw);\n\t    var len=json.data.length\n\t    for (var ii=0;ii<len;ii++) {\n\t\tjson.data[ii][\"cnt\"]=ii\n\t    }\n\t    // get modified date\n\t    //console.log(\"Setting time.\");\n\t    this.epoch0=this.getTime(state,json.epoch);     // data file time\n\t    this.setTime(state);     // data file time\n\t    // make database for raw data\n\t    this.makeTable(state);\n\t    // reset key counts and range\n\t    this.cnt=0;\n\t    this.keyCnt={}; // reset key-count\n\t    // put data into databse\n\t    var raw = json.data;\n\t    //console.log(\"inserting\");\n\t    var data=[];\n\t    var rcnt=this.extractData(state,data,{},\"\",raw);\n\t    //console.log(\"Data:\",JSON.stringify(data));\n\t    console.log(\"Raw data length:\",data.length);\n\t    this.dataToDb(state,data);\n\t    // sanity check\n\t    var sql=\"select count(*) AS cnt, max(level) AS lev FROM alarm\";\n\t    var dd0=alasql(sql);\n\t    var nrec= dd0[0].cnt;\n\t    console.log(\"Records in database:\",nrec);\n\t    state.Path.makePath(state); // initialise path\n\t    console.log(\"Indexing and cleaning up.\");\n\t    this.dbindex(state,state.Path.other.table); // make indexes\n\t    this.dbindex(state,state.Path.other.rest); // make indexes\n\t    state.Layout.checkTableKeys(state);\n\t    console.log(\"Database is ready.\");\n\t} catch (e) {\n\t    alert(e);\n\t};\n    };\n    this.updateKeyCnt=function(state,key,val) {\n\tif (this.keyCnt[key] === undefined) {\n\t    this.keyCnt[key]={cnt:0,type:\"num\",order:this.nasc};\n\t}\n\tthis.keyCnt[key].cnt=(this.keyCnt[key].cnt)+1;\n\tif (this.keyCnt[key].type  === \"num\" && isNaN(val)) {\n\t    this.keyCnt[key].type=\"nan\";\n\t    this.keyCnt[key].order=this.casc;\n\t}\n    };\n    this.extractData=function(state,data,parent,key,raw) { // insert records into db (recursive)\n\tvar rcnt=0;\n\t//console.log(\"Processing {\",state.Utils.toString(parent),\"} '\",key,\"' (\",state.Utils.toString(raw),\")\");\n\tvar wii=this.whatIsIt(raw);\n\tif (wii  === \"Object\" && key  === \"\") {\n\t    //console.log(\"Found object (\",state.Utils.toString(parent),\")\");\n\t    var child=state.Utils.cp(parent);\n\t    // loop over plain values first\n\t    for (var kk in raw) {\n\t\tvar kii=this.whatIsIt(raw[kk]);\n\t\tif (kii  === \"value\") {\n\t\t    child[kk]=raw[kk];\n\t\t}\n\t    }\n\t    // loop over sub-objects\n\t    var nn=0;\n\t    for (var kk in raw) {\n\t\tvar kii=this.whatIsIt(raw[kk]);\n\t\tif (kii !== \"value\") {\n\t\t    nn=nn+1;\n\t\t    rcnt=rcnt+this.extractData(state,data,child,kk,raw[kk]);\n\t\t}\n\t    }\n\t    if (nn  === 0) { // insert \n\t\t//console.log(\"Object was empty.\");\n\t\trcnt=rcnt+this.extractData(state,data,child,null,null);\n\t    }\n\t} else if (wii  === \"Object\" && key !== \"\") {\n\t    //console.log(\"Found object key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n\t    var child=state.Utils.cp(parent);\n\t    // loop over plain values first\n\t    for (var kk in raw) {\n\t\tchild[key]=kk;\n\t\trcnt=rcnt+this.extractData(state,data,child,\"\",raw[kk]);\n\t    }\n\t} else if (wii  === \"Array\") {\n\t    //console.log(\"Found array key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n\t    var dlen = raw.length;\n\t    for (var ii = 0; ii < dlen; ii++) {\n\t\trcnt=rcnt+this.extractData(state,data,parent,key,raw[ii]);\n\t    }\n\t} else {\n\t    //console.log(\"Found key '\",key,\"' \",wii,\" (\",state.Utils.toString(parent),\")\");\n\t    var doc=state.Utils.cp(parent);\n\t    if (raw !== null) {\n\t\tif (key  === \"\") {\n\t\t    doc.value=raw;\n\t\t} else {\n\t\t    doc[key]=raw;\n\t\t}\n\t    }\n\t    //console.log(\"Updating internal raw structure\",JSON.stringify(setup));\n\t    for (var key in doc) {\n\t\tvar val=doc[key];\n\t\tthis.updateKeyCnt(state,key,val);\n\t\t//if (this.values[key]  === undefined) {\n\t\t//\tthis.values[key]=[];\n\t\t//  };\n\t\t//console.log(\"Setup:\",JSON.stringify(setup));\n\t\t//console.log(\"Key:\",key,JSON.stringify(this.values));\n    \t\t//if (this.values[key].indexOf(val)  === -1 ) { // value not in range\n\t\t//\t\tthis.values[key].push(val); // add value to range\n\t\t//\t    };\n\t    };\n\t    //console.log(\">>> Inserting:\",state.Utils.toString(doc));\n\t    rcnt=rcnt+1;\n\t    this.cnt=this.cnt+1;\n\t    //if (this.cnt < 10) { // debug purposes\n\t    state.Threshold.setGThr(state,doc);\n\t    doc.level=state.Threshold.getLevel(state,doc);\n\t    doc.lat=state.Threshold.getLat(state,doc);\n\t    doc.lon=state.Threshold.getLon(state,doc);\n\t    this.updateKeyCnt(state,\"lon\",doc.lon);\n\t    this.updateKeyCnt(state,\"lat\",doc.lat);\n\t    data.push(doc);\n\t}\n\treturn rcnt;\n    };\n    this.dbextract=function(state,showFunc) { // extract data from db and show\n\t// extract data from db and insert into data-array\n\tvar parent={};//{test:{$exists:false}};\n\tvar where = this.getWhere(state);\n\tvar m={};\n\tvar docs0=this.getCntDocs(state,where);\n\tvar nrec= docs0[0].cnt;\n\tstate.Matrix.cnt=nrec;\n\tif (nrec > state.Matrix.popSeries) { // only use counts...\n\t    state.Matrix.initKeyCnt(state);\n\t    state.Matrix.mapKeyCnt(state,where,nrec,state.Path.keys.other);\n\t    state.Matrix.mapKeyCnt(state,where,nrec,state.Path.keys.trash);\n\t    //console.log(\"Setup:\",\n\t    //\t    JSON.stringify(state.Matrix.values),\n\t    //\t    JSON.stringify(state.Matrix.keyCnt));\n\t    state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\t    state.Matrix.sortMatrixValues(state);\n\t    var docs=this.getCntDocs(state,where,state.Path.other.table);\n\t    //console.log(\"Count:\",sql,JSON.stringify(docs));\n\t    // add \"undefined\" range of keys that are not present in every doc...\n\t    state.Matrix.makeMatrixCnt(state,docs,m);\n\t} else {\n\t    console.log(\"Where:\",where);\n\t    var docs=this.getDocs(state,where); // get all docs\n\t    var dlen=docs.length;\n\t    //console.log(\">>>Extraction key (where='\",where,\"') Docs:\",dlen);\n\t    state.Matrix.initKeyCnt(state);\n\t    state.Matrix.mapKeys(state,docs);\n\t    state.Matrix.addMapKeys(state,docs);\n\t    //console.log(\"Setup=\",JSON.stringify(setup));\n\t    //console.log (\"Maprange:\",JSON.stringify(state.Matrix.values));\n\t    // subset contains the keys being displayed in matrix...\n\t    state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\t    state.Matrix.sortMatrixValues(state);\n\t    // make matrix\n\t    state.Matrix.makeMatrix(state,docs,m);\n\t    //console.log (\"Matrix:\",JSON.stringify(matrix));\n\t}\n\tshowFunc(state,m);\n    };\n    this.dbindex=function(state,ks) { // make indexes on all keys\n\tvar s=\"\";\n\tvar klen = ks.length;\n\tfor (var ii = 0; ii < klen; ii++) {\n\t    //alasql(\"CREATE INDEX ? ON TABLE alarm.?\",ks[ii],ks[ii]);\n\t    s=s+\" \"+ks[ii];\n\t};\n\t//console.log(\"Indexes:\",s);\n    };\n    this.getWhereDetail=function(key,val) {\n\tif (val  === undefined ||\n\t    val  === null ||\n\t    val  === \"\") {\n\t    return key +' is NULL';\n\t} else {\n\t    return key + '=\"'+val+'\"'\n\t};\n    };\n    this.getWhere=function(state) {\n\tvar where=\"\";\n\tvar plen = state.Path.keys.path.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=state.Path.keys.path[ii];\n\t    if (state.Path.select.where[key]  === undefined ||\n\t\tstate.Path.select.where[key]  === null ||\n\t\tstate.Path.select.where[key]  === \"\") {\n\t\tif (where !== \"\") { where = where +  ' AND ';};\n\t\twhere= where + key +' is NULL';\n\t    } else {\n\t\t//if (where !== \"\") { where = where +  ' AND ';};\n\t\t//where=where + key +'=\"'+state.Path.select.val[key]+'\"';\n\t\tif (where !== \"\") { where = where +  ' AND ';};\n\t\twhere=where + \"(\"+ state.Path.select.where[key]+\")\";\n\t    }\n\t};\n\tif (where !== \"\") {where=\" WHERE \"+where;}\n\t//console.log(\"Where=|\"+where+\"|\")\n\treturn where;\n    };\n    this.getGroup=function(keys) {\n\tvar group=\"\";\n\tvar plen = keys.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=keys[ii];\n\t    if (group !== \"\") { group = group +  ',';};\n\t    group= group + key;\n\t};\n\tif (group !== \"\") {group=\" GROUP BY \"+group;}\n\treturn group;\n    };\n    this.getCols=function(keys) {\n\tvar cols=\"\";\n\tvar plen = keys.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=keys[ii];\n\t    cols= cols + key;\n\t    if (cols !== \"\") { cols = cols +  ',';};\n\t};\n\treturn cols;\n    };\n    this.getAll=function(state) {\n\tvar cols=\"\";\n\tvar plen = state.Path.keys.other.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=state.Path.keys.other[ii];\n\t    cols= cols + key;\n\t    if (cols !== \"\") { cols = cols +  ',';};\n\t};\n\treturn cols;\n    };\n    this.getCntDocs=function(state,where,keys) {\n\tvar body=\"count(*) AS cnt, max(level) AS lev, max(lat) AS maxlat, min(lat) AS minlat, max(lon) AS maxlon, min(lon) AS minlon FROM alarm\";\n\tif (keys  === undefined) {\n\t    var sql=\"select \"+body+where;\n\t    var dd=alasql(sql);\n\t    //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n\t    console.log(\"Cnt:\",JSON.stringify(dd));\n\t    return dd;\n\t} else {\n\t    var cols = this.getCols(keys);\n\t    var group = this.getGroup(keys);\n\t    var sql=\"select \"+cols+body+\n    \t\twhere+group;\n\t    var dd=alasql(sql);\n\t    console.log(\"Cnt:\",JSON.stringify(dd));\n\t    return dd\n\t}\n    };\n    this.getDocs=function(state,where) {\n\tvar dd=alasql(\"select * FROM alarm\"+where);\n\treturn dd;\n    };\n    this.makeTable=function(state) {\n\talasql('DROP TABLE IF EXISTS alarm; CREATE TABLE alarm;');\n    };\n    this.dataToDb=function(state,data) {\n\talasql.tables.alarm.data = data;\n    };\n    this.getKeyCnt=function(state,key,where){\n\tvar sql=\"select \"+key+\",count(*) AS cnt FROM alarm\"+\n\t    where+\" GROUP BY \"+key;\n\treturn alasql(sql);\n    };\n    this.whatIsIt=function(object) { // determine object type\n\tif (object  === null) {\n\t    return \"null\";\n\t} else if (object.constructor  === this.arrayConstructor) {\n\t    return \"Array\";\n\t}\n\telse if (object.constructor  === this.objectConstructor) {\n\t    return \"Object\";\n\t}\n\telse {\n\t    return \"value\";\n\t}\n    };\n    this.getTimeDiff=function(state,dt) {\n\tvar s=\"\";\n\tif (dt  === undefined || isNaN(state,dt)) {return s;};\n\tvar msec=Math.abs(state,dt);\n\tvar dd = Math.floor(state,((state,(msec / 1000) / 60) / 60) / 24);\n\tmsec -= dd * 1000 * 60 * 60 * 24;\n\tvar hh = Math.floor(state,((state,msec / 1000) / 60) / 60);\n\tmsec -= hh * 1000 * 60 * 60;\n\tvar mm = Math.floor(state,(msec / 1000) / 60);\n\tmsec -= mm * 1000 * 60;\n\tvar ss = Math.floor(state,msec / 1000);\n\tmsec -= ss * 1000;\n\tif (dt<0) {\n\t    s=\"-\";\n\t} else if (dt > 0) {\n\t    s=\"+\";\n\t} else {\n\t    s=\"0\";\n\t}\n\tif (dd !== 0) s=s+\" \"+state.Utils.numberWithCommas(dd)+\"d\";\n\tif (hh !== 0) s=s+\" \"+hh+\"h\";\n\tif (mm !== 0) s=s+\" \"+mm+\"m\";\n\t//if (ss !== 0) s=s+\" \"+ss+\"s\";\n\treturn s;\n    }\n};\n\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}