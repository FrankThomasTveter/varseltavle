{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/MapComponent.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport DivIcon from 'react-leaflet-div-icon';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport homePageImg from '../images/homePageImg.png';\nimport Tooltip from './TooltipContainer'; //console.log(\"Inside Map.\")\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      flexGrow: 1\n    },\n    paper: {\n      padding: theme.spacing.unit * 2,\n      textAlign: 'left'\n    },\n    paperImage: {\n      textAlign: 'center',\n      padding: theme.spacing.unit * 2\n    },\n    homePageImg: {\n      maxWidth: '100%'\n    }\n  };\n};\n\nvar MapChart =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(MapChart, _Component);\n\n  function MapChart(props) {\n    var _this;\n\n    _classCallCheck(this, MapChart);\n\n    // Initialize the viewport to the one provided in props\n    _this.state = {\n      viewport: props.viewport\n    };\n    return _possibleConstructorReturn(_this);\n  }\n\n  _createClass(MapChart, [{\n    key: \"showMap\",\n    value: function showMap() {\n      console.log(\"Rebuilding Map.\");\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentWillReceiveProps\",\n    value: function componentWillReceiveProps(_ref) {\n      var viewport = _ref.viewport;\n\n      // When the provided viewport changes, apply it\n      if (viewport !== this.props.viewport) {\n        this.setState({\n          viewport: viewport\n        });\n      }\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(Map, {\n        onClick: this.onClickReset,\n        onViewportChanged: this.onViewportChanged,\n        viewport: this.state.viewport,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74\n        },\n        __self: this\n      }, \"...\");\n    }\n  }]);\n\n  return MapChart;\n}(Component);\n\nMapChart.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(MapChart);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapComponent.js"],"names":["React","Component","PropTypes","withStyles","Map","TileLayer","Marker","Popup","DivIcon","Paper","Grid","homePageImg","Tooltip","styles","theme","root","flexGrow","paper","padding","spacing","unit","textAlign","paperImage","maxWidth","MapChart","props","state","viewport","console","log","forceUpdate","setState","onClickReset","onViewportChanged","propTypes","classes","object","isRequired"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,SAASC,GAAT,EAAcC,SAAd,EAAyBC,MAAzB,EAAiCC,KAAjC,QAA8C,eAA9C;AACA,OAAOC,OAAP,MAAoB,wBAApB;AACA,OAAOC,KAAP,MAAkB,yBAAlB;AACA,OAAOC,IAAP,MAAiB,wBAAjB;AACA,OAAOC,WAAP,MAAwB,2BAAxB;AACA,OAAOC,OAAP,MAAqB,oBAArB,C,CACA;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,IAAI,EAAE;AACFC,MAAAA,QAAQ,EAAE;AADR,KADe;AAIrBC,IAAAA,KAAK,EAAE;AACHC,MAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAcC,IAAd,GAAqB,CAD3B;AAEHC,MAAAA,SAAS,EAAE;AAFR,KAJc;AAQrBC,IAAAA,UAAU,EAAE;AACRD,MAAAA,SAAS,EAAE,QADH;AAERH,MAAAA,OAAO,EAAEJ,KAAK,CAACK,OAAN,CAAcC,IAAd,GAAqB;AAFtB,KARS;AAYrBT,IAAAA,WAAW,EAAE;AACTY,MAAAA,QAAQ,EAAE;AADD;AAZQ,GAAL;AAAA,CAApB;;IA6BMC,Q;;;;;AACF,oBAAYC,KAAZ,EAA0B;AAAA;;AAAA;;AAC7B;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAEF,KAAK,CAACE;AADP,KAAb;AAF6B;AAKzB;;;;8BAES;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA,WAAKC,WAAL;AACI;;;oDAE8C;AAAA,UAAnBH,QAAmB,QAAnBA,QAAmB;;AAClD;AACA,UAAIA,QAAQ,KAAK,KAAKF,KAAL,CAAWE,QAA5B,EAAsC;AAClC,aAAKI,QAAL,CAAc;AAAEJ,UAAAA,QAAQ,EAARA;AAAF,SAAd;AACH;AACG;;;6BAYQ;AACZ,aACC,oBAAC,GAAD;AACU,QAAA,OAAO,EAAE,KAAKK,YADxB;AAEU,QAAA,iBAAiB,EAAE,KAAKC,iBAFlC;AAGU,QAAA,QAAQ,EAAE,KAAKP,KAAL,CAAWC,QAH/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eADD;AAQI;;;;EAvCkB1B,S;;AA0CvBuB,QAAQ,CAACU,SAAT,GAAqB;AACjBC,EAAAA,OAAO,EAAEjC,SAAS,CAACkC,MAAV,CAAiBC;AADT,CAArB;AAIA,eAAelC,UAAU,CAACU,MAAD,CAAV,CAAmBW,QAAnB,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { Map, TileLayer, Marker, Popup } from 'react-leaflet';\nimport DivIcon from 'react-leaflet-div-icon';\nimport Paper from '@material-ui/core/Paper';\nimport Grid from '@material-ui/core/Grid';\nimport homePageImg from '../images/homePageImg.png';\nimport Tooltip  from './TooltipContainer';\n//console.log(\"Inside Map.\")\n\n\nconst styles = theme => ({\n    root: {\n        flexGrow: 1,\n    },\n    paper: {\n        padding: theme.spacing.unit * 2,\n        textAlign: 'left',\n    },\n    paperImage: {\n        textAlign: 'center',\n        padding: theme.spacing.unit * 2,\n    },\n    homePageImg: {\n        maxWidth: '100%',\n    }\n});\ntype Viewport = {\n  center: [number, number],\n  zoom: number,\n}\n\ntype Props = {\n  viewport: Viewport,\n}\n\ntype State = {\n  viewport: Viewport,\n}\n\nclass MapChart extends Component<Props, State> {\n    constructor(props: Props) {\n\t// Initialize the viewport to the one provided in props\n\tthis.state = {\n\t    viewport: props.viewport,\n\t}\n    }\n    \n    showMap() {\n\tconsole.log(\"Rebuilding Map.\");\n\tthis.forceUpdate();\n    };\n    \n    componentWillReceiveProps({ viewport }: Props) {\n\t// When the provided viewport changes, apply it\n\tif (viewport !== this.props.viewport) {\n\t    this.setState({ viewport })\n\t}\n    }\n    \n    onClickReset = () => {\n\t// Reset to position provided in props\n\tthis.setState({ viewport: this.props.viewport })\n    }\n    \n    onViewportChanged = (viewport: Viewport) => {\n\t// The viewport got changed by the user, keep track in state\n\tthis.setState({ viewport })\n    }\n    \n    render() {\n\treturn (\n\t\t<Map\n            onClick={this.onClickReset}\n            onViewportChanged={this.onViewportChanged}\n            viewport={this.state.viewport}>\n\t\t...\n\t\t</Map>\n\t)\n    }\n}\n\nMapChart.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(MapChart);\n"]},"metadata":{},"sourceType":"module"}