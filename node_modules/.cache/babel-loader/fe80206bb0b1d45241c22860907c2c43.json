{"ast":null,"code":"import _objectWithoutProperties from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/TextComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    pointer: {\n      cursor: \"pointer\",\n      padding: theme.spacing.unit * 0\n    },\n    nopointer: {\n      padding: theme.spacing.unit * 0\n    }\n  };\n};\n\nfunction updateCanvas(item) {\n  var _item$props = item.props,\n      label = _item$props.label,\n      width = _item$props.width,\n      height = _item$props.height,\n      dw = _item$props.dw,\n      dh = _item$props.dh,\n      rotate = _item$props.rotate;\n  var cnv = item.refs.text;\n  var ctx = cnv.getContext('2d');\n  console.log(\"Text:\", label, width, height, dw, dh, rotate); //var cnvheight = cnv.height;\n\n  ctx.save(); //ctx.font = \"40px Courier\"\n\n  ctx.textAlign = \"left\"; //left right center\n\n  ctx.strokeStyle = 'black';\n  ctx.strokeRect(0, 0, width, height);\n\n  if (rotate !== undefined && rotate) {\n    ctx.translate(width - dw, height - dh);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText(label, 0, 0); // labelXposition\n  } else {\n    ctx.fillText(label, dw, height - dh); // labelXposition\n  }\n\n  ;\n  ctx.restore();\n} // dh dw height width rotate\n\n\nvar TextComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(TextComponent, _Component);\n\n  function TextComponent() {\n    _classCallCheck(this, TextComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(TextComponent).apply(this, arguments));\n  }\n\n  _createClass(TextComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          onclick = _this$props.onclick,\n          title = _this$props.title,\n          width = _this$props.width,\n          height = _this$props.height,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"onclick\", \"title\", \"width\", \"height\"]);\n\n      var cursor = classes.nopointer;\n\n      if (onclick !== undefined) {\n        cursor = classes.pointer;\n      }\n\n      return React.createElement(\"canvas\", Object.assign({}, other, {\n        className: cursor,\n        classes: classes,\n        onClick: onclick,\n        title: title,\n        ref: \"text\",\n        width: width,\n        height: height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return TextComponent;\n}(Component);\n\nTextComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(TextComponent); // function getTextWidth(txt, fontname, fontsize){\n//     if(getTextWidth.c === undefined){\n//         getTextWidth.c=document.createElement('canvas');\n//         getTextWidth.ctx=getTextWidth.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextWidth.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextWidth.ctx.measureText(txt).width;\n// };\n// function getTextHeight(fontname, fontsize){\n//     if(getTextHeight.c === undefined){\n//         getTextHeight.c=document.createElement('canvas');\n//         getTextHeight.ctx=getTextHeight.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextHeight.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextHeight.ctx.measureText('M').width;\n// }","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/TextComponent.js"],"names":["React","Component","PropTypes","withStyles","styles","theme","pointer","cursor","padding","spacing","unit","nopointer","updateCanvas","item","props","label","width","height","dw","dh","rotate","cnv","refs","text","ctx","getContext","console","log","save","textAlign","strokeStyle","strokeRect","undefined","translate","Math","PI","fillText","restore","TextComponent","classes","onclick","title","other","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    pointer: {\n\tcursor:\"pointer\",\n\tpadding: theme.spacing.unit*0,\n    },\n    nopointer: {\n\tpadding: theme.spacing.unit*0,\n    },\n});\n\nfunction updateCanvas(item) {\n    const {label,width,height,dw,dh,rotate} = item.props;\n    const cnv=item.refs.text;\n    const ctx = cnv.getContext('2d');\n    console.log(\"Text:\",label,width,height,dw,dh,rotate);\n    //var cnvheight = cnv.height;\n    ctx.save();\n    //ctx.font = \"40px Courier\"\n    ctx.textAlign = \"left\"; //left right center\n    ctx.strokeStyle='black';\n    ctx.strokeRect(0,0, width,height);\n    if (rotate !== undefined && rotate) {\n\tctx.translate(width-dw,height-dh);\n\tctx.rotate(-Math.PI/2);\n\tctx.fillText(label, 0, 0); // labelXposition\n    } else {\n\tctx.fillText(label, dw, height-dh); // labelXposition\n    };\n    ctx.restore();\n}\n    \n\n// dh dw height width rotate\nclass TextComponent extends Component {\n    componentDidMount() {\n        updateCanvas(this);\n    }\n    componentDidUpdate() {\n        updateCanvas(this);\n    }\n    render() {\n        const { classes, onclick, title, width, height, ...other } = this.props;\n\tvar cursor=classes.nopointer;\n\tif (onclick !== undefined) {\n\t    cursor=classes.pointer;\n\t}\n        return (\n\t\t<canvas {...other} className={cursor} classes={classes} onClick={onclick} title={title} ref=\"text\" width={width} height={height}/>\n        );\n    }\n}\n\nTextComponent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TextComponent);\n// function getTextWidth(txt, fontname, fontsize){\n//     if(getTextWidth.c === undefined){\n//         getTextWidth.c=document.createElement('canvas');\n//         getTextWidth.ctx=getTextWidth.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextWidth.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextWidth.ctx.measureText(txt).width;\n// };\n// function getTextHeight(fontname, fontsize){\n//     if(getTextHeight.c === undefined){\n//         getTextHeight.c=document.createElement('canvas');\n//         getTextHeight.ctx=getTextHeight.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextHeight.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextHeight.ctx.measureText('M').width;\n// }\n"]},"metadata":{},"sourceType":"module"}