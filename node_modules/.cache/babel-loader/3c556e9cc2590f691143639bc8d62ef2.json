{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/MapComponent.js\";\nimport React, { Component, useState, useEffect } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { teal_palette } from '../mui/metMuiThemes';\nimport ReactGlobe from 'react-globe';\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\nimport './styles.css';\nvar markerEvent = new Event(\"UpdateMarkersEvent\");\nvar event2 = new CustomEvent(\"UpdateMarkersEvent\", {\n  data: 1\n});\nvar footAndHeaderheight = \"100px\";\n\nfunction getTooltipContent(marker) {\n  //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere,JSON.stringify(marker.element));\n  return \"\".concat(marker.colwhere, \" \").concat(marker.rowwhere, \")\");\n}\n\nvar styles = function styles(theme) {\n  return {\n    content: {},\n    root: {\n      height: '100%',\n      padding: 0,\n      margin: 0,\n      border: '5px solid red'\n    },\n    dataset: {\n      overflow: 'hidden',\n      height: '100%'\n    },\n    map: {\n      overflow: 'hidden',\n      height: '100%'\n    }\n  };\n};\n\nfunction MapGlobe(props) {\n  var onClickMarker = props.onClickMarker,\n      onDefocus = props.onDefocus,\n      data = props.data; // Use State to keep the values\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      cnt = _useState2[0],\n      setCnt = _useState2[1];\n\n  var _useState3 = useState([]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      markers = _useState4[0],\n      setMarkers = _useState4[1];\n\n  function updateLoop(props) {\n    if (cnt !== props.data.cnt) {\n      //console.log(\"Checking...\",cnt,props.data.cnt);\n      setCnt(props.data.cnt);\n      setMarkers(props.data.markers);\n    }\n\n    setTimeout(function () {\n      updateLoop(props);\n    }, 1000);\n  }\n\n  ;\n  useEffect(function () {\n    updateLoop(props);\n  });\n  useEffect(function () {\n    setMarkers(props.data.markers);\n  }); //useEffect( ()=>{console.log(\"Setting Globe markers...\",props.data.cnt);setMarkers(props.data.markers);} ,[props.data.cnt] );\n\n  return React.createElement(ReactGlobe, {\n    markers: markers,\n    focus: [65, 15],\n    zoom: 2,\n    initialCoordinates: [65, 20],\n    onClickMarker: onClickMarker,\n    markerOptions: {\n      renderer: markerRenderer,\n      getTooltipContent: getTooltipContent\n    },\n    focusOptions: {\n      animationDuration: 500,\n      distanceRadiusScale: 1.75,\n      easingFunction: ['Cubic', 'In'],\n      enableAutoRotate: false,\n      enableClouds: false\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  });\n}\n\nvar EarthMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EarthMap, _Component);\n\n  function EarthMap(props) {\n    var _this;\n\n    _classCallCheck(this, EarthMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EarthMap).call(this, props));\n    var state = _this.props.state;\n    state.React.Map = _assertThisInitialized(_this);\n    _this._ismounted = false;\n    _this.elem = null;\n    _this.data = {\n      cnt: 0,\n      markers: []\n    };\n    return _this;\n  }\n\n  _createClass(EarthMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._ismounted = true;\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n    }\n  }, {\n    key: \"onClickMarker\",\n    value: function onClickMarker(marker, markerObject, event) {\n      //console.log(\"Clicked marker...\",marker.id)\n      var state = marker.state;\n      var colkey = marker.colkey;\n      var colrange = marker.colrange;\n      var colwhere = marker.colwhere;\n      var rowkey = marker.rowkey;\n      var rowrange = marker.rowrange;\n      var rowwhere = marker.rowwhere;\n      var cnt = marker.cnt; //state.Navigate.selectItemRange(state,colkey,rowkey,colrange,rowrange,colwhere,rowwhere,cnt,1);\n      // setEvent({\n      //   type: 'CLICK',\n      //   marker,\n      //   markerObjectID: markerObject.uuid,\n      //   pointerEventPosition: { x: event.clientX, y: event.clientY },\n      // });\n      //setDetails(getTooltipContent(marker));\n    }\n  }, {\n    key: \"onDefocus\",\n    value: function onDefocus(previousCoordinates, event) {//setEvent({\n      //  type: 'DEFOCUS',\n      //  previousCoordinates,\n      //  pointerEventPosition: { x: event.clientX, y: event.clientY },\n      //});\n      //setDetails(null);\n    }\n  }, {\n    key: \"showMap\",\n    value: function showMap(state) {\n      // dont re-render the globe... - only change the markers\n      console.log(\"Rendering markers...\");\n      this.getMarkers(state);\n      ; //this.data.markers=this.getMarkers(state);\n\n      this.data.cnt = this.data.cnt + 1;\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers(state) {\n      // get marker data\n      console.log(\"Setting map markers...\"); //var ll=this.markers.length;\n      //for (var ii=0; ii < ll; ii++) {\n      //    this.markers.splice(ii,1);\n      //};\n\n      this.data.markers.splice(0, this.data.markers.length);\n      var tcnt = 0;\n      var markers = []; //   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\n      var matrix = state.React.matrix;\n      var first = true;\n\n      if (matrix !== undefined) {\n        state.Matrix.printElements(matrix);\n        var colkey = state.Path.getColKey(state) || \"\";\n        var rowkey = state.Path.getRowKey(state) || \"\";\n        var colvalues = state.Path.filterKeys(state, state.Matrix.values[colkey] || [\"\"]);\n        var rowvalues = state.Path.filterKeys(state, state.Matrix.values[rowkey] || [\"\"]); //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n        //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n        //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n        // make markers\n\n        var rlen = rowvalues.length;\n\n        for (var ii = 0; ii < rlen; ii++) {\n          var rowval = rowvalues[ii];\n          var rowrange = state.Matrix.getLatRange(state, rowvalues[ii]);\n          var rowwhere = state.Matrix.getLatWhere(state, \"lat\", rowvalues[ii]);\n          var clen = colvalues.length;\n\n          for (var jj = 0; jj < clen; jj++) {\n            var colval = colvalues[jj];\n            var colrange = state.Matrix.getLonRange(state, colvalues[jj]);\n            var colwhere = state.Matrix.getLonWhere(state, \"lon\", colvalues[jj]);\n            var element = state.Matrix.getMatrixElement(colval, rowval, matrix);\n\n            if (element !== undefined) {\n              var lon = element.colval;\n              var lat = element.rowval;\n              var lev = element.maxlev;\n              var bgcolor = state.Colors.getLevelBgColor(lev);\n              var fgcolor = state.Colors.getLevelFgColor(lev);\n              var cnt = element.cnt;\n              tcnt = tcnt + 1;\n              var mark = {\n                id: tcnt,\n                coordinates: [lat, lon],\n                city: \"Test\",\n                value: 0,\n                element: element,\n                bgcolor: bgcolor,\n                fgcolor: fgcolor,\n                state: state,\n                colkey: \"lon\",\n                colrange: colrange,\n                colwhere: colwhere,\n                rowkey: \"lat\",\n                rowrange: rowrange,\n                rowwhere: rowwhere,\n                cnt: cnt\n              };\n\n              if (first) {\n                first = false; //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n              } //markers.push(mark);\n\n\n              this.data.markers.push(mark);\n            }\n          }\n        }\n      } // make markers\n      // set markers\n\n\n      console.log(\"Markers:\", this.data.markers.length); //this.globeref.setMarkers(markers);\n      //state.React.Map.setState({markers:this.markers});\n\n      return markers;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state,\n          markers = _this$props.markers;\n      console.log(\"Rendering map...\"); //this.setMarkers(state);\n\n      var data = {\n        cnt: this.cnt,\n        markers: this.markers\n      };\n\n      var assign = function assign(elem) {\n        _this2.elem = elem;\n        console.log(\"Element...\");\n      };\n\n      return React.createElement(\"div\", {\n        className: classes.root,\n        style: {\n          position: 'fixed',\n          marginLeft: '0%',\n          width: '90%',\n          height: 'calc(95% - ' + footAndHeaderheight + ')',\n          overflow: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 208\n        },\n        __self: this\n      }, React.createElement(MapGlobe, {\n        onClickMarker: this.onClickMarker,\n        onDefocus: this.onDefocus,\n        data: this.data,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 210\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EarthMap;\n}(Component);\n\nEarthMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EarthMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapComponent.js"],"names":["React","Component","useState","useEffect","PropTypes","withStyles","teal_palette","ReactGlobe","defmarkers","markerRenderer","markerEvent","Event","event2","CustomEvent","data","footAndHeaderheight","getTooltipContent","marker","colwhere","rowwhere","styles","theme","content","root","height","padding","margin","border","dataset","overflow","map","MapGlobe","props","onClickMarker","onDefocus","cnt","setCnt","markers","setMarkers","updateLoop","setTimeout","renderer","animationDuration","distanceRadiusScale","easingFunction","enableAutoRotate","enableClouds","EarthMap","state","Map","_ismounted","elem","window","addEventListener","updateWindowDimensions","markerObject","event","colkey","colrange","rowkey","rowrange","previousCoordinates","console","log","getMarkers","splice","length","tcnt","matrix","first","undefined","Matrix","printElements","Path","getColKey","getRowKey","colvalues","filterKeys","values","rowvalues","rlen","ii","rowval","getLatRange","getLatWhere","clen","jj","colval","getLonRange","getLonWhere","element","getMatrixElement","lon","lat","lev","maxlev","bgcolor","Colors","getLevelBgColor","fgcolor","getLevelFgColor","mark","id","coordinates","city","value","push","classes","assign","position","marginLeft","width","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component, useState, useEffect} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport ReactGlobe from 'react-globe';\n\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\n\nimport './styles.css';\n\nconst markerEvent=new Event(\"UpdateMarkersEvent\");\n\nconst event2=new CustomEvent(\"UpdateMarkersEvent\",{data:1});\nconst footAndHeaderheight = \"100px\";\n\nfunction getTooltipContent(marker) {\n    //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere,JSON.stringify(marker.element));\n  return `${marker.colwhere} ${marker.rowwhere})`;\n}\n\nconst styles = theme => ({\n    content: {},\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '5px solid red'\n    },\n    dataset: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n    map: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n});\n\n\nfunction MapGlobe(props) {\n    const {onClickMarker,onDefocus,data} = props;\n    // Use State to keep the values\n    const [cnt, setCnt] = useState(0);\n    const [markers, setMarkers] = useState([]);\n    function updateLoop(props) {\n\tif (cnt !== props.data.cnt) {\n\t    //console.log(\"Checking...\",cnt,props.data.cnt);\n\t    setCnt(props.data.cnt);\n\t    setMarkers(props.data.markers);\n\t}\n\tsetTimeout(function() {\n\t    updateLoop(props)\n\t},1000);\n    };\n    useEffect( ()=>{updateLoop(props)} );\n    useEffect( ()=>{setMarkers(props.data.markers);} );\n    //useEffect( ()=>{console.log(\"Setting Globe markers...\",props.data.cnt);setMarkers(props.data.markers);} ,[props.data.cnt] );\n    return <ReactGlobe\n                markers={markers}\n                focus={[65,15]} \n                zoom={2} \n                initialCoordinates={[65,20]}\n                onClickMarker={onClickMarker}\n                markerOptions={{renderer: markerRenderer,\n                                getTooltipContent:getTooltipContent,  \n                               }}\n                focusOptions={{\n                    animationDuration: 500, \n                    distanceRadiusScale: 1.75,\n                    easingFunction: ['Cubic', 'In'],\n\t            enableAutoRotate:false,\n\t\t    enableClouds:false,\n                }}\n\t/>\n}\nclass EarthMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state}=this.props;\n\tstate.React.Map=this;\n\tthis._ismounted = false;\n\tthis.elem=null;\n\tthis.data={cnt:0,markers:[]};\n    };\t\n    componentDidMount() { \n\tthis._ismounted = true;\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    };\n    componentWillUnmount() {\n\tthis._ismounted = false;\n    };\n    onClickMarker(marker, markerObject, event) {\n\t//console.log(\"Clicked marker...\",marker.id)\n\tvar state=marker.state;\n\tvar colkey=marker.colkey;\n\tvar colrange=marker.colrange;\n\tvar colwhere=marker.colwhere;\n\tvar rowkey=marker.rowkey;\n\tvar rowrange=marker.rowrange;\n\tvar rowwhere=marker.rowwhere;\n\tvar cnt=marker.cnt;\n\t//state.Navigate.selectItemRange(state,colkey,rowkey,colrange,rowrange,colwhere,rowwhere,cnt,1);\n\t// setEvent({\n\t//   type: 'CLICK',\n\t//   marker,\n\t//   markerObjectID: markerObject.uuid,\n\t//   pointerEventPosition: { x: event.clientX, y: event.clientY },\n\t// });\n\t//setDetails(getTooltipContent(marker));\n    };\n    onDefocus(previousCoordinates, event){\n\t//setEvent({\n\t//  type: 'DEFOCUS',\n\t//  previousCoordinates,\n\t//  pointerEventPosition: { x: event.clientX, y: event.clientY },\n\t//});\n\t//setDetails(null);\n    };\n    showMap(state) {\n\t// dont re-render the globe... - only change the markers\n\tconsole.log(\"Rendering markers...\");\n\tthis.getMarkers(state);;//this.data.markers=this.getMarkers(state);\n\tthis.data.cnt=this.data.cnt+1;\n    };\n    getMarkers(state) {\n\t// get marker data\n\tconsole.log(\"Setting map markers...\");\n\t//var ll=this.markers.length;\n\t//for (var ii=0; ii < ll; ii++) {\n\t//    this.markers.splice(ii,1);\n\t//};\n\tthis.data.markers.splice(0,this.data.markers.length);\n\tvar tcnt=0;\n\tvar markers=[];//   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\tvar matrix=state.React.matrix;\n\tvar first=true;\n\tif (matrix !== undefined) {\n\t    state.Matrix.printElements(matrix);\n\t    var colkey = state.Path.getColKey(state)||\"\";\n\t    var rowkey = state.Path.getRowKey(state)||\"\";\n\t    var colvalues = state.Path.filterKeys(state,state.Matrix.values[colkey]||[\"\"]);\n\t    var rowvalues = state.Path.filterKeys(state,state.Matrix.values[rowkey]||[\"\"]);\n\t    //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n\t    //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n\t    //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n            // make markers\n            var rlen=rowvalues.length;\n            for(var ii=0; ii<rlen; ii++) {\n\t\tvar rowval=rowvalues[ii];\n\t\tvar rowrange=state.Matrix.getLatRange(state,rowvalues[ii]);\n\t\tvar rowwhere = state.Matrix.getLatWhere(state,\"lat\",rowvalues[ii]);\n\t\tvar clen=colvalues.length;\n\t\tfor(var jj=0; jj<clen; jj++) {\n\t\t    var colval=colvalues[jj];\n\t\t    var colrange=state.Matrix.getLonRange(state,colvalues[jj]);\n\t\t    var colwhere = state.Matrix.getLonWhere(state,\"lon\",colvalues[jj]);\n\t\t    var element=state.Matrix.getMatrixElement(colval,rowval,matrix);\n\t\t    if (element !== undefined) {\n\t\t\tvar lon=element.colval;\n\t\t\tvar lat=element.rowval;\n\t\t\tvar lev=element.maxlev;\n\t\t\tvar bgcolor=state.Colors.getLevelBgColor(lev);\n\t\t\tvar fgcolor=state.Colors.getLevelFgColor(lev);\n\t\t\tvar cnt=element.cnt;\n\t\t\ttcnt=tcnt+1;\n\t\t\tvar mark={id:tcnt,\n\t\t\t\t  coordinates:[lat,lon],\n\t\t\t\t  city:\"Test\",\n\t\t\t\t  value:0,\n\t\t\t\t  element:element,\n\t\t\t\t  bgcolor:bgcolor,\n\t\t\t\t  fgcolor:fgcolor,\n\t\t\t\t  state:state,\n\t\t\t\t  colkey:\"lon\",\n\t\t\t\t  colrange:colrange,\n\t\t\t\t  colwhere:colwhere,\n\t\t\t\t  rowkey:\"lat\",\n\t\t\t\t  rowrange:rowrange,\n\t\t\t\t  rowwhere:rowwhere,\n\t\t\t\t  cnt:cnt\n\t\t\t\t };\n\t\t\tif (first) {\n\t\t\t    first=false;\n\t\t\t    //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n\t\t\t}\n\t\t\t//markers.push(mark);\n\t\t\tthis.data.markers.push(mark);\n\t\t    }\n\t\t}\n\t    }\n\t}\n\t// make markers\n\t// set markers\n\tconsole.log(\"Markers:\",this.data.markers.length);\n\t//this.globeref.setMarkers(markers);\n\t//state.React.Map.setState({markers:this.markers});\n\treturn markers;\n    };\n    render() {\n\tconst { classes, state, markers } = this.props;\n\tconsole.log(\"Rendering map...\");\n\t//this.setMarkers(state);\n\tconst data={cnt:this.cnt,markers:this.markers};\n\tconst assign= (elem) => {this.elem = elem;console.log(\"Element...\");};\n\treturn (<div className={classes.root}\n\t         style={{position:'fixed', marginLeft:'0%',width: '90%', height: 'calc(95% - '+footAndHeaderheight+')',overflow:'hidden'}} >\n\t\t   <MapGlobe onClickMarker={this.onClickMarker} onDefocus={this.onDefocus} data={this.data}/>\n\t      </div>\n\t     );\n    }\n}\n\nEarthMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EarthMap);\n"]},"metadata":{},"sourceType":"module"}