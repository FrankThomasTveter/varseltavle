{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/CellTooltip.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ReactTooltip from 'react-tooltip';\nimport Button from '@material-ui/core/Button';\nimport InfoIcon from '@material-ui/icons/Info';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\nvar styles = function styles(theme) {\n  return {\n    button: {\n      color: 'white',\n      \"&$buttonDisabled\": {\n        color: theme.palette.primary.main\n      }\n    },\n    buttonDisabled: {}\n  };\n};\n\nvar CellTooltip =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CellTooltip, _Component);\n\n  function CellTooltip() {\n    _classCallCheck(this, CellTooltip);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CellTooltip).apply(this, arguments));\n  }\n\n  _createClass(CellTooltip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state; //console.log(\"##### Rendering CellTooltip.\");\n\n      return React.createElement(ReactTooltip, {\n        id: \"cell\",\n        getContent: function getContent(data) {\n          if (data == null) {\n            return null;\n          } else {\n            var d = JSON.parse(data);\n            console.log(\"Tooltip:\", JSON.stringify(data), JSON.stringify(d));\n            return React.createElement(\"div\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            }, React.createElement(\"h3\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 32\n              },\n              __self: this\n            }, \"Rowkey: \", d.rowkey, \" Colkey: \", d.colkey), React.createElement(\"p\", {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 33\n              },\n              __self: this\n            }, \"Put mouse here\"), React.createElement(Button, {\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 34\n              },\n              __self: this\n            }, \"More information\"));\n          }\n\n          ;\n        },\n        effect: \"solid\",\n        delayHide: 500,\n        delayShow: 200,\n        delayUpdate: 500,\n        place: 'bottom',\n        border: true,\n        type: 'light',\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }); // {console.log(\"Datatip:\",dataTip);\n      //\t\t\t\t  \n    }\n  }]);\n\n  return CellTooltip;\n}(Component);\n\n;\nCellTooltip.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CellTooltip);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/CellTooltip.js"],"names":["React","Component","PropTypes","withStyles","ReactTooltip","Button","InfoIcon","CancelIcon","styles","theme","button","color","palette","primary","main","buttonDisabled","CellTooltip","props","classes","state","data","d","JSON","parse","console","log","stringify","rowkey","colkey","propTypes","object","isRequired"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,YAAP,MAAyB,eAAzB;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,QAAP,MAAqB,yBAArB;AACA,OAAOC,UAAP,MAAuB,2BAAvB;;AAGA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,MAAM,EAAE;AACXC,MAAAA,KAAK,EAAC,OADK;AAEX,0BAAoB;AACTA,QAAAA,KAAK,EAAEF,KAAK,CAACG,OAAN,CAAcC,OAAd,CAAsBC;AADpB;AAFT,KADa;AAOrBC,IAAAA,cAAc,EAAE;AAPK,GAAL;AAAA,CAApB;;IAWMC,W;;;;;;;;;;;;;6BACO;AAAA,wBACe,KAAKC,KADpB;AAAA,UACJC,OADI,eACJA,OADI;AAAA,UACKC,KADL,eACKA,KADL,EAEZ;;AACA,aAAQ,oBAAC,YAAD;AAAc,QAAA,EAAE,EAAC,MAAjB;AACP,QAAA,UAAU,EAAE,oBAACC,IAAD,EAAS;AAAC,cAAIA,IAAI,IAAE,IAAV,EAAgB;AAClC,mBAAO,IAAP;AACH,WAFqB,MAEf;AACH,gBAAMC,CAAC,GAACC,IAAI,CAACC,KAAL,CAAWH,IAAX,CAAR;AACAI,YAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAuBH,IAAI,CAACI,SAAL,CAAeN,IAAf,CAAvB,EAA4CE,IAAI,CAACI,SAAL,CAAeL,CAAf,CAA5C;AACA,mBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAAK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2BAAaA,CAAC,CAACM,MAAf,eAAgCN,CAAC,CAACO,MAAlC,CAAL,EACP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gCADO,EAEP,oBAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kCAFO,CAAR;AAGH;;AAAA;AACO,SAVD;AAYP,QAAA,MAAM,EAAC,OAZA;AAaP,QAAA,SAAS,EAAE,GAbJ;AAcP,QAAA,SAAS,EAAE,GAdJ;AAeP,QAAA,WAAW,EAAE,GAfN;AAgBP,QAAA,KAAK,EAAE,QAhBA;AAiBP,QAAA,MAAM,EAAE,IAjBD;AAkBP,QAAA,IAAI,EAAE,OAlBC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAR,CAHY,CAuBZ;AACA;AACI;;;;EA1BqB3B,S;;AA2BzB;AACDe,WAAW,CAACa,SAAZ,GAAwB;AACpBX,EAAAA,OAAO,EAAEhB,SAAS,CAAC4B,MAAV,CAAiBC;AADN,CAAxB;AAIA,eAAe5B,UAAU,CAACK,MAAD,CAAV,CAAmBQ,WAAnB,CAAf","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ReactTooltip from 'react-tooltip'\nimport Button from '@material-ui/core/Button';\n\nimport InfoIcon from '@material-ui/icons/Info';\nimport CancelIcon from '@material-ui/icons/Cancel';\n\n\nconst styles = theme => ({\n    button: {\n\tcolor:'white',\n\t\"&$buttonDisabled\": {\n            color: theme.palette.primary.main,\n\t},\n    },\n    buttonDisabled: {},\n});\n\n\nclass CellTooltip extends Component {\n    render() {\n\tconst { classes, state } = this.props;\n\t//console.log(\"##### Rendering CellTooltip.\");\n\treturn (<ReactTooltip id='cell' \n\t\tgetContent={(data) =>{if (data==null) {\n\t\t    return null;\n\t\t} else {\n\t\t    const d=JSON.parse(data);\n\t\t    console.log(\"Tooltip:\",JSON.stringify(data),JSON.stringify(d));\n\t\t    return (<div><h3>Rowkey: {d.rowkey} Colkey: {d.colkey}</h3>\n\t\t\t    <p>Put mouse here</p>\n\t\t\t    <Button>More information</Button></div>);\n\t\t};\n\t\t\t\t     }\n\t\t\t   }\n\t\teffect='solid'\n\t\tdelayHide={500}\n\t\tdelayShow={200}\n\t\tdelayUpdate={500}\n\t\tplace={'bottom'}\n\t\tborder={true}\n\t\ttype={'light'}\n\t\t/>);\n\t// {console.log(\"Datatip:\",dataTip);\n\t//\t\t\t\t  \n    };\n};\nCellTooltip.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CellTooltip);\n"]},"metadata":{},"sourceType":"module"}