{"ast":null,"code":"//console.log(\"Loading DatabaseLib.js\");\nvar alasql = window.alasql;\n\nfunction Database() {\n  var ret;\n  this.datdir = \"data/\"; // json data file\n\n  this.datfile = \"1.json\"; // json data file\n\n  this.cnt = 0;\n  this.keyCnt = {};\n  this.values = {};\n  this.epoch0 = 0;\n  this.regfile = \"register\"; // register file (shows current datfile)\n\n  this.arrayConstructor = [].constructor;\n  this.objectConstructor = {}.constructor;\n  this.casc = 0; // key is sorted ascending\n\n  this.cdes = 1; // key is sorted descending\n\n  this.nasc = 2; // key is sorted ascending\n\n  this.ndes = 3; // key is sorted descending\n\n  this.delay = 60000; // server-polling period in ms\n\n  this.ready = true; // can we poll server or is another poll running\n\n  this.log = \"\";\n  this.mod = \"\";\n  this.keytrg = {\n    Missing: -1,\n    Null: 0,\n    Value: 1,\n    Min: 2,\n    Max: 3\n  };\n\n  this.init = function (state) {\n    state.Default.init(state);\n    state.Colors.init(state);\n    state.Path.init(state);\n    state.Layout.init(state);\n    state.Threshold.init(state);\n    state.Utils.init(\"Database\", this);\n  };\n\n  this.update = function (state) {\n    //console.log(\"Updating database...\");\n    this.setTime(state);\n    this.load(state);\n    setTimeout(function () {\n      state.Database.update(state);\n    }, state.Database.delay); //state.Database.delay\n  };\n\n  this.load = function (state) {\n    console.log(\"Database load number:\", ++this.cnt);\n    state.Default.loadDefault(state, [state.Default.processDefault, state.Database.loadRegister, state.Database.loadData, state.Database.processData]);\n  };\n\n  this.loadRegister = function (state, response, callbacks) {\n    var path = state.Database.datdir + state.Database.regfile;\n    console.log(\"Database loadRegister:\", path);\n    state.File.load(state, path, callbacks);\n  };\n\n  this.loadData = function (state, response, callbacks) {\n    var file = response; // register-response is the name of the data-file\n\n    console.log(\"Database loadData:\", file);\n\n    if (file !== state.Database.datfile) {\n      // load new data\n      state.Database.datfile = file;\n      var path = state.Database.datdir + state.Database.datfile;\n      state.File.load(state, path, callbacks);\n    }\n  };\n\n  this.processData = function (state, response, callbacks) {\n    //console.log(\"Database processData.\");\n    setTimeout(function () {\n      try {\n        var json = JSON.parse(response);\n      } catch (e) {\n        alert(\"Data '\" + state.Database.datfile + \"' contains Invalid JSON:\" + e.name + \":\" + e.message);\n      }\n\n      if (json !== undefined) {\n        state.Database.dbInsert(state, json);\n        state.Html.setFootnote(state, \"Extracting data.\");\n        setTimeout(function () {\n          state.Database.makeWhere(state); // update where-expressions...\n\n          state.Show.showAll(state);\n          state.Html.setFootnote(state);\n          state.File.next(state, \"\", callbacks);\n        }, 0.1);\n      }\n    }, 0.1);\n  };\n\n  this.getTime = function (state, s) {\n    var nn = s.match(/\\d+/g).map(Number);\n    var date0 = new Date(Date.UTC(nn[0], nn[1] - 1, nn[2], nn[3], nn[4], nn[5], ((nn[6] || '') + '000').slice(0, 3))); // modification time\n    //console.log(\"Gettime:\",s,JSON.stringify(nn));\n\n    return date0.getTime();\n  };\n\n  this.setTime = function (state) {\n    var d = new Date();\n    var epoch = d.getTime(); //console.log(\"Times:\",epoch,this.epoch0);\n\n    if (this.epoch0 !== undefined) {\n      var age = epoch - this.epoch0;\n      this.mod = this.getTimeDiff(state, age);\n\n      if (state.React !== undefined && state.React.Status !== undefined) {\n        state.React.Status.setAge(state, this.mod); //console.log(\"Age:\",epoch,this.epoch0,age);\n      }\n    }\n  };\n\n  this.getKeyValues = function (state, key) {\n    //console.log(\"Database:\",JSON.stringify(state.Database.values));\n    var vals = state.Database.values[key];\n\n    if (vals !== undefined) {\n      return vals;\n    } else {\n      return [];\n    }\n  };\n\n  this.getKeytrg = function (state, key, val) {\n    if (Array.isArray(val)) {\n      //console.log(\">>>Is array:\",key,JSON.stringify(val));\n      ret = this.keytrg.Missing;\n      var lenv = val.length;\n\n      for (var ii = 0; ii < lenv; ii++) {\n        ret = Math.max(ret, this.getKeytrg(state, key, val[ii]));\n      } //console.log(\">>>return:\",key,ret);\n\n    } else {\n      if (val === \"null\") {\n        ret = this.keytrg.Null;\n      } else if (val === \"MIN(\" + key + \")\") {\n        // this is a function\n        ret = this.keytrg.Min;\n      } else if (val === \"MAX(\" + key + \")\") {\n        // this is a function\n        ret = this.keytrg.Max;\n      } else if (val === undefined) {\n        ret = this.keytrg.Missing;\n      } else if (val === null) {\n        ret = this.keytrg.Null;\n      } else {\n        ret = this.keytrg.Value;\n      }\n\n      ; //console.log(\"---return:\",key,ret);\n    }\n\n    ;\n    return ret;\n  };\n\n  this.makeKeytrg = function (state, key, keytrg, val) {\n    if (keytrg === this.keytrg.Missing) {\n      return \"missing\";\n    } else if (keytrg === this.keytrg.Null) {\n      return \"null\";\n    } else if (keytrg === this.keytrg.Min) {\n      return \"MIN(\" + key + \")\";\n    } else if (keytrg === this.keytrg.Max) {\n      return \"MAX(\" + key + \")\";\n    } else {\n      return val;\n    }\n\n    ;\n  };\n\n  this.dbInsert = function (state, json) {\n    var ii, key;\n\n    try {\n      // set home\n      var len = json.data.length;\n\n      for (ii = 0; ii < len; ii++) {\n        json.data[ii][\"cnt\"] = ii;\n      } // get modified date\n      //console.log(\"Setting time.\");\n\n\n      this.epoch0 = this.getTime(state, json.epoch); // data file time\n\n      this.setTime(state); // data file time\n      // make database for raw data\n\n      this.makeTable(state); // reset key counts and range\n\n      this.cnt = 0;\n      this.keyCnt = {}; // reset key-count\n      // put data into databse\n      //console.log(\"inserting\");\n\n      var data = [];\n      var home = state.Path.home.val;\n      var hkeys = Object.keys(home);\n      var homeKeys = [];\n      var delayKeys = [];\n      var lenh = hkeys.length;\n\n      for (ii = 0; ii < lenh; ii++) {\n        key = hkeys[ii];\n        var keytrg = this.getKeytrg(state, key, home[key]); //console.log(\"Keytrg:\",key,keytrg,JSON.stringify(home[key]));\n\n        if (keytrg <= this.keytrg.Value) {\n          homeKeys.push(key);\n        } else {\n          delayKeys.push(key);\n        }\n      } //console.log(\"Home keys:\",JSON.stringify(homeKeys),\" delayed:\",JSON.stringify(delayKeys));\n\n\n      var rcnt = this.extractData(state, data, {}, \"\", json.data, homeKeys, home); //console.log(\"Count:\",rcnt);\n      //console.log(\"Data:\",JSON.stringify(data));\n\n      this.dataToDb(state, data);\n      var nrec = this.sanityCheck(state); // sanity check\n\n      console.log(\"Initially:\", data.length, \" Extracted:\", rcnt, ' Database:', nrec);\n      this.postProcess(state); // update distinct Database.values[key]\n\n      if (delayKeys.length > 0) {\n        // delayed home selection (MAX() and MIN())\n        this.makeWhere(state, delayKeys, home);\n        var where = this.getWhere(state, delayKeys, home);\n        var docs = this.getDocs(state, where);\n        this.dataToDb(state, docs);\n        this.postProcess(state); // update distinct Database.values[key]\n      }\n\n      ;\n      state.Path.makePath(state); // initialise path\n      //console.log(\"Indexing and cleaning up.\");\n\n      this.dbindex(state, state.Path.other.table); // make indexes\n\n      this.dbindex(state, state.Path.other.rest); // make indexes\n      //state.Path.checkTableKeys(state);\n\n      state.Html.broadcast(state, \"Database is ready.\"); //console.log(\"Database is ready.\");\n    } catch (e) {\n      alert(\"Db-insert error:\" + e);\n    }\n\n    ;\n  };\n\n  this.updateKeyCnt = function (state, key, val) {\n    if (this.keyCnt[key] === undefined) {\n      this.keyCnt[key] = {\n        cnt: 0,\n        type: \"num\",\n        order: this.nasc\n      };\n    }\n\n    this.keyCnt[key].cnt = this.keyCnt[key].cnt + 1;\n\n    if (this.keyCnt[key].type === \"num\" && isNaN(val)) {\n      this.keyCnt[key].type = \"nan\";\n      this.keyCnt[key].order = this.casc;\n    }\n  };\n\n  this.postProcess = function (state) {\n    // update meta-data\n    var keys = Object.keys(state.Database.keyCnt);\n    var lenk = keys.length;\n\n    for (var ii = 0; ii < lenk; ii++) {\n      var key = keys[ii]; // make list of values in Database for each key\n\n      state.Database.values[key] = [];\n      var sql = \"select DISTINCT \" + key + \" AS \" + key + \" FROM alarm\";\n      var dd0 = this.query(sql);\n      var lend = dd0.length;\n\n      for (var jj = 0; jj < lend; jj++) {\n        var doc = dd0[jj];\n        state.Database.values[key].push(doc[key]);\n      }\n\n      ;\n    }\n\n    ;\n  };\n\n  this.extractData = function (state, data, parent, key, raw, hkeys, home) {\n    // insert records into db (recursive)\n    var rcnt = 0;\n    var kk, ii, kii, child, dkey; //console.log(\"Processing {\",state.Utils.toString(parent),\"} '\",key,\"' (\",state.Utils.toString(raw),\")\");\n\n    var wii = this.whatIsIt(raw);\n\n    if (wii === \"Object\" && key === \"\") {\n      //console.log(\"Found object (\",state.Utils.toString(parent),\")\");\n      child = state.Utils.cp(parent); // loop over plain values first\n\n      for (kk in raw) {\n        kii = this.whatIsIt(raw[kk]);\n\n        if (kii === \"value\") {\n          child[kk] = raw[kk];\n        }\n      } // loop over sub-objects\n\n\n      var nn = 0;\n\n      for (kk in raw) {\n        kii = this.whatIsIt(raw[kk]);\n\n        if (kii !== \"value\") {\n          nn = nn + 1;\n          rcnt = rcnt + this.extractData(state, data, child, kk, raw[kk], hkeys, home);\n        }\n      }\n\n      if (nn === 0) {\n        // insert \n        //console.log(\"Object was empty.\");\n        rcnt = rcnt + this.extractData(state, data, child, null, null, hkeys, home);\n      }\n    } else if (wii === \"Object\" && key !== \"\") {\n      //console.log(\"Found object key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n      child = state.Utils.cp(parent); // loop over plain values first\n\n      for (kk in raw) {\n        child[key] = kk;\n        rcnt = rcnt + this.extractData(state, data, child, \"\", raw[kk], hkeys, home);\n      }\n    } else if (wii === \"Array\") {\n      //console.log(\"Found array key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n      var dlen = raw.length;\n\n      for (ii = 0; ii < dlen; ii++) {\n        rcnt = rcnt + this.extractData(state, data, parent, key, raw[ii], hkeys, home);\n      }\n    } else {\n      //console.log(\"Found key '\",key,\"' \",wii,\" (\",state.Utils.toString(parent),\")\");\n      var keep = true;\n      var doc = state.Utils.cp(parent);\n\n      if (raw !== null) {\n        if (key === \"\") {\n          doc.value = raw;\n        } else {\n          doc[key] = raw;\n        }\n      } // check if home criteria is met\n\n\n      var lenh = hkeys.length;\n\n      for (ii = 0; ii < lenh; ii++) {\n        key = hkeys[ii];\n        var vals = home[key];\n        var lenv = vals.length;\n        var found = false;\n\n        for (var jj = 0; jj < lenv; jj++) {\n          if (vals[jj] === doc[key] || vals[jj] === \"\" && doc[key] === undefined) {\n            found = true;\n          }\n        }\n\n        if (!found) {\n          keep = false;\n        }\n\n        ;\n      }\n\n      if (keep) {\n        //console.log(\"Updating internal raw structure\",JSON.stringify(setup));\n        for (dkey in doc) {\n          var val = doc[dkey];\n          this.updateKeyCnt(state, dkey, val); //// this takes too much time...\n          //if (this.values[dkey]  === undefined) {\n          //\tthis.values[dkey]=[];\n          //  };\n          ////console.log(\"Setup:\",JSON.stringify(setup));\n          ////console.log(\"Key:\",key,JSON.stringify(this.values));\n          //if (this.values[dkey].indexOf(val)  === -1 ) { // value not in range\n          //    this.values[dkey].push(val); // add value to range\n          //};\n        }\n\n        ; //console.log(\">>> Inserting:\",state.Utils.toString(doc));\n\n        rcnt = rcnt + 1;\n        this.cnt = this.cnt + 1;\n        state.Threshold.setThresholds(doc);\n        doc._title = state.Layout.makeDocTitle(state, doc); //if (this.cnt < 10) { // debug purposes\n        //for (key in keys) {\n        //this.updateKeyCnt(state,key,doc[key]);\n        //};\n\n        data.push(doc); //} else {\n        //console.log(\"Ignoring:\",lenh,JSON.stringify(hkeys),JSON.stringify(home),JSON.stringify(doc));\n      }\n    }\n\n    return rcnt;\n  };\n\n  this.dbextract = function (state, showFunc) {\n    // extract data from db and show\n    // extract data from db and insert into data-array\n    // var parent={};//{test:{$exists:false}};\n    var where = this.getWhere(state);\n    var cntDocs0 = this.getDocsCnt(state, where);\n    var nrec = cntDocs0.length === 0 ? 0 : cntDocs0[0].cnt;\n    var m = {};\n    state.Matrix.cnt = nrec;\n\n    if (nrec > state.Matrix.popSeries) {\n      // only use counts...\n      state.Matrix.initKeyCnt(state);\n      var buff = [];\n      state.Utils.cpArray(buff, state.Path.keys.path);\n      state.Utils.cpArray(buff, state.Path.keys.other);\n      state.Utils.cpArray(buff, state.Path.trash);\n      state.Matrix.mapKeyCnt(state, where, nrec, buff); //console.log(\"Setup:\",\n      //\t    JSON.stringify(state.Matrix.values),\n      //\t    JSON.stringify(state.Matrix.keyCnt));\n\n      state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\n      state.Matrix.sortMatrixValues(state); //console.log(\"Count:\",JSON.stringify(docs));\n      // add \"undefined\" range of keys that are not present in every doc...\n\n      var cntDocs = state.Database.getDocsCnt(state, where, state.Path.other.table);\n      state.Matrix.makeMatrixCnt(state, cntDocs, m);\n    } else {\n      //console.log(\"Database where:\",where);\n      var docs = this.getDocs(state, where); // get all docs\n      //console.log(\">>>Extraction key (where='\",where,\"') Docs:\",docs.length);\n\n      state.Matrix.initKeyCnt(state);\n      state.Matrix.mapKeys(state, docs);\n      state.Matrix.addMapKeys(state, docs); //console.log(\"Setup=\",JSON.stringify(setup));\n      //console.log (\"Maprange:\",JSON.stringify(state.Matrix.values));\n      // subset contains the keys being displayed in matrix...\n\n      state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\n      state.Matrix.sortMatrixValues(state); // make matrix\n\n      state.Matrix.makeMatrix(state, docs, m); //console.log (\"Matrix:\",JSON.stringify(m));\n    }\n\n    showFunc(state, m);\n  };\n\n  this.dbindex = function (state, ks) {\n    // make indexes on all keys\n    var s = \"\";\n    var klen = ks.length;\n\n    for (var ii = 0; ii < klen; ii++) {\n      //this.query(\"CREATE INDEX ? ON TABLE alarm.?\",ks[ii],ks[ii]);\n      s = s + \" \" + ks[ii];\n    }\n\n    ; //console.log(\"Indexes:\",s);\n  };\n\n  this.getTitleDynamic = function (state, key, val) {\n    var ret, parse;\n\n    if (state.Database.values[key] === undefined) {\n      ret = val;\n    } else {\n      var keytrg = this.getKeytrg(state, key, val);\n\n      if (val === \"null\") {\n        ret = key + \" is NULL\";\n      } else if (keytrg === this.keytrg.Max) {\n        // this is a function\n        parse = state.Utils.getMax(state.Database.values[key]);\n\n        if (parse === undefined) {\n          ret = key + \" is NULL\";\n        } else {\n          ret = parse;\n        }\n\n        ;\n      } else if (keytrg === this.keytrg.Min) {\n        // this is a function\n        parse = state.Utils.getMin(state.Database.values[key]);\n\n        if (parse === undefined) {\n          ret = key + \" is NULL\";\n        } else {\n          ret = parse;\n        }\n\n        ;\n      } else {\n        ret = val;\n      }\n\n      ;\n    }\n\n    ;\n    return ret;\n  };\n\n  this.getWhereDynamic = function (state, key, val) {\n    var ret, parse;\n\n    if (state.Database.values[key] === undefined) {\n      ret = state.Database.getWhereDetail(key, val);\n    } else {\n      var keytrg = this.getKeytrg(state, key, val); //console.log(\"parseWhere:\",key,JSON.stringify(val),keytrg);\n\n      if (keytrg === this.keytrg.Max) {\n        // this is a function\n        parse = state.Utils.getMax(state.Database.values[key]); //console.log(\"parseWhere:\",key,parse,JSON.stringify(state.Database.values[key]));\n\n        if (parse === undefined) {\n          ret = key + \" is NULL\";\n        } else {\n          ret = key + \"='\" + parse + \"'\";\n        }\n\n        ;\n      } else if (keytrg === this.keytrg.Min) {\n        // this is a function\n        parse = state.Utils.getMin(state.Database.values[key]);\n\n        if (parse === undefined) {\n          ret = key + \" is NULL\";\n        } else {\n          ret = key + \"='\" + parse + \"'\";\n        }\n\n        ;\n      } else {\n        ret = state.Database.getWhereDetail(key, val);\n      }\n\n      ;\n    }\n\n    ; //console.log(\"GetWhere:\",key,val,ret);\n\n    return ret;\n  };\n\n  this.getWhereDetail = function (key, val) {\n    if (val === undefined || val === null || val === \"\") {\n      return key + ' is NULL';\n    } else {\n      return key + '=\"' + val + '\"';\n    }\n\n    ;\n  };\n\n  this.getWhere = function (state, keys, vals) {\n    var where = \"\"; //console.log(\"Path:\",JSON.stringify(state.Path.keys));\n\n    if (keys === undefined) {\n      keys = state.Path.keys.path;\n      vals = state.Path.select.val;\n    }\n\n    ;\n\n    if (vals === undefined) {\n      vals = [];\n    }\n\n    ;\n\n    if (keys !== undefined) {\n      var plen = keys.length;\n\n      for (var ii = 0; ii < plen; ii++) {\n        var key = keys[ii];\n        var whereKey = state.Database.parseWhere(state, key, vals[key]); //console.log(\"Wherekey:\",ii,key,JSON.stringify(vals),\n        //\t    JSON.stringify(vals[key]),\"'\"+whereKey+\"'\");\n\n        if (whereKey === undefined || whereKey === null || whereKey === \"\") {\n          if (where !== \"\") {\n            where = where + ' AND ';\n          }\n\n          ;\n          where = where + key + ' is NULL';\n        } else {\n          if (where !== \"\") {\n            where = where + ' AND ';\n          }\n\n          ;\n          where = where + \"(\" + whereKey + \")\";\n        }\n      }\n\n      ;\n\n      if (where !== \"\") {\n        where = \" WHERE \" + where;\n      } //console.log(\"Where=|\"+where+\"|\")\n\n    }\n\n    ;\n    return where;\n  };\n\n  this.addWhere = function (iwhere, whereKey) {\n    var where = iwhere;\n\n    if (whereKey !== undefined && whereKey !== null && whereKey !== \"\") {\n      if (where !== \"\") {\n        where = where + \" AND (\" + whereKey + \")\";\n      } else {\n        where = \" WHERE (\" + whereKey + \")\";\n      }\n    }\n\n    return where;\n  };\n\n  this.getColWhere = function (key, values, index, step) {\n    var clen = values.length;\n    var where = \"\";\n\n    for (var kk = index; kk < Math.min(clen, index + step); kk++) {\n      if (where !== \"\") {\n        where = where + \" or \";\n      }\n\n      where = where + this.getWhereDetail(key, values[kk]);\n    }\n\n    ;\n    return where;\n  };\n\n  this.makeWhere = function (state, keys, vals) {\n    if (keys === undefined) {\n      state.Path.keys.path.forEach(function (item, index) {\n        this.setWhere(state, item, state.Path.select.val);\n      }.bind(this));\n    } else {\n      keys.forEach(function (item, index) {\n        this.setWhere(state, item, vals);\n      }.bind(this));\n    }\n  };\n\n  this.setWhere = function (state, key, vals) {\n    var where = this.parseWhere(state, key, vals);\n    state.Path.where[key] = where;\n  };\n\n  this.parseWhere = function (state, key, vals) {\n    var where = \"\";\n\n    if (vals === undefined) {\n      vals = [];\n    }\n\n    ;\n    var lenv = vals.length;\n\n    for (var ii = 0; ii < lenv; ii++) {\n      var val = vals[ii];\n\n      if (where !== \"\") {\n        where = where + \" OR \";\n      }\n\n      ;\n      where = where + state.Database.getWhereDynamic(state, key, val); //console.log(\"From getWhereDynamic:\",key,\":\",val,\":\",where);\n    }\n\n    ;\n    return where;\n  };\n\n  this.getGroup = function (keys) {\n    var group = \"\";\n    var plen = keys.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = keys[ii];\n\n      if (group !== \"\") {\n        group = group + ',';\n      }\n\n      ;\n      group = group + key;\n    }\n\n    ;\n\n    if (group !== \"\") {\n      group = \" GROUP BY \" + group;\n    }\n\n    return group;\n  };\n\n  this.getCols = function (keys) {\n    var cols = \"\";\n    var plen = keys.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = keys[ii];\n      cols = cols + key;\n\n      if (cols !== \"\") {\n        cols = cols + ',';\n      }\n\n      ;\n    }\n\n    ;\n    return cols;\n  };\n\n  this.getAll = function (state) {\n    var cols = \"\";\n    var plen = state.Path.keys.other.length;\n\n    for (var ii = 0; ii < plen; ii++) {\n      var key = state.Path.keys.other[ii];\n      cols = cols + key;\n\n      if (cols !== \"\") {\n        cols = cols + ',';\n      }\n\n      ;\n    }\n\n    ;\n    return cols;\n  };\n\n  this.getDocsRank = function (state, where, keys, maxrank) {\n    var dd;\n    dd = this.query(\"select * FROM alarm\" + where);\n    return dd === undefined ? [] : dd;\n  };\n\n  this.getRankCnt = function (state, where, keys, maxrank) {\n    where = this.addWhere(where, \"rank='\" + maxrank.toString() + \"'\");\n    var sql, dd;\n    var body = \"* FROM alarm\";\n\n    if (keys === undefined) {\n      sql = \"select \" + body + where; //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\n      dd = this.query(sql); //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n      //console.log(\"Cnt:\",JSON.stringify(dd));\n    } else {\n      var cols = this.getCols(keys);\n      var group = this.getGroup(keys);\n      sql = \"select \" + cols + body + where + group; //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\n      dd = this.query(sql); //console.log(\"Cnt:\",JSON.stringify(dd),JSON.stringify(keys));\n    }\n\n    return dd === undefined ? [] : dd;\n  };\n\n  this.getDocsCnt = function (state, where, keys) {\n    var sql, dd;\n    var body = \"count(*) AS cnt, max(level) AS maxlev, max(rank) AS maxrank, min(level) AS minlev, max(lat) AS maxlat, min(lat) AS minlat, max(lon) AS maxlon, min(lon) AS minlon FROM alarm\";\n\n    if (keys === undefined) {\n      sql = \"select \" + body + where; //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\n      dd = this.query(sql); //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n      //console.log(\"Cnt:\",JSON.stringify(dd));\n    } else {\n      var cols = this.getCols(keys);\n      var group = this.getGroup(keys);\n      sql = \"select \" + cols + body + where + group; //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\n      dd = this.query(sql); //console.log(\"Cnt:\",JSON.stringify(dd),JSON.stringify(keys));\n    }\n\n    return dd === undefined ? [] : dd;\n  };\n\n  this.getDocs = function (state, where) {\n    var dd = this.query(\"select * FROM alarm\" + where);\n    return dd === undefined ? [] : dd;\n  };\n\n  this.makeTable = function (state) {\n    this.query('DROP TABLE IF EXISTS alarm; CREATE TABLE alarm;');\n  };\n\n  this.dataToDb = function (state, data) {\n    alasql.tables.alarm.data = data;\n  };\n\n  this.getKeyCnt = function (state, key, where) {\n    var sql = \"select \" + key + \",count(*) AS cnt FROM alarm\" + where + \" GROUP BY \" + key;\n    return this.query(sql);\n  };\n\n  this.whatIsIt = function (object) {\n    // determine object type\n    if (object === null) {\n      return \"null\";\n    } else if (object.constructor === this.arrayConstructor) {\n      return \"Array\";\n    } else if (object.constructor === this.objectConstructor) {\n      return \"Object\";\n    } else {\n      return \"value\";\n    }\n  };\n\n  this.getTimeDiff = function (state, dt) {\n    var s = \"\";\n\n    if (dt === undefined || isNaN(state, dt)) {\n      return s;\n    }\n\n    ;\n    var msec = Math.abs(state, dt);\n    var dd = Math.floor(state, (state, msec / 1000 / 60) / 60 / 24);\n    msec -= dd * 1000 * 60 * 60 * 24;\n    var hh = Math.floor(state, (state, msec / 1000) / 60 / 60);\n    msec -= hh * 1000 * 60 * 60;\n    var mm = Math.floor(state, msec / 1000 / 60);\n    msec -= mm * 1000 * 60;\n    var ss = Math.floor(state, msec / 1000);\n    msec -= ss * 1000;\n\n    if (dt < 0) {\n      s = \"-\";\n    } else if (dt > 0) {\n      s = \"+\";\n    } else {\n      s = \"0\";\n    }\n\n    if (dd !== 0) s = s + \" \" + state.Utils.numberWithCommas(dd) + \"d\";\n    if (hh !== 0) s = s + \" \" + hh + \"h\";\n    if (mm !== 0) s = s + \" \" + mm + \"m\"; //if (ss !== 0) s=s+\" \"+ss+\"s\";\n\n    return s;\n  };\n\n  this.sanityCheck = function (state) {\n    var sql = \"select count(*) AS cnt, max(level) AS lev FROM alarm\";\n    var dd0 = this.query(sql);\n    var nrec = dd0[0].cnt;\n    return nrec;\n  };\n\n  this.query = function (sql) {\n    try {\n      return alasql(sql);\n    } catch (e) {\n      alert(sql + \":\" + e);\n    }\n\n    ;\n  };\n}\n\n;\nexport default Database;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/lib/DatabaseLib.js"],"names":["alasql","window","Database","ret","datdir","datfile","cnt","keyCnt","values","epoch0","regfile","arrayConstructor","constructor","objectConstructor","casc","cdes","nasc","ndes","delay","ready","log","mod","keytrg","Missing","Null","Value","Min","Max","init","state","Default","Colors","Path","Layout","Threshold","Utils","update","setTime","load","setTimeout","console","loadDefault","processDefault","loadRegister","loadData","processData","response","callbacks","path","File","file","json","JSON","parse","e","alert","name","message","undefined","dbInsert","Html","setFootnote","makeWhere","Show","showAll","next","getTime","s","nn","match","map","Number","date0","Date","UTC","slice","d","epoch","age","getTimeDiff","React","Status","setAge","getKeyValues","key","vals","getKeytrg","val","Array","isArray","lenv","length","ii","Math","max","makeKeytrg","len","data","makeTable","home","hkeys","Object","keys","homeKeys","delayKeys","lenh","push","rcnt","extractData","dataToDb","nrec","sanityCheck","postProcess","where","getWhere","docs","getDocs","makePath","dbindex","other","table","rest","broadcast","updateKeyCnt","type","order","isNaN","lenk","sql","dd0","query","lend","jj","doc","parent","raw","kk","kii","child","dkey","wii","whatIsIt","cp","dlen","keep","value","found","setThresholds","_title","makeDocTitle","dbextract","showFunc","cntDocs0","getDocsCnt","m","Matrix","popSeries","initKeyCnt","buff","cpArray","trash","mapKeyCnt","exportAllKeys","sortMatrixValues","cntDocs","makeMatrixCnt","mapKeys","addMapKeys","makeMatrix","ks","klen","getTitleDynamic","getMax","getMin","getWhereDynamic","getWhereDetail","select","plen","whereKey","parseWhere","addWhere","iwhere","getColWhere","index","step","clen","min","forEach","item","setWhere","bind","getGroup","group","getCols","cols","getAll","getDocsRank","maxrank","dd","getRankCnt","toString","body","tables","alarm","getKeyCnt","object","dt","msec","abs","floor","hh","mm","ss","numberWithCommas"],"mappings":"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","sourcesContent":["//console.log(\"Loading DatabaseLib.js\");\n\nconst alasql = window.alasql;\n\nfunction Database() {\n    var ret;\n    this.datdir=\"data/\";              // json data file\n    this.datfile=\"1.json\";                  // json data file\n    this.cnt=0;\n    this.keyCnt={};\n    this.values= {};\n    this.epoch0=0;\n    this.regfile=\"register\";      // register file (shows current datfile)\n    this.arrayConstructor=[].constructor;\n    this.objectConstructor={}.constructor;\n    this.casc=0; // key is sorted ascending\n    this.cdes=1; // key is sorted descending\n    this.nasc=2; // key is sorted ascending\n    this.ndes=3; // key is sorted descending\n    this.delay=60000;  // server-polling period in ms\n    this.ready=true;     // can we poll server or is another poll running\n    this.log=\"\";\n    this.mod=\"\";\n    this.keytrg={Missing:-1,\n\t\t Null:0,\n\t\t Value:1,\n\t\t Min:2,\n\t\t Max:3\n\t\t};\n    this.init=function(state){\n        state.Default.init(state);\n        state.Colors.init(state);\n        state.Path.init(state);\n        state.Layout.init(state);\n        state.Threshold.init(state);\n\tstate.Utils.init(\"Database\",this);\n    };\n    this.update=function(state) {\n\t//console.log(\"Updating database...\");\n\tthis.setTime(state);\n\tthis.load(state);\n\tsetTimeout(function() {\n\t    state.Database.update(state)\n\t},state.Database.delay); //state.Database.delay\n    };\n    this.load=function(state) {\n\tconsole.log(\"Database load number:\",++this.cnt);\n\tstate.Default.loadDefault(\n\t    state,[state.Default.processDefault,\n\t\t   state.Database.loadRegister,\n\t\t   state.Database.loadData,\n\t\t   state.Database.processData\n\t\t  ]);\n    };\n    this.loadRegister=function(state, response, callbacks ) {\n\tvar path=state.Database.datdir + state.Database.regfile;\n\tconsole.log(\"Database loadRegister:\",path);\n\tstate.File.load(state,path,callbacks);\n    };\n    this.loadData=function(state, response, callbacks ) {\n\tvar file=response; // register-response is the name of the data-file\n\tconsole.log(\"Database loadData:\",file);\n\tif (file !== state.Database.datfile) { // load new data\n\t    state.Database.datfile=file;\n\t    var path=state.Database.datdir + state.Database.datfile;\n\t    state.File.load(state,path,callbacks);\n\t}\n    };\n    this.processData=function(state,response,callbacks) {\n\t//console.log(\"Database processData.\");\n\tsetTimeout(function() {\n\t    try {\n\t\tvar json = JSON.parse(response);\n\t    } catch (e) {\n\t\talert(\"Data '\"+state.Database.datfile+\"' contains Invalid JSON:\"+e.name+\":\"+e.message);\n\t    }\n\t    if (json !== undefined) {\n\t\tstate.Database.dbInsert(state,json);\n\t\tstate.Html.setFootnote(state,\"Extracting data.\");\n\t\tsetTimeout(function() {\n\t\t    state.Database.makeWhere(state); // update where-expressions...\n\t\t    state.Show.showAll(state);\n\t\t    state.Html.setFootnote(state);\n\t\t    state.File.next(state,\"\",callbacks);\n\t\t},0.1);\n\t    }\n\t},0.1);\n    }\n    this.getTime=function(state,s) {\n\tvar nn = s.match(/\\d+/g).map(Number);\n\tvar date0 = new Date(Date.UTC(nn[0],nn[1]-1,nn[2],nn[3],nn[4],nn[5],\n\t\t\t\t      ((nn[6]||'')+'000').slice(0,3))); // modification time\n\t//console.log(\"Gettime:\",s,JSON.stringify(nn));\n\treturn date0.getTime();\n    };\n    this.setTime=function(state) {\n\tvar d = new Date();\n\tvar epoch=d.getTime();\n\t//console.log(\"Times:\",epoch,this.epoch0);\n\tif (this.epoch0 !== undefined) {\n\t    var age = epoch - this.epoch0;\n\t    this.mod=this.getTimeDiff(state,age);\n\t    if (state.React !== undefined && state.React.Status !== undefined) {\n\t\tstate.React.Status.setAge(state,this.mod);\n\t\t//console.log(\"Age:\",epoch,this.epoch0,age);\n\t    }\n\t}\n    };\n    this.getKeyValues=function(state, key) {\n\t//console.log(\"Database:\",JSON.stringify(state.Database.values));\n\tvar vals=state.Database.values[key];\n\tif (vals !== undefined) {\n\t    return vals;\n\t} else {\n\t    return [];\n\t}\n    };\n    this.getKeytrg=function(state,key,val) {\n\tif (Array.isArray(val)) {\n\t    //console.log(\">>>Is array:\",key,JSON.stringify(val));\n\t    ret=this.keytrg.Missing;\n\t    var lenv=val.length;\n            for (var ii=0;ii<lenv;ii++) {\n\t\tret=Math.max(ret,this.getKeytrg(state,key,val[ii]));\n            }\n\t    //console.log(\">>>return:\",key,ret);\n\t} else { \n\t    if (val === \"null\") {\n\t\tret=this.keytrg.Null;\n\t    } else if (val===\"MIN(\"+key+\")\") { // this is a function\n\t\tret=this.keytrg.Min;\n\t    } else if (val===\"MAX(\"+key+\")\") { // this is a function\n\t\tret=this.keytrg.Max;\n\t    } else if (val === undefined) {\n\t\tret=this.keytrg.Missing;\n\t    } else if (val === null) {\n\t\tret=this.keytrg.Null;\n\t    } else {\n\t\tret=this.keytrg.Value;\n\t    };\n\t    //console.log(\"---return:\",key,ret);\n\t};\n\treturn ret;\n    };\n    this.makeKeytrg=function(state,key,keytrg,val) {\n\tif (keytrg === this.keytrg.Missing) {\n\t    return \"missing\";\n\t} else if (keytrg === this.keytrg.Null) {\n\t    return \"null\";\n\t} else if (keytrg === this.keytrg.Min) {\n\t    return \"MIN(\"+key+\")\"\n\t} else if (keytrg === this.keytrg.Max) {\n\t    return \"MAX(\"+key+\")\"\n\t} else {\n\t    return val;\n\t};\n    };\n    this.dbInsert=function(state,json) {\n\tvar ii,key;\n\ttry {\n\t    // set home\n\t    var len=json.data.length\n\t    for (ii=0;ii<len;ii++) {\n\t\tjson.data[ii][\"cnt\"]=ii\n\t    }\n\t    // get modified date\n\t    //console.log(\"Setting time.\");\n\t    this.epoch0=this.getTime(state,json.epoch);     // data file time\n\t    this.setTime(state);     // data file time\n\t    // make database for raw data\n\t    this.makeTable(state);\n\t    // reset key counts and range\n\t    this.cnt=0;\n\t    this.keyCnt={}; // reset key-count\n\t    // put data into databse\n\t    //console.log(\"inserting\");\n\t    var data=[];\n\t    var home=state.Path.home.val;\n\t    var hkeys=Object.keys(home);\n\t    var homeKeys=[];\n\t    var delayKeys=[];\n\t    var lenh=hkeys.length;\n            for (ii=0;ii<lenh;ii++) {\n\t\tkey=hkeys[ii];\n\t\tvar keytrg=this.getKeytrg(state,key,home[key]);\n\t\t//console.log(\"Keytrg:\",key,keytrg,JSON.stringify(home[key]));\n\t\tif (keytrg <= this.keytrg.Value) {\n\t\t    homeKeys.push(key);\n\t\t} else {\n\t\t    delayKeys.push(key);\n\t\t}\n            }\n\t    //console.log(\"Home keys:\",JSON.stringify(homeKeys),\" delayed:\",JSON.stringify(delayKeys));\n\t    var rcnt=this.extractData(state,data,{},\"\",json.data,homeKeys,home);\n\t    //console.log(\"Count:\",rcnt);\n\t    //console.log(\"Data:\",JSON.stringify(data));\n\t    this.dataToDb(state,data);\n\t    var nrec=this.sanityCheck(state)\t    // sanity check\n\t    console.log(\"Initially:\",data.length,\" Extracted:\",rcnt,' Database:',nrec);\n\t    this.postProcess(state); // update distinct Database.values[key]\n\t    if (delayKeys.length > 0) {// delayed home selection (MAX() and MIN())\n\t\tthis.makeWhere(state,delayKeys,home);\n\t\tvar where=this.getWhere(state,delayKeys,home);\n\t\tvar docs=this.getDocs(state,where);\n\t\tthis.dataToDb(state,docs)\n\t\tthis.postProcess(state); // update distinct Database.values[key]\n\t    };\n\t    state.Path.makePath(state); // initialise path\n\t    //console.log(\"Indexing and cleaning up.\");\n\t    this.dbindex(state,state.Path.other.table); // make indexes\n\t    this.dbindex(state,state.Path.other.rest); // make indexes\n\t    //state.Path.checkTableKeys(state);\n\t    state.Html.broadcast(state,\"Database is ready.\");\n\t    //console.log(\"Database is ready.\");\n\t} catch (e) {\n\t    alert(\"Db-insert error:\"+e);\n\t};\n    };\n    this.updateKeyCnt=function(state,key,val) {\n\tif (this.keyCnt[key] === undefined) {\n\t    this.keyCnt[key]={cnt:0,type:\"num\",order:this.nasc};\n\t}\n\tthis.keyCnt[key].cnt=(this.keyCnt[key].cnt)+1;\n\tif (this.keyCnt[key].type  === \"num\" && isNaN(val)) {\n\t    this.keyCnt[key].type=\"nan\";\n\t    this.keyCnt[key].order=this.casc;\n\t}\n    };\n    this.postProcess=function(state) { // update meta-data\n\tvar keys=Object.keys(state.Database.keyCnt);\n\tvar lenk=keys.length;\n\tfor (var ii=0;ii<lenk;ii++) {\n\t    var key=keys[ii];\n\t    // make list of values in Database for each key\n\t    state.Database.values[key]=[];\n\t    var sql=\"select DISTINCT \"+key+\" AS \"+key+\" FROM alarm\";\n\t    var dd0=this.query(sql);\n\t    var lend=dd0.length;\n\t    for (var jj=0;jj<lend;jj++) {\n\t\tvar doc=dd0[jj];\n\t\tstate.Database.values[key].push(doc[key]);\n\t    };\n\t};\n    };\n    this.extractData=function(state,data,parent,key,raw,hkeys,home) { // insert records into db (recursive)\n\tvar rcnt=0;\n\tvar kk,ii,kii,child,dkey;\n\t//console.log(\"Processing {\",state.Utils.toString(parent),\"} '\",key,\"' (\",state.Utils.toString(raw),\")\");\n\tvar wii=this.whatIsIt(raw);\n\tif (wii  === \"Object\" && key  === \"\") {\n\t    //console.log(\"Found object (\",state.Utils.toString(parent),\")\");\n\t    child=state.Utils.cp(parent);\n\t    // loop over plain values first\n\t    for (kk in raw) {\n\t\tkii=this.whatIsIt(raw[kk]);\n\t\tif (kii  === \"value\") {\n\t\t    child[kk]=raw[kk];\n\t\t}\n\t    }\n\t    // loop over sub-objects\n\t    var nn=0;\n\t    for (kk in raw) {\n\t\tkii=this.whatIsIt(raw[kk]);\n\t\tif (kii !== \"value\") {\n\t\t    nn=nn+1;\n\t\t    rcnt=rcnt+this.extractData(state,data,child,kk,raw[kk],hkeys,home);\n\t\t}\n\t    }\n\t    if (nn  === 0) { // insert \n\t\t//console.log(\"Object was empty.\");\n\t\trcnt=rcnt+this.extractData(state,data,child,null,null,hkeys,home);\n\t    }\n\t} else if (wii  === \"Object\" && key !== \"\") {\n\t    //console.log(\"Found object key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n\t    child=state.Utils.cp(parent);\n\t    // loop over plain values first\n\t    for (kk in raw) {\n\t\tchild[key]=kk;\n\t\trcnt=rcnt+this.extractData(state,data,child,\"\",raw[kk],hkeys,home);\n\t    }\n\t} else if (wii  === \"Array\") {\n\t    //console.log(\"Found array key '\",key,\"' (\",state.Utils.toString(parent),\")\");\n\t    var dlen = raw.length;\n\t    for (ii = 0; ii < dlen; ii++) {\n\t\trcnt=rcnt+this.extractData(state,data,parent,key,raw[ii],hkeys,home);\n\t    }\n\t} else {\n\t    //console.log(\"Found key '\",key,\"' \",wii,\" (\",state.Utils.toString(parent),\")\");\n\t    var keep=true;\n\t    var doc=state.Utils.cp(parent);\n\t    if (raw !== null) {\n\t\tif (key  === \"\") {\n\t\t    doc.value=raw;\n\t\t} else {\n\t\t    doc[key]=raw;\n\t\t}\n\t    }\n\t    // check if home criteria is met\n\t    var lenh=hkeys.length;\n\t    for (ii=0;ii<lenh;ii++) {\n\t\tkey=hkeys[ii];\n\t\tvar vals=home[key];\n\t\tvar lenv=vals.length;\n\t\tvar found=false;\n\t\tfor (var jj=0;jj<lenv;jj++){\n\t\t    if (vals[jj]===doc[key] || (vals[jj]===\"\" && doc[key]===undefined)) {\n\t\t\tfound=true;\n\t\t    }\n\t\t}\n\t\tif (!found) {\n\t\t    keep=false;\n\t\t};\n\t    }\n\t    if (keep) {\n\t\t//console.log(\"Updating internal raw structure\",JSON.stringify(setup));\n\t\tfor (dkey in doc) {\n\t\t    var val=doc[dkey];\n\t\t    this.updateKeyCnt(state,dkey,val);\n\t\t    //// this takes too much time...\n\t\t    //if (this.values[dkey]  === undefined) {\n\t\t    //\tthis.values[dkey]=[];\n\t\t    //  };\n\t\t    ////console.log(\"Setup:\",JSON.stringify(setup));\n\t\t    ////console.log(\"Key:\",key,JSON.stringify(this.values));\n    \t\t    //if (this.values[dkey].indexOf(val)  === -1 ) { // value not in range\n\t\t    //    this.values[dkey].push(val); // add value to range\n\t\t    //};\n\t\t};\n\t\t//console.log(\">>> Inserting:\",state.Utils.toString(doc));\n\t\trcnt=rcnt+1;\n\t\tthis.cnt=this.cnt+1;\n\t\tstate.Threshold.setThresholds(doc);\n\t\tdoc._title=state.Layout.makeDocTitle(state,doc);\n\t\t//if (this.cnt < 10) { // debug purposes\n\t\t//for (key in keys) {\n\t\t//this.updateKeyCnt(state,key,doc[key]);\n\t\t//};\n\t\tdata.push(doc);\n\t    //} else {\n\t\t//console.log(\"Ignoring:\",lenh,JSON.stringify(hkeys),JSON.stringify(home),JSON.stringify(doc));\n\t    }\n\t}\n\treturn rcnt;\n    };\n    this.dbextract=function(state,showFunc) { // extract data from db and show\n\t// extract data from db and insert into data-array\n\t// var parent={};//{test:{$exists:false}};\n\tvar where = this.getWhere(state);\n\tvar cntDocs0=this.getDocsCnt(state,where);\n\tvar nrec= (cntDocs0.length===0?0:cntDocs0[0].cnt);\n\tvar m={};\n\tstate.Matrix.cnt=nrec;\n\tif (nrec > state.Matrix.popSeries) { // only use counts...\n\t    state.Matrix.initKeyCnt(state);\n\t    var buff=[];\n\t    state.Utils.cpArray(buff,state.Path.keys.path);\n\t    state.Utils.cpArray(buff,state.Path.keys.other);\n\t    state.Utils.cpArray(buff,state.Path.trash);\n\t    state.Matrix.mapKeyCnt(state,where,nrec,buff);\n\t    //console.log(\"Setup:\",\n\t    //\t    JSON.stringify(state.Matrix.values),\n\t    //\t    JSON.stringify(state.Matrix.keyCnt));\n\t    state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\t    state.Matrix.sortMatrixValues(state);\n\t    //console.log(\"Count:\",JSON.stringify(docs));\n\t    // add \"undefined\" range of keys that are not present in every doc...\n\t    var cntDocs=state.Database.getDocsCnt(state,where,state.Path.other.table);\n\t    state.Matrix.makeMatrixCnt(state,cntDocs,m);\n\t} else {\n\t    //console.log(\"Database where:\",where);\n\t    var docs=this.getDocs(state,where); // get all docs\n\t    //console.log(\">>>Extraction key (where='\",where,\"') Docs:\",docs.length);\n\t    state.Matrix.initKeyCnt(state);\n\t    state.Matrix.mapKeys(state,docs);\n\t    state.Matrix.addMapKeys(state,docs);\n\t    //console.log(\"Setup=\",JSON.stringify(setup));\n\t    //console.log (\"Maprange:\",JSON.stringify(state.Matrix.values));\n\t    // subset contains the keys being displayed in matrix...\n\t    state.Path.exportAllKeys(state); // can not export keys before we have a cnt-map\n\t    state.Matrix.sortMatrixValues(state);\n\t    // make matrix\n\t    state.Matrix.makeMatrix(state,docs,m);\n\t    //console.log (\"Matrix:\",JSON.stringify(m));\n\t}\n\tshowFunc(state,m);\n    };\n    this.dbindex=function(state,ks) { // make indexes on all keys\n\tvar s=\"\";\n\tvar klen = ks.length;\n\tfor (var ii = 0; ii < klen; ii++) {\n\t    //this.query(\"CREATE INDEX ? ON TABLE alarm.?\",ks[ii],ks[ii]);\n\t    s=s+\" \"+ks[ii];\n\t};\n\t//console.log(\"Indexes:\",s);\n    };\n    this.getTitleDynamic=function(state,key,val) {\n\tvar ret,parse;\n\tif (state.Database.values[key] === undefined) {\n\t    ret=val;\n\t} else {\n\t    var keytrg=this.getKeytrg(state,key,val);\n\t    if (val === \"null\") {\n\t\tret=key + \" is NULL\";\n\t    } else if (keytrg === this.keytrg.Max) { // this is a function\n\t\tparse=state.Utils.getMax(state.Database.values[key]);\n\t\tif (parse === undefined) {\n\t\t    ret=key + \" is NULL\";\n\t\t} else {\n\t\t    ret=parse;\n\t\t};\n\t    } else if (keytrg === this.keytrg.Min) { // this is a function\n\t\tparse=state.Utils.getMin(state.Database.values[key]);\n\t\tif (parse === undefined) {\n\t\t    ret=key + \" is NULL\";\n\t\t} else {\n\t\t    ret=parse;\n\t\t};\n\t    } else {\n\t\tret=val;\n\t    };\n\t};\n\treturn ret;\n    };\n    this.getWhereDynamic=function(state,key,val) {\n\tvar ret,parse;\n\tif (state.Database.values[key] === undefined) {\n\t    ret=state.Database.getWhereDetail(key,val);\n\t} else {\n\t    var keytrg=this.getKeytrg(state,key,val);\n\t    //console.log(\"parseWhere:\",key,JSON.stringify(val),keytrg);\n\t    if (keytrg === this.keytrg.Max) { // this is a function\n\t\tparse=state.Utils.getMax(state.Database.values[key]);\n\t\t//console.log(\"parseWhere:\",key,parse,JSON.stringify(state.Database.values[key]));\n\t\tif (parse === undefined) {\n\t\t    ret=key + \" is NULL\";\n\t\t} else {\n\t\t    ret=key + \"='\"+parse+\"'\";\n\t\t};\n\t    } else if (keytrg === this.keytrg.Min) { // this is a function\n\t\tparse=state.Utils.getMin(state.Database.values[key]);\n\t\tif (parse === undefined) {\n\t\t    ret=key + \" is NULL\";\n\t\t} else {\n\t\t    ret=key + \"='\"+parse+\"'\";\n\t\t};\n\t    } else{\n\t\tret=state.Database.getWhereDetail(key,val);\n\t    };\n\t};\n\t//console.log(\"GetWhere:\",key,val,ret);\n\treturn ret;\n    };\n    this.getWhereDetail=function(key,val) {\n\tif (val  === undefined ||\n\t    val  === null ||\n\t    val  === \"\") {\n\t    return key +' is NULL';\n\t} else {\n\t    return key + '=\"'+val+'\"'\n\t};\n    };\n    this.getWhere=function(state,keys,vals) {\n\tvar where=\"\";\n\t//console.log(\"Path:\",JSON.stringify(state.Path.keys));\n\tif (keys === undefined) {\n\t    keys=state.Path.keys.path;\n\t    vals=state.Path.select.val;\n\t};\n\tif (vals === undefined) {vals=[];};\n\tif (keys !== undefined) {\n\t    var plen = keys.length;\n\t    for (var ii = 0; ii < plen; ii++) {\n\t\tvar key=keys[ii];\n\t\tvar whereKey=state.Database.parseWhere(state,key,vals[key])\n\t\t//console.log(\"Wherekey:\",ii,key,JSON.stringify(vals),\n\t\t//\t    JSON.stringify(vals[key]),\"'\"+whereKey+\"'\");\n\t\tif (whereKey  === undefined ||\n\t\t    whereKey  === null ||\n\t\t    whereKey  === \"\" ) {\n\t\t    if (where !== \"\") { where = where +  ' AND ';};\n\t\t    where= where + key +' is NULL';\n\t\t} else {\n\t\t    if (where !== \"\") { where = where +  ' AND ';};\n\t\t    where=where + \"(\"+ whereKey+\")\";\n\t\t}\n\t    };\n\t    if (where !== \"\") {where=\" WHERE \"+where;}\n\t    //console.log(\"Where=|\"+where+\"|\")\n\t};\n\treturn where;\n    };\n    this.addWhere=function(iwhere,whereKey) {\n\tvar where=iwhere;\n\tif (whereKey  !== undefined &&\n\t    whereKey  !== null &&\n\t    whereKey  !== \"\" ) {\n\t    if (where !== \"\") {\n\t\twhere = where +  \" AND (\"+ whereKey+\")\";\n\t    } else {\n\t\twhere = \" WHERE (\"+ whereKey+\")\";\n\t    }\n\t}\n\treturn where;\n    };\n    this.getColWhere=function(key,values,index,step) {\n\tvar clen=values.length;\n\tvar where=\"\";\n        for (var kk=index;kk<Math.min(clen,index+step);kk++) {\n\t    if (where !== \"\") {where=where + \" or \";}\n\t    where=where + this.getWhereDetail(key,values[kk]);\n        };               \n\treturn where;\n    };\n    this.makeWhere=function(state,keys,vals) {\n\tif (keys === undefined) {\n\t    state.Path.keys.path.forEach(function(item,index) {this.setWhere(state,item,state.Path.select.val);}.bind(this));\n\t} else {\n\t    keys.forEach(function(item,index) {this.setWhere(state,item,vals);}.bind(this));\n\t}\n    };\n    this.setWhere=function(state,key,vals) {\n\tvar where=this.parseWhere(state,key,vals);\n\tstate.Path.where[key]=where;\n    };\n    this.parseWhere=function(state,key,vals) {\n\tvar where=\"\";\n\tif (vals === undefined) {vals=[];};\n\tvar lenv=vals.length\n\tfor (var ii=0;ii<lenv;ii++) {\n\t    var val=vals[ii]\n\t    if (where !== \"\") { where=where + \" OR \";};\n\t    where = where + state.Database.getWhereDynamic(state,key,val);\n\t    //console.log(\"From getWhereDynamic:\",key,\":\",val,\":\",where);\n\t};\n\treturn where;\n    };\n    this.getGroup=function(keys) {\n\tvar group=\"\";\n\tvar plen = keys.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=keys[ii];\n\t    if (group !== \"\") { group = group +  ',';};\n\t    group= group + key;\n\t};\n\tif (group !== \"\") {group=\" GROUP BY \"+group;}\n\treturn group;\n    };\n    this.getCols=function(keys) {\n\tvar cols=\"\";\n\tvar plen = keys.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=keys[ii];\n\t    cols= cols + key;\n\t    if (cols !== \"\") { cols = cols +  ',';};\n\t};\n\treturn cols;\n    };\n    this.getAll=function(state) {\n\tvar cols=\"\";\n\tvar plen = state.Path.keys.other.length;\n\tfor (var ii = 0; ii < plen; ii++) {\n\t    var key=state.Path.keys.other[ii];\n\t    cols= cols + key;\n\t    if (cols !== \"\") { cols = cols +  ',';};\n\t};\n\treturn cols;\n    };\n    this.getDocsRank=function(state,where,keys,maxrank) {\n\tvar dd;\n\tdd=this.query(\"select * FROM alarm\"+where);\n\treturn (dd===undefined?[]:dd);\n    };\n\n    this.getRankCnt=function(state,where,keys,maxrank) {\n\twhere=this.addWhere(where,\"rank='\" + maxrank.toString()+\"'\");\n\tvar sql,dd;\n\tvar body=\"* FROM alarm\";\n\tif (keys  === undefined) {\n\t    sql=\"select \"+body+where;\n\t    //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\t    dd=this.query(sql);\n\t    //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n\t    //console.log(\"Cnt:\",JSON.stringify(dd));\n\t} else {\n\t    var cols = this.getCols(keys);\n\t    var group = this.getGroup(keys);\n\t    sql=\"select \"+cols+body+\n    \t\twhere+group;\n\t    //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\t    dd=this.query(sql);\n\t    //console.log(\"Cnt:\",JSON.stringify(dd),JSON.stringify(keys));\n\t}\n\treturn (dd===undefined?[]:dd);\n    };\n    this.getDocsCnt=function(state,where,keys) {\n\tvar sql,dd;\n\tvar body=\"count(*) AS cnt, max(level) AS maxlev, max(rank) AS maxrank, min(level) AS minlev, max(lat) AS maxlat, min(lat) AS minlat, max(lon) AS maxlon, min(lon) AS minlon FROM alarm\";\n\tif (keys  === undefined) {\n\t    sql=\"select \"+body+where;\n\t    //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\t    dd=this.query(sql);\n\t    //console.log(\"initial count:\",dd[0].cnt,JSON.stringify(dd0));\n\t    //console.log(\"Cnt:\",JSON.stringify(dd));\n\t} else {\n\t    var cols = this.getCols(keys);\n\t    var group = this.getGroup(keys);\n\t    sql=\"select \"+cols+body+\n    \t\twhere+group;\n\t    //console.log(\"SQL:\",sql,\":\",body,\":\",where);\n\t    dd=this.query(sql);\n\t    //console.log(\"Cnt:\",JSON.stringify(dd),JSON.stringify(keys));\n\t}\n\treturn (dd===undefined?[]:dd);\n    };\n    this.getDocs=function(state,where) {\n\tvar dd=this.query(\"select * FROM alarm\"+where);\n\treturn (dd===undefined?[]:dd);\n    };\n    this.makeTable=function(state) {\n\tthis.query('DROP TABLE IF EXISTS alarm; CREATE TABLE alarm;');\n    };\n    this.dataToDb=function(state,data) {\n\talasql.tables.alarm.data = data;\n    };\n    this.getKeyCnt=function(state,key,where){\n\tvar sql=\"select \"+key+\",count(*) AS cnt FROM alarm\"+\n\t    where+\" GROUP BY \"+key;\n\treturn this.query(sql);\n    };\n    this.whatIsIt=function(object) { // determine object type\n\tif (object  === null) {\n\t    return \"null\";\n\t} else if (object.constructor  === this.arrayConstructor) {\n\t    return \"Array\";\n\t}\n\telse if (object.constructor  === this.objectConstructor) {\n\t    return \"Object\";\n\t}\n\telse {\n\t    return \"value\";\n\t}\n    };\n    this.getTimeDiff=function(state,dt) {\n\tvar s=\"\";\n\tif (dt  === undefined || isNaN(state,dt)) {return s;};\n\tvar msec=Math.abs(state,dt);\n\tvar dd = Math.floor(state,((state,(msec / 1000) / 60) / 60) / 24);\n\tmsec -= dd * 1000 * 60 * 60 * 24;\n\tvar hh = Math.floor(state,((state,msec / 1000) / 60) / 60);\n\tmsec -= hh * 1000 * 60 * 60;\n\tvar mm = Math.floor(state,(msec / 1000) / 60);\n\tmsec -= mm * 1000 * 60;\n\tvar ss = Math.floor(state,msec / 1000);\n\tmsec -= ss * 1000;\n\tif (dt<0) {\n\t    s=\"-\";\n\t} else if (dt > 0) {\n\t    s=\"+\";\n\t} else {\n\t    s=\"0\";\n\t}\n\tif (dd !== 0) s=s+\" \"+state.Utils.numberWithCommas(dd)+\"d\";\n\tif (hh !== 0) s=s+\" \"+hh+\"h\";\n\tif (mm !== 0) s=s+\" \"+mm+\"m\";\n\t//if (ss !== 0) s=s+\" \"+ss+\"s\";\n\treturn s;\n    }\n    this.sanityCheck=function(state) {\n\tvar sql=\"select count(*) AS cnt, max(level) AS lev FROM alarm\";\n\tvar dd0=this.query(sql);\n\tvar nrec= dd0[0].cnt;\n\treturn nrec;\n    }\n    this.query=function(sql) {\n\ttry {\n\t    return alasql(sql);\n\t} catch (e) {\n\t    alert(sql + \":\" + e);\n\t};\n    }\n\n};\n\nexport default Database;\n"]},"metadata":{},"sourceType":"module"}