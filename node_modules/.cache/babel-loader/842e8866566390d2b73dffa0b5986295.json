{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/MapComponent.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { teal_palette } from '../mui/metMuiThemes';\nimport ReactGlobe from 'react-globe';\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\nimport './styles.css';\nvar footAndHeaderheight = \"100px\";\n\nfunction getTooltipContent(marker) {\n  //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere,JSON.stringify(marker.element));\n  return \"\".concat(marker.colwhere, \" \").concat(marker.rowwhere, \")\");\n}\n\nvar styles = function styles(theme) {\n  return {\n    content: {},\n    root: {\n      height: '100%',\n      padding: 0,\n      margin: 0,\n      border: '5px solid red'\n    },\n    dataset: {\n      overflow: 'hidden',\n      height: '100%'\n    },\n    map: {\n      overflow: 'hidden',\n      height: '100%'\n    }\n  };\n};\n\nvar EarthMap =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(EarthMap, _Component);\n\n  function EarthMap(props) {\n    var _this;\n\n    _classCallCheck(this, EarthMap);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(EarthMap).call(this, props));\n\n    _this.onClickMarker = function (marker, markerObject, event) {\n      //console.log(\"Clicked marker...\",marker.id)\n      var state = marker.state;\n      var colkey = marker.colkey;\n      var colrange = marker.colrange;\n      var colwhere = marker.colwhere;\n      var rowkey = marker.rowkey;\n      var rowrange = marker.rowrange;\n      var rowwhere = marker.rowwhere;\n      var cnt = marker.cnt;\n      state.Navigate.selectItemRange(state, colkey, rowkey, colrange, rowrange, colwhere, rowwhere, cnt, 1); // setEvent({\n      //   type: 'CLICK',\n      //   marker,\n      //   markerObjectID: markerObject.uuid,\n      //   pointerEventPosition: { x: event.clientX, y: event.clientY },\n      // });\n      //setDetails(getTooltipContent(marker));\n    };\n\n    _this.onDefocus = function (previousCoordinates, event) {//setEvent({\n      //  type: 'DEFOCUS',\n      //  previousCoordinates,\n      //  pointerEventPosition: { x: event.clientX, y: event.clientY },\n      //});\n      //setDetails(null);\n    };\n\n    var _state = props.state;\n    _state.React.Map = _assertThisInitialized(_this);\n    _this.markers = [];\n    _this._ismounted = false;\n    return _this;\n  }\n\n  _createClass(EarthMap, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._ismounted = true;\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n    }\n  }, {\n    key: \"element\",\n    value: function element(el) {\n      if (el !== undefined && el !== null) {\n        this.el = el;\n      }\n\n      ;\n    }\n  }, {\n    key: \"showMap\",\n    value: function showMap(state) {\n      // dont re-render the globe... - only change the markers\n      this.setMarkers(state);\n    }\n  }, {\n    key: \"setMarkers\",\n    // markers=[\n    //{\n    //id: 1,\n    //city: 'Test-Dalum',\n    //color: 'red',\n    //coordinates: [63.8198,10.3521],\n    //value: 50,\n    //},\n    value: function setMarkers(state) {\n      // get marker data\n      //console.log(\"Setting map markers...\");\n      var tcnt = 0;\n      var markers = []; //   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\n      var matrix = state.React.matrix;\n      var first = true;\n\n      if (matrix !== undefined) {\n        state.Matrix.printElements(matrix);\n        var colkey = state.Path.getColKey(state) || \"\";\n        var rowkey = state.Path.getRowKey(state) || \"\";\n        var colvalues = state.Path.filterKeys(state, state.Matrix.values[colkey] || [\"\"]);\n        var rowvalues = state.Path.filterKeys(state, state.Matrix.values[rowkey] || [\"\"]); //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n        //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n        //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n        // make markers\n\n        var rlen = rowvalues.length;\n\n        for (var ii = 0; ii < rlen; ii++) {\n          var rowval = rowvalues[ii];\n          var rowrange = state.Matrix.getLatRange(state, rowvalues[ii]);\n          var rowwhere = state.Matrix.getLatWhere(state, \"lat\", rowvalues[ii]);\n          var clen = colvalues.length;\n\n          for (var jj = 0; jj < clen; jj++) {\n            var colval = colvalues[jj];\n            var colrange = state.Matrix.getLonRange(state, colvalues[jj]);\n            var colwhere = state.Matrix.getLonWhere(state, \"lon\", colvalues[jj]);\n            var element = state.Matrix.getMatrixElement(colval, rowval, matrix);\n\n            if (element !== undefined) {\n              var lon = element.colval;\n              var lat = element.rowval;\n              var lev = element.maxlev;\n              var bgcolor = state.Colors.getLevelBgColor(lev);\n              var fgcolor = state.Colors.getLevelFgColor(lev);\n              var cnt = element.cnt;\n              tcnt = tcnt + 1;\n              var mark = {\n                id: tcnt,\n                coordinates: [lat, lon],\n                city: \"Test\",\n                value: 0,\n                element: element,\n                bgcolor: bgcolor,\n                fgcolor: fgcolor,\n                state: state,\n                colkey: \"lon\",\n                colrange: colrange,\n                colwhere: colwhere,\n                rowkey: \"lat\",\n                rowrange: rowrange,\n                rowwhere: rowwhere,\n                cnt: cnt\n              };\n\n              if (first) {\n                first = false; //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n              }\n\n              markers.push(mark);\n            }\n          }\n        }\n      } // make markers\n      // set markers\n      //console.log(\"Markers:\",markers.length);\n\n\n      this.markers = markers;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state; //console.log(\"Rendering map...\");\n\n      this.setMarkers(state);\n      return React.createElement(\"div\", {\n        ref: function ref(el) {\n          _this2.element(el);\n        },\n        className: classes.root,\n        style: {\n          position: 'fixed',\n          marginLeft: '0%',\n          width: '90%',\n          height: 'calc(95% - ' + footAndHeaderheight + ')',\n          overflow: 'hidden'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, React.createElement(ReactGlobe, {\n        markers: this.markers,\n        focus: [65, 15],\n        zoom: 2,\n        initialCoordinates: [65, 20],\n        onClickMarker: this.onClickMarker,\n        markerOptions: {\n          renderer: markerRenderer,\n          getTooltipContent: getTooltipContent\n        },\n        focusOptions: {\n          animationDuration: 500,\n          distanceRadiusScale: 1.75,\n          easingFunction: ['Cubic', 'In'],\n          enableAutoRotate: false,\n          enableClouds: false\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return EarthMap;\n}(Component); //                  onDefocus={this.onDefocus}\n//    <div className=\"App\"> // i dont know if u need this still..\n\n\nEarthMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EarthMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/MapComponent.js"],"names":["React","Component","PropTypes","withStyles","teal_palette","ReactGlobe","defmarkers","markerRenderer","footAndHeaderheight","getTooltipContent","marker","colwhere","rowwhere","styles","theme","content","root","height","padding","margin","border","dataset","overflow","map","EarthMap","props","onClickMarker","markerObject","event","state","colkey","colrange","rowkey","rowrange","cnt","Navigate","selectItemRange","onDefocus","previousCoordinates","Map","markers","_ismounted","window","addEventListener","updateWindowDimensions","el","undefined","setMarkers","tcnt","matrix","first","Matrix","printElements","Path","getColKey","getRowKey","colvalues","filterKeys","values","rowvalues","rlen","length","ii","rowval","getLatRange","getLatWhere","clen","jj","colval","getLonRange","getLonWhere","element","getMatrixElement","lon","lat","lev","maxlev","bgcolor","Colors","getLevelBgColor","fgcolor","getLevelFgColor","mark","id","coordinates","city","value","push","classes","position","marginLeft","width","renderer","animationDuration","distanceRadiusScale","easingFunction","enableAutoRotate","enableClouds","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport ReactGlobe from 'react-globe';\n\nimport defmarkers from './markers';\nimport markerRenderer from './markerRenderer';\n\nimport './styles.css';\n\nconst footAndHeaderheight = \"100px\";\n\nfunction getTooltipContent(marker) {\n    //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere,JSON.stringify(marker.element));\n  return `${marker.colwhere} ${marker.rowwhere})`;\n}\n\nconst styles = theme => ({\n    content: {},\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '5px solid red'\n    },\n    dataset: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n    map: {\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n});\n\nclass EarthMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state} = props;\n\tstate.React.Map=this;\n\tthis.markers=[];\n\tthis._ismounted = false;\n    };\n    componentDidMount() { \n\tthis._ismounted = true;\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n    componentWillUnmount() {\n\tthis._ismounted = false;\n    }\n    element(el) {\n\tif (el !== undefined && el !== null) {\n\t    this.el=el;\n\t};\n    };\n    showMap(state) {\n\t// dont re-render the globe... - only change the markers\n\tthis.setMarkers(state);\n    };\n    // markers=[\n    //{\n    //id: 1,\n    //city: 'Test-Dalum',\n    //color: 'red',\n    //coordinates: [63.8198,10.3521],\n    //value: 50,\n    //},\n    setMarkers(state) {\n\t// get marker data\n\t//console.log(\"Setting map markers...\");\n\tvar tcnt=0;\n\tvar markers=[];//   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\tvar matrix=state.React.matrix;\n\tvar first=true;\n\tif (matrix !== undefined) {\n\t    state.Matrix.printElements(matrix);\n\t    var colkey = state.Path.getColKey(state)||\"\";\n\t    var rowkey = state.Path.getRowKey(state)||\"\";\n\t    var colvalues = state.Path.filterKeys(state,state.Matrix.values[colkey]||[\"\"]);\n\t    var rowvalues = state.Path.filterKeys(state,state.Matrix.values[rowkey]||[\"\"]);\n\t    //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n\t    //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n\t    //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n            // make markers\n            var rlen=rowvalues.length;\n            for(var ii=0; ii<rlen; ii++) {\n\t\tvar rowval=rowvalues[ii];\n\t\tvar rowrange=state.Matrix.getLatRange(state,rowvalues[ii]);\n\t\tvar rowwhere = state.Matrix.getLatWhere(state,\"lat\",rowvalues[ii]);\n\t\tvar clen=colvalues.length;\n\t\tfor(var jj=0; jj<clen; jj++) {\n\t\t    var colval=colvalues[jj];\n\t\t    var colrange=state.Matrix.getLonRange(state,colvalues[jj]);\n\t\t    var colwhere = state.Matrix.getLonWhere(state,\"lon\",colvalues[jj]);\n\t\t    var element=state.Matrix.getMatrixElement(colval,rowval,matrix);\n\t\t    if (element !== undefined) {\n\t\t\tvar lon=element.colval;\n\t\t\tvar lat=element.rowval;\n\t\t\tvar lev=element.maxlev;\n\t\t\tvar bgcolor=state.Colors.getLevelBgColor(lev);\n\t\t\tvar fgcolor=state.Colors.getLevelFgColor(lev);\n\t\t\tvar cnt=element.cnt;\n\t\t\ttcnt=tcnt+1;\n\t\t\tvar mark={id:tcnt,\n\t\t\t\t  coordinates:[lat,lon],\n\t\t\t\t  city:\"Test\",\n\t\t\t\t  value:0,\n\t\t\t\t  element:element,\n\t\t\t\t  bgcolor:bgcolor,\n\t\t\t\t  fgcolor:fgcolor,\n\t\t\t\t  state:state,\n\t\t\t\t  colkey:\"lon\",\n\t\t\t\t  colrange:colrange,\n\t\t\t\t  colwhere:colwhere,\n\t\t\t\t  rowkey:\"lat\",\n\t\t\t\t  rowrange:rowrange,\n\t\t\t\t  rowwhere:rowwhere,\n\t\t\t\t  cnt:cnt\n\t\t\t\t };\n\t\t\tif (first) {\n\t\t\t    first=false;\n\t\t\t    //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n\t\t\t}\n\t\t\tmarkers.push(mark);\n\t\t    }\n\t\t}\n\t    }\n\t}\n\t// make markers\n\t// set markers\n\t//console.log(\"Markers:\",markers.length);\n\tthis.markers=markers;\n    }\n    onClickMarker=function(marker, markerObject, event) {\n\t//console.log(\"Clicked marker...\",marker.id)\n\tvar state=marker.state;\n\tvar colkey=marker.colkey;\n\tvar colrange=marker.colrange;\n\tvar colwhere=marker.colwhere;\n\tvar rowkey=marker.rowkey;\n\tvar rowrange=marker.rowrange;\n\tvar rowwhere=marker.rowwhere;\n\tvar cnt=marker.cnt;\n\tstate.Navigate.selectItemRange(state,colkey,rowkey,colrange,rowrange,colwhere,rowwhere,cnt,1);\n\t// setEvent({\n\t//   type: 'CLICK',\n\t//   marker,\n\t//   markerObjectID: markerObject.uuid,\n\t//   pointerEventPosition: { x: event.clientX, y: event.clientY },\n\t// });\n\t//setDetails(getTooltipContent(marker));\n    };\n    onDefocus=function (previousCoordinates, event){\n\t//setEvent({\n\t//  type: 'DEFOCUS',\n\t//  previousCoordinates,\n\t//  pointerEventPosition: { x: event.clientX, y: event.clientY },\n\t//});\n\t//setDetails(null);\n    };\n    render() {\n\tconst { classes, state } = this.props;\n\t//console.log(\"Rendering map...\");\n\tthis.setMarkers(state);\n\treturn (<div ref={el=>{this.element(el)}}\n\t        className={classes.root}\n\t        style={{position:'fixed', marginLeft:'0%',width: '90%', height: 'calc(95% - '+footAndHeaderheight+')',overflow:'hidden'}} >\n\t           <ReactGlobe \n                    markers={this.markers}\n                    focus={[65,15]} \n                    zoom={2} \n                    initialCoordinates={[65,20]}\n                    onClickMarker={this.onClickMarker}\n                    markerOptions={{renderer: markerRenderer,\n                                     getTooltipContent:getTooltipContent,  \n                                   }}\n                   focusOptions={{\n                   animationDuration: 500, \n                   distanceRadiusScale: 1.75,\n                   easingFunction: ['Cubic', 'In'],\n\t\t   enableAutoRotate:false,\n\t\t   enableClouds:false,\n                  }}\n\t        />\n\t      </div>\n\t     );\n    }\n}\n//                  onDefocus={this.onDefocus}\n//    <div className=\"App\"> // i dont know if u need this still..\n\nEarthMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EarthMap);\n"]},"metadata":{},"sourceType":"module"}