{"ast":null,"code":"import _objectWithoutProperties from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/CanvasTextComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    canvas: {\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"hidden\"\n    },\n    pointer: {\n      cursor: \"pointer\",\n      padding: theme.spacing.unit * 0\n    },\n    nopointer: {\n      padding: theme.spacing.unit * 0\n    }\n  };\n};\n\nfunction drawMarker(ctx, height, offset, width) {\n  ctx.strokeStyle = 'blue';\n  ctx.beginPath();\n  ctx.moveTo(offset, 0);\n  ctx.lineTo(offset + width, height);\n  ctx.moveTo(offset + width, 0);\n  ctx.lineTo(offset, height);\n  ctx.strokeRect(offset, 0, offset + width, height);\n  ctx.stroke();\n}\n\n;\n\nfunction updateCanvas(item) {\n  var _item$props = item.props,\n      label = _item$props.label,\n      plan = _item$props.plan;\n  var cnv = item.refs.text;\n  var ctx = cnv.getContext('2d'); //var cnvheight = cnv.height;\n\n  ctx.save(); //ctx.translate(newx, newy);\n  //ctx.font = \"40px Courier\"\n\n  ctx.clearRect(0, 0, cnv.width, cnv.height); //\n  //ctx.strokeStyle='gray';\n  //ctx.strokeRect(0,0,cnv.width,cnv.height);\n  //\n\n  ctx.textAlign = \"left\"; //left right center\n  //ctx.rect(0,0,100,100);\n  //ctx.stroke();\n  //console.log(\">>>> Plan:\",JSON.stringify(plan),item.width,item.height);\n\n  if (plan.rotate !== undefined && plan.rotate) {\n    ctx.translate(item.width - plan.border - plan.xoffset, item.height - plan.border);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText(label, 0, 0); // labelXposition\n  } else {\n    ctx.fillText(label, plan.border + plan.xoffset, item.height - plan.border); // labelXposition\n  }\n\n  ;\n  ctx.restore(); //ctx.rect(0,0,item.width,item.height);\n  //ctx.stroke();\n  //console.log(\"Label:\",label,item.width,item.height, plan.border,plan.xoffset);\n  //console.log(\"CanvasText:\",cnv.width,cnv.height);\n\n  if (item.invalid) {\n    drawMarker(ctx, cnv.height, 0, cnv.width);\n  }\n\n  ;\n}\n\nvar CanvasTextComponent =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(CanvasTextComponent, _Component);\n\n  function CanvasTextComponent() {\n    _classCallCheck(this, CanvasTextComponent);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CanvasTextComponent).apply(this, arguments));\n  }\n\n  _createClass(CanvasTextComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          onclick = _this$props.onclick,\n          title = _this$props.title,\n          plan = _this$props.plan,\n          invalid = _this$props.invalid,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"onclick\", \"title\", \"plan\", \"invalid\"]);\n\n      this.width = plan.width;\n      this.height = plan.height;\n      this.invalid = invalid;\n      return React.createElement(\"canvas\", Object.assign({}, other, {\n        className: classes.canvas,\n        classes: classes,\n        onClick: onclick,\n        title: title,\n        ref: \"text\",\n        plan: plan,\n        width: this.width,\n        height: this.height,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CanvasTextComponent;\n}(Component);\n\nCanvasTextComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CanvasTextComponent); // function getTextWidth(txt, fontname, fontsize){\n//     if(getTextWidth.c === undefined){\n//         getTextWidth.c=document.createElement('canvas');\n//         getTextWidth.ctx=getTextWidth.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextWidth.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextWidth.ctx.measureText(txt).width;\n// };\n// function getTextHeight(fontname, fontsize){\n//     if(getTextHeight.c === undefined){\n//         getTextHeight.c=document.createElement('canvas');\n//         getTextHeight.ctx=getTextHeight.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextHeight.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextHeight.ctx.measureText('M').width;\n// }","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/CanvasTextComponent.js"],"names":["React","Component","PropTypes","withStyles","styles","theme","canvas","width","height","overflow","pointer","cursor","padding","spacing","unit","nopointer","drawMarker","ctx","offset","strokeStyle","beginPath","moveTo","lineTo","strokeRect","stroke","updateCanvas","item","props","label","plan","cnv","refs","text","getContext","save","clearRect","textAlign","rotate","undefined","translate","border","xoffset","Math","PI","fillText","restore","invalid","CanvasTextComponent","classes","onclick","title","other","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    canvas: {\n\twidth:\"100%\",\n\theight:\"100%\",\n\toverflow:\"hidden\",\n    },\n    pointer: {\n\tcursor:\"pointer\",\n\tpadding: theme.spacing.unit*0,\n    },\n    nopointer: {\n\tpadding: theme.spacing.unit*0,\n    },\n});\nfunction drawMarker(ctx,height,offset,width) {\n    ctx.strokeStyle='blue';\n    ctx.beginPath();\n    ctx.moveTo(offset,0);\n    ctx.lineTo(offset+width,height);\n    ctx.moveTo(offset+width,0);\n    ctx.lineTo(offset,height);\n    ctx.strokeRect(offset,0,offset+width,height);\n    ctx.stroke();\n};\nfunction updateCanvas(item) {\n    const {label,plan} = item.props;\n    const cnv=item.refs.text;\n    const ctx = cnv.getContext('2d');\n    //var cnvheight = cnv.height;\n    ctx.save();\n    //ctx.translate(newx, newy);\n    //ctx.font = \"40px Courier\"\n    ctx.clearRect(0, 0, cnv.width, cnv.height);\n    //\n    //ctx.strokeStyle='gray';\n    //ctx.strokeRect(0,0,cnv.width,cnv.height);\n    //\n    ctx.textAlign = \"left\"; //left right center\n    //ctx.rect(0,0,100,100);\n    //ctx.stroke();\n    //console.log(\">>>> Plan:\",JSON.stringify(plan),item.width,item.height);\n    if (plan.rotate !== undefined && plan.rotate) {\n\tctx.translate(item.width-plan.border-plan.xoffset,item.height-plan.border);\n\tctx.rotate(-Math.PI/2);\n\tctx.fillText(label, 0, 0); // labelXposition\n    } else {\n\tctx.fillText(label, plan.border+plan.xoffset, item.height-plan.border); // labelXposition\n    };\n    ctx.restore();\n    //ctx.rect(0,0,item.width,item.height);\n    //ctx.stroke();\n    //console.log(\"Label:\",label,item.width,item.height, plan.border,plan.xoffset);\n    //console.log(\"CanvasText:\",cnv.width,cnv.height);\n    if (item.invalid) {\n\tdrawMarker(ctx,cnv.height,0,cnv.width);\n    };\n}\n    \n\nclass CanvasTextComponent extends Component {\n    componentDidMount() {\n        updateCanvas(this);\n    }\n    componentDidUpdate() {\n        updateCanvas(this);\n    }\n    render() {\n        const { classes, onclick, title, plan, invalid, ...other } = this.props;\n\tthis.width=plan.width;\n\tthis.height=plan.height;\n\tthis.invalid=invalid;\n        return (\n\t\t<canvas {...other} className={classes.canvas} classes={classes} onClick={onclick} title={title} ref=\"text\" plan={plan} width={this.width} height={this.height}/>\n        );\n    }\n}\n\nCanvasTextComponent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CanvasTextComponent);\n// function getTextWidth(txt, fontname, fontsize){\n//     if(getTextWidth.c === undefined){\n//         getTextWidth.c=document.createElement('canvas');\n//         getTextWidth.ctx=getTextWidth.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextWidth.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextWidth.ctx.measureText(txt).width;\n// };\n// function getTextHeight(fontname, fontsize){\n//     if(getTextHeight.c === undefined){\n//         getTextHeight.c=document.createElement('canvas');\n//         getTextHeight.ctx=getTextHeight.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextHeight.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextHeight.ctx.measureText('M').width;\n// }\n"]},"metadata":{},"sourceType":"module"}