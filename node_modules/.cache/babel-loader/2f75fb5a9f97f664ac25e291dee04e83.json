{"ast":null,"code":"//console.log(\"Loading AutoLib.js\");\nfunction Auto(){this.debug=false;this.complete=true;this.toggle=function(state){console.log(\"Pressed toggle\");state.Auto.complete=!state.Auto.complete;state.Show.showConfig(state);};// select given table key...\nthis.selectTableKey=function(state,key,keyval,keywhere,keycnt){// keep abscissa\nif(this.debug){console.log(\"selectTableKey Entering:\",key,keyval,keywhere,keycnt,JSON.stringify(state.Path.keys));};var ret=false;var sid=state.Path.keys.other.indexOf(key);//console.log(\"SelectTableKey:\",key,sid,JSON.stringify(state.Path.keys.other));\nif(sid!==-1&&key!==\"\"){// key is selectable, but maybe not in table...\n// why do you need duplicates of the target key (that will be removed)? \n// - to check if the new selection makes your table keys redundant...\n// You need to check the table keys again. \n// We duplicate the target key into the table array and then remove both copies. \n// This brings the old table keys back again, making them subject to a redundancy check.\nvar keys=state.Path.other.rest;var lenk=keys.length;var colkey=state.Path.getColKey(state);var rowkey=state.Path.getRowKey(state);if(this.debug){console.log(\"Autopath or not?:\",lenk,colkey,rowkey,sid,state.Auto.complete);};if(lenk===0||colkey===undefined||rowkey===undefined||!state.Auto.complete){// nothing to consider\nret=state.Path.tableKeyToPath(state,key,keyval,keywhere,keycnt);}else{state.Path.moveOther2Table(state,key);// move target key to front of array\nstate.Path.duplicateTableKey(state,key);// make duplicate\nstate.Path.exportAllKeys(state);//if(this.debug){console.log(\"Before:\",JSON.stringify(state.Path.keys));};\nret=state.Auto.tableKeyToPath(state,key,keyval,keywhere,keycnt);state.Path.exportAllKeys(state);ret=state.Auto.tableKeyToPath(state,key,keyval,keywhere,keycnt);// remove duplicate\n}};if(ret){state.Path.exportAllKeys(state);};if(this.debug){console.log(\"selectTableKey Done:\",JSON.stringify(state.Path.keys),JSON.stringify(ret));};return ret;};this.tableKeyToPath=function(state,key,keyval,keywhere,keycnt){//if(this.debug){console.log(\"tableKeyToPath Entering:\",key,keyval,keywhere,keycnt);};\n// look for table-key candidates in the rest-stack\nvar ret,lens,jj,jkey,jkeyval,jkeywhere;var analysis=this.analyse(state,key,keywhere);// move the key\nret=state.Path.tableKeyToPath(state,key,keyval,keywhere,keycnt);if(this.debug){console.log(\"Analysis:\",JSON.stringify(analysis));};if(analysis.tblkey!==\"\"||analysis.sel.length>0||analysis.rest.length>0){lens=analysis.sel.length;for(jj=0;jj<lens;jj++){jkey=analysis.sel[jj];jkeyval=analysis.val[jj];jkeywhere=jkey+\"='\"+jkeyval+\"'\";state.Path.tableKeyToPath(state,jkey,jkeyval,jkeywhere,1);}state.Path.keys.other=[analysis.othkey,analysis.tblkey].concat(state.Utils.clean(analysis.rest));}else{state.Path.keys.other=[analysis.othkey];}if(this.debug){console.log(\"tableKeyToPath Path:\",JSON.stringify(state.Path.keys));};if(this.debug){console.log(\"tableKeyToPath Done:\",JSON.stringify(ret));};return ret;};this.analyse=function(state,trgkey,trgwhere){//if(this.debug){console.log(\"analyseOther Entering:\",JSON.stringify(trgkey),trgwhere);};\n//other key\nvar keys=state.Path.other.rest;var where=state.Database.getWhere(state);var colkey=state.Path.getColKey(state);var rowkey=state.Path.getRowKey(state);var othkey=trgkey===colkey?rowkey:colkey;// the other key\nvar sel=[];// selected\nvar val=[];// values\nvar rest=[];//rest\nvar tblkey=\"\";// target key\nvar lenk=keys.length;var keywhere=state.Database.addWhere(where,trgwhere);// redundant keys => selected\n// insignificant keys => pushed back\n// control keys => used in table\nfor(var ii=0;ii<lenk;ii++){// first key dependencies\nvar testkey=keys[ii];if(this.debug){console.log(\">>>Checking:\",testkey,\" vs Table:(\",trgkey,\",\",othkey,\") where=\",where,trgwhere);};var othtable=[othkey,testkey];var othdep=this.getDependancy(state,keywhere,othtable);if(this.debug){console.log(\"        Other:   \",othkey,testkey,JSON.stringify(othdep));};// in case there are no targets\nif(othdep.intprt[othkey]===\"insignificant\"||othdep.intprt[testkey]===\"insignificant\"||tblkey!==\"\"){// ignore insignificant testkey\nrest.push(testkey);if(this.debug){console.log(\"****  Postpone:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey);};}else if(othdep.intprt[testkey]===\"redundant\"){// select redundant testkey\nvar testval=othdep.val[testkey];sel.push(testkey);val.push(testval);if(this.debug){console.log(\"****  Select:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey,JSON.stringify(othdep),where);};}else{// control key\ntblkey=testkey;// we have found a good candidate\nif(this.debug){console.log(\"****  Target:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey);};}}//if(this.debug){console.log(\"Sel/Val:\",JSON.stringify(sel),JSON.stringify(val));};\nvar ret={sel:sel,val:val,rest:rest,tblkey:tblkey,othkey:othkey};if(this.debug){console.log(\"analyse Done:\",JSON.stringify(ret));};return ret;};// check if keys are inter-dependent, (\"common\", \"unique\", \"dependent\", \"unknown\") \nthis.getDependancy=function(state,where,keys){//if(this.debug){console.log(\"getDependancy Entering:\",where,JSON.stringify(keys));};\nvar key;//var where = state.Database.getWhere(state);\nvar ret={dep:{},val:{}};var hits={};var maxhits={};var docs=state.Database.getDocsCnt(state,where,keys);// current table keys\n//if(this.debug){console.log(\"getDependancy:\",JSON.strings(docs));};\nvar slen=keys.length;var dlen=docs.length;for(var ii=0;ii<dlen;ii++){var doc=docs[ii];for(var jj=0;jj<slen;jj++){key=keys[jj];if(doc[key]!==undefined){var val=doc[key];ret.val[key]=val;if(hits[key]===undefined){hits[key]={};}hits[key][val]=1+(hits[key][val]||0);if(hits[key][val]>(maxhits[key]||0)){maxhits[key]=hits[key][val];}};}};//if(this.debug){console.log(\"Hits:\",dlen,JSON.stringify(hits),where);};\nfor(var kk=0;kk<slen;kk++){key=keys[kk];if(maxhits[key]!==undefined){if(maxhits[key]===1){// every entry has unique value\nret.dep[key]=\"unique\";}else if(maxhits[key]===dlen){ret.dep[key]=\"common\";// all entries have same value\n}else{ret.dep[key]=\"dependent\";// entries depend on values\n}}else{ret.dep[key]=\"unknown\";// not found in database\n}};ret.intprt=this.getInterpretation(state,keys,ret.dep);//if(this.debug){console.log(\"getDependancy Done:\",JSON.stringify(ret));};\nreturn ret;};this.getInterpretation=function(state,keys,dep){var key;var interpretation={};var slen=keys.length;for(var kk=0;kk<slen;kk++){var kkey=keys[kk];interpretation[kkey]=\"control\";};for(var jj=0;jj<slen;jj++){key=keys[jj];if(dep[key]===\"unique\"){// \"unique\" keys depend on the other keys...\nfor(var rr=0;rr<slen;rr++){var rkey=keys[rr];if(dep[rkey]===\"unique\"){// do not remove every \"unique\" key\nif(rr>jj){interpretation[rkey]=\"redundant\";// later control variables are redundant\n};}else{// remove all other variables\nif(rr!==jj){if(dep[rkey]===\"common\"){interpretation[rkey]=\"redundant\";// \n}else{interpretation[rkey]=\"insignificant\";//\n};};}}}}var cnt=0;for(var ll=slen-1;ll>=0;ll--){key=keys[ll];if(dep[key]===\"common\"){// common keys have only one value\ncnt=cnt+1;if(cnt<slen){// leave at least one redundant variable\ninterpretation[key]=\"redundant\";}}};return interpretation;};};export default Auto;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/lib/AutoLib.js"],"names":["Auto","debug","complete","toggle","state","console","log","Show","showConfig","selectTableKey","key","keyval","keywhere","keycnt","JSON","stringify","Path","keys","ret","sid","other","indexOf","rest","lenk","length","colkey","getColKey","rowkey","getRowKey","undefined","tableKeyToPath","moveOther2Table","duplicateTableKey","exportAllKeys","lens","jj","jkey","jkeyval","jkeywhere","analysis","analyse","tblkey","sel","val","othkey","concat","Utils","clean","trgkey","trgwhere","where","Database","getWhere","addWhere","ii","testkey","othtable","othdep","getDependancy","intprt","push","testval","dep","hits","maxhits","docs","getDocsCnt","slen","dlen","doc","kk","getInterpretation","interpretation","kkey","rr","rkey","cnt","ll"],"mappings":"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","sourcesContent":["//console.log(\"Loading AutoLib.js\");\n\nfunction Auto() {\n    this.debug=false;\n    this.complete=true;\n    this.toggle=function(state) {\n\tconsole.log(\"Pressed toggle\");\n\tstate.Auto.complete=!state.Auto.complete;\n\tstate.Show.showConfig(state);\n    };\n    // select given table key...\n    this.selectTableKey=function(state,key,keyval,keywhere,keycnt) { // keep abscissa\n\tif(this.debug){console.log(\"selectTableKey Entering:\",key,keyval,keywhere,keycnt,JSON.stringify(state.Path.keys));};\n\tvar ret=false;\n\tvar sid = state.Path.keys.other.indexOf(key);\n\t//console.log(\"SelectTableKey:\",key,sid,JSON.stringify(state.Path.keys.other));\n\tif (sid !== -1 && key !== \"\") { // key is selectable, but maybe not in table...\n\t    // why do you need duplicates of the target key (that will be removed)? \n\t    // - to check if the new selection makes your table keys redundant...\n\t    // You need to check the table keys again. \n\t    // We duplicate the target key into the table array and then remove both copies. \n\t    // This brings the old table keys back again, making them subject to a redundancy check.\n\t    var keys=state.Path.other.rest;\n\t    var lenk=keys.length;\n\t    var colkey=state.Path.getColKey(state);\n\t    var rowkey=state.Path.getRowKey(state);\n\t    if(this.debug){console.log(\"Autopath or not?:\",lenk,colkey,rowkey,sid,state.Auto.complete);};\n\t    if (lenk===0 || colkey===undefined || rowkey===undefined || ! state.Auto.complete ) { // nothing to consider\n\t\tret = state.Path.tableKeyToPath(state,key,keyval,keywhere,keycnt);\n\t    } else {\n\t\tstate.Path.moveOther2Table(state,key);   // move target key to front of array\n\t\tstate.Path.duplicateTableKey(state,key); // make duplicate\n\t\tstate.Path.exportAllKeys(state);\n\t\t//if(this.debug){console.log(\"Before:\",JSON.stringify(state.Path.keys));};\n\t\tret = state.Auto.tableKeyToPath(state,key,keyval,keywhere,keycnt);\n\t\tstate.Path.exportAllKeys(state);\n\t\tret = state.Auto.tableKeyToPath(state,key,keyval,keywhere,keycnt); // remove duplicate\n\t    }\n\t};\n\tif (ret) {state.Path.exportAllKeys(state);};\n\tif(this.debug){console.log(\"selectTableKey Done:\",JSON.stringify(state.Path.keys),JSON.stringify(ret));};\n\treturn ret;\n    };\n    this.tableKeyToPath=function (state,key,keyval,keywhere,keycnt) {\n\t//if(this.debug){console.log(\"tableKeyToPath Entering:\",key,keyval,keywhere,keycnt);};\n\t// look for table-key candidates in the rest-stack\n\tvar ret, lens, jj, jkey, jkeyval, jkeywhere;\n\tvar analysis=this.analyse(state,key,keywhere);\n\t// move the key\n\tret=state.Path.tableKeyToPath(state,key,keyval,keywhere,keycnt);\n\tif(this.debug){console.log(\"Analysis:\",JSON.stringify(analysis));};\n\tif (analysis.tblkey !== \"\" || (analysis.sel.length > 0 || analysis.rest.length > 0)) {\n\t    lens=analysis.sel.length;\n\t    for (jj=0;jj<lens;jj++) {\n\t\tjkey=analysis.sel[jj];\n\t\tjkeyval=analysis.val[jj];\n\t\tjkeywhere=jkey + \"='\" + jkeyval+\"'\";\n\t\tstate.Path.tableKeyToPath(state,jkey,jkeyval,jkeywhere,1);\n\t    }\n\t    state.Path.keys.other=[analysis.othkey,analysis.tblkey].concat(state.Utils.clean(analysis.rest));\n\t} else {\n\t    state.Path.keys.other=[analysis.othkey];\n\t}\n\tif(this.debug){console.log(\"tableKeyToPath Path:\",JSON.stringify(state.Path.keys));};\n\tif(this.debug){console.log(\"tableKeyToPath Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    this.analyse=function(state,trgkey,trgwhere) {\n\t//if(this.debug){console.log(\"analyseOther Entering:\",JSON.stringify(trgkey),trgwhere);};\n\t//other key\n\tvar keys=state.Path.other.rest;\n\tvar where=state.Database.getWhere(state);\n\tvar colkey=state.Path.getColKey(state);\n\tvar rowkey=state.Path.getRowKey(state);\n\tvar othkey=(trgkey===colkey?rowkey:colkey); // the other key\n\tvar sel=[]; // selected\n\tvar val=[]; // values\n\tvar rest=[]; //rest\n\tvar tblkey=\"\"; // target key\n\tvar lenk=keys.length;\n\tvar keywhere=state.Database.addWhere(where,trgwhere);\n\t// redundant keys => selected\n\t// insignificant keys => pushed back\n\t// control keys => used in table\n\tfor (var ii = 0; ii< lenk; ii++) {\n\t    // first key dependencies\n\t    var testkey=keys[ii];\n\t    if(this.debug){console.log(\">>>Checking:\",testkey, \" vs Table:(\",trgkey,\",\",othkey,\") where=\",where,trgwhere);};\n\t    var othtable=[othkey,testkey];\n\t    var othdep=this.getDependancy(state,keywhere,othtable);\n\t    if(this.debug){console.log(\"        Other:   \",othkey,testkey,JSON.stringify(othdep));};\n\t    // in case there are no targets\n\t    if (othdep.intprt[othkey]===\"insignificant\" || othdep.intprt[testkey]===\"insignificant\" || tblkey !== \"\") {    // ignore insignificant testkey\n\t\trest.push(testkey);\n\t\tif(this.debug){console.log(\"****  Postpone:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey);};\n\t    } else if (othdep.intprt[testkey]===\"redundant\") { // select redundant testkey\n\t\tvar testval=othdep.val[testkey];\n\t\tsel.push(testkey);\n\t\tval.push(testval);\n\t\tif(this.debug){console.log(\"****  Select:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey,JSON.stringify(othdep),where);};\n\t    } else { // control key\n\t\ttblkey=testkey;                    // we have found a good candidate\n\t\tif(this.debug){console.log(\"****  Target:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey);};\n\t    }\n\t}\n\t//if(this.debug){console.log(\"Sel/Val:\",JSON.stringify(sel),JSON.stringify(val));};\n\tvar ret={sel:sel,val:val,rest:rest,tblkey:tblkey,othkey:othkey};\n\tif(this.debug){console.log(\"analyse Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    // check if keys are inter-dependent, (\"common\", \"unique\", \"dependent\", \"unknown\") \n    this.getDependancy=function(state,where,keys) {\n\t//if(this.debug){console.log(\"getDependancy Entering:\",where,JSON.stringify(keys));};\n\tvar key;\n\t//var where = state.Database.getWhere(state);\n\tvar ret={dep:{},val:{}};\n\tvar hits={};\n\tvar maxhits={};\n\tvar docs=state.Database.getDocsCnt(state,where,keys); // current table keys\n\t//if(this.debug){console.log(\"getDependancy:\",JSON.strings(docs));};\n\tvar slen=keys.length;\n\tvar dlen = docs.length;\n\tfor (var ii = 0; ii < dlen; ii++) {\n    \t    var doc=docs[ii];\n\t    for (var jj=0;jj<slen;jj++) {\n\t\tkey=keys[jj];\n\t\tif (doc[key] !== undefined) {\n\t\t    var val=doc[key];\n\t\t    ret.val[key]=val;\n\t\t    if (hits[key]  === undefined) {hits[key]={};}\n\t\t    hits[key][val] = 1+ (hits[key][val]||0);\n\t\t    if (hits[key][val] > (maxhits[key]||0)) {\n\t\t\tmaxhits[key]=hits[key][val];\n\t\t    }\n\t\t};\n\t    }\n\t};\n\t//if(this.debug){console.log(\"Hits:\",dlen,JSON.stringify(hits),where);};\n\tfor (var kk=0;kk<slen;kk++) {\n\t    key=keys[kk];\n\t    if (maxhits[key] !== undefined) {\n\t\tif (maxhits[key]  === 1) {          // every entry has unique value\n\t\t    ret.dep[key]=\"unique\";\n\t\t} else if (maxhits[key]  === dlen) {\n\t\t    ret.dep[key]=\"common\";    // all entries have same value\n\t\t} else {\n\t\t    ret.dep[key]=\"dependent\";    // entries depend on values\n\t\t}\n\t    } else {\n\t\tret.dep[key]=\"unknown\"; // not found in database\n\t    }\n\t};\n\tret.intprt=this.getInterpretation(state,keys,ret.dep);\n\t//if(this.debug){console.log(\"getDependancy Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    this.getInterpretation=function(state,keys,dep){\n\tvar key;\n\tvar interpretation={};\n\tvar slen=keys.length;\n\tfor (var kk=0;kk<slen;kk++) {\n\t    var kkey=keys[kk];\n\t    interpretation[kkey]=\"control\";\n\t};\n\tfor (var jj=0;jj<slen;jj++) {\n\t    key=keys[jj];\n\t    if (dep[key]  === \"unique\") {// \"unique\" keys depend on the other keys...\n\t\tfor (var rr=0;rr<slen;rr++) {\n\t\t    var rkey=keys[rr];\n\t\t    if (dep[rkey] === \"unique\") { // do not remove every \"unique\" key\n\t\t\tif (rr > jj) {\n\t\t\t    interpretation[rkey]=\"redundant\"; // later control variables are redundant\n\t\t\t};\n\t\t    } else { // remove all other variables\n\t\t\tif (rr !== jj) {\n\t\t\t    if (dep[rkey] === \"common\") {\n\t\t\t\tinterpretation[rkey]=\"redundant\"; // \n\t\t\t    } else {\n\t\t\t\tinterpretation[rkey]=\"insignificant\"; //\n\t\t\t    };\n\t\t\t};\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tvar cnt=0;\n\tfor (var ll=slen-1;ll>=0;ll--) {\n\t    key=keys[ll];\n\t    if (dep[key]  === \"common\") { // common keys have only one value\n\t\tcnt=cnt+1;\n\t\tif (cnt < slen) { // leave at least one redundant variable\n\t\t    interpretation[key]=\"redundant\";\n\t\t}\n\t    }\n\t};\n\treturn interpretation;\n    };\n};\nexport default Auto;\n"]},"metadata":{},"sourceType":"module"}