{"ast":null,"code":"//console.log(\"Loading AutoLib.js\");\nfunction Auto() {\n  this.debug = true;\n  this.complete = true;\n\n  this.toggle = function (state) {\n    console.log(\"Pressed toggle\");\n    state.Auto.complete = !state.Auto.complete;\n    state.Show.showConfig(state);\n  }; // select given table key...\n\n\n  this.selectTableKey = function (state, key, keyval, keywhere, keycnt) {\n    // keep abscissa\n    if (this.debug) {\n      console.log(\"selectTableKey Entering:\", key, keyval, keywhere, keycnt);\n    }\n\n    ;\n    var ret = false;\n    var sid = state.Path.keys.other.indexOf(key);\n    var tid = state.Path.other.table.indexOf(key);\n    console.log(\"SelectTableKey:\", key, sid, JSON.stringify(state.Path.keys.other));\n\n    if (sid !== -1 && key !== \"\") {\n      // key is selectable, but maybe not in table...\n      if (tid === -1) {\n        // key is not a table key, move it to the front of the table...\n        state.Path.moveOther2Table(state, key);\n        state.Path.exportAllKeys(state);\n      }\n\n      var keys = state.Path.other.rest;\n      var lenk = keys.length;\n      var colkey = state.Path.getColKey(state);\n      var rowkey = state.Path.getRowKey(state);\n\n      if (this.debug) {\n        console.log(\"Autopath or not?:\", lenk, colkey, rowkey, sid, state.Auto.complete);\n      }\n\n      ;\n\n      if (lenk === 0 || colkey === undefined || rowkey === undefined || !state.Auto.complete) {\n        // nothing to consider\n        ret = state.Path.tableKeyToPath(state, key, keyval, keywhere, keycnt);\n      } else {\n        if (this.debug) {\n          console.log(\"Before:\", JSON.stringify(state.Path.keys));\n        }\n\n        ;\n        ret = state.Auto.tableKeyToPath(state, key, keyval, keywhere, keycnt);\n      }\n    }\n\n    ;\n\n    if (ret) {\n      state.Path.exportAllKeys(state);\n    }\n\n    ;\n\n    if (this.debug) {\n      console.log(\"selectTableKey Done:\", JSON.stringify(ret));\n    }\n\n    ;\n    return ret;\n  };\n\n  this.tableKeyToPath = function (state, key, keyval, keywhere, keycnt) {\n    if (this.debug) {\n      console.log(\"tableKeyToPath Entering:\", key, keyval, keywhere, keycnt);\n    }\n\n    ; // look for table-key candidates in the rest-stack\n\n    var ret, lens, jj, jkey, jkeyval, jkeywhere;\n    var analysis = this.analyse(state, key, keywhere); // move the key\n\n    ret = state.Path.tableKeyToPath(state, key, keyval, keywhere, keycnt);\n\n    if (this.debug) {\n      console.log(\"Analysis:\", JSON.stringify(analysis));\n    }\n\n    ;\n\n    if (analysis.tblkey !== \"\") {\n      // we found a new table key\n      lens = analysis.sel.length;\n\n      for (jj = 0; jj < lens; jj++) {\n        jkey = analysis.sel[jj];\n        jkeyval = analysis.val[jj];\n        jkeywhere = jkey + \"=\" + jkeyval;\n        state.Path.tableKeyToPath(state, jkey, jkeyval, jkeywhere, 1);\n      }\n\n      state.Path.keys.other = [analysis.othkey, analysis.tblkey].concat(state.Utils.clean(analysis.rest));\n    } else if (analysis.sel.length > 0 || analysis.rest.length > 0) {\n      // no target\n      lens = analysis.sel.length;\n\n      for (jj = 0; jj < lens; jj++) {\n        jkey = analysis.sel[jj];\n        jkeyval = analysis.val[jj];\n        jkeywhere = jkey + \"=\" + jkeyval;\n        this.tableKeyToPath(state, jkey, jkeyval, jkeywhere, 1);\n      }\n\n      state.Path.keys.other = [analysis.othkey, \"\"].concat(state.Utils.clean(analysis.rest));\n    } else {\n      state.Path.keys.other = [analysis.othkey];\n    }\n\n    if (this.debug) {\n      console.log(\"tableKeyToPath Path:\", JSON.stringify(state.Path.keys));\n    }\n\n    ;\n\n    if (this.debug) {\n      console.log(\"tableKeyToPath Done:\", JSON.stringify(ret));\n    }\n\n    ;\n    return ret;\n  };\n\n  this.analyse = function (state, trgkey, trgwhere) {\n    if (this.debug) {\n      console.log(\"analyseOther Entering:\", JSON.stringify(trgkey), trgwhere);\n    }\n\n    ; //other key\n\n    var keys = state.Path.other.rest;\n    var where = state.Database.getWhere(state);\n    var colkey = state.Path.getColKey(state);\n    var rowkey = state.Path.getRowKey(state);\n    var prikey = trgkey === colkey ? rowkey : colkey; // the other key\n\n    var othkey = trgkey === colkey ? rowkey : colkey; // the other key\n\n    var sel = []; // selected\n\n    var val = []; // values\n\n    var rest = []; //rest\n\n    var tblkey = \"\"; // target key\n\n    var lenk = keys.length;\n    var keywhere = state.Database.addWhere(where, trgwhere); // redundant keys => selected\n    // insignificant keys => pushed back\n    // control keys => used in table\n\n    for (var ii = 0; ii < lenk; ii++) {\n      // first key dependencies\n      var testkey = keys[ii];\n\n      if (this.debug) {\n        console.log(\">>>Checking:\", testkey, \"(\", trgkey, \",\", othkey, \")\", where, trgwhere);\n      }\n\n      ;\n      var othtable = [othkey, testkey];\n      var othdep = this.getDependancy(state, keywhere, othtable);\n\n      if (this.debug) {\n        console.log(\"   Other:   \", othkey, testkey, JSON.stringify(othdep));\n      }\n\n      ; // in case there are no targets\n\n      if (othdep.intprt[othkey] === \"insignificant\" || othdep.intprt[testkey] === \"insignificant\" || tblkey !== \"\") {\n        // ignore insignificant testkey\n        rest.push(testkey);\n\n        if (this.debug) {\n          console.log(\"  Insignificant:\", testkey, JSON.stringify(sel), JSON.stringify(rest), tblkey);\n        }\n\n        ;\n      } else if (othdep.intprt[testkey] === \"redundant\") {\n        // select redundant testkey\n        var testval = othdep.val[testkey];\n        sel.push(testkey);\n        val.push(testval);\n\n        if (this.debug) {\n          console.log(\"  Redundant:\", testkey, JSON.stringify(sel), JSON.stringify(rest), tblkey, JSON.stringify(othdep), where);\n        }\n\n        ;\n      } else {\n        // control key\n        tblkey = testkey; // we have found a good candidate\n\n        if (this.debug) {\n          console.log(\"  Target:\", testkey, JSON.stringify(sel), JSON.stringify(rest), tblkey);\n        }\n\n        ;\n      }\n    }\n\n    if (this.debug) {\n      console.log(\"Sel/Val:\", JSON.stringify(sel), JSON.stringify(val));\n    }\n\n    ;\n    var ret = {\n      sel: sel,\n      val: val,\n      rest: rest,\n      tblkey: tblkey,\n      othkey: othkey\n    };\n\n    if (this.debug) {\n      console.log(\"analyseOther Done:\", JSON.stringify(ret));\n    }\n\n    ;\n    return ret;\n  }; // check if keys are inter-dependent, (\"common\", \"unique\", \"dependent\", \"unknown\") \n\n\n  this.getDependancy = function (state, where, keys) {\n    if (this.debug) {\n      console.log(\"getDependancy Entering:\", where, JSON.stringify(keys));\n    }\n\n    ;\n    var key; //var where = state.Database.getWhere(state);\n\n    var ret = {\n      dep: {},\n      val: {}\n    };\n    var hits = {};\n    var maxhits = {};\n    var docs = state.Database.getDocsCnt(state, where, keys); // current table keys\n    //if(this.debug){console.log(\"getDependancy:\",JSON.strings(docs));};\n\n    var slen = keys.length;\n    var dlen = docs.length;\n\n    for (var ii = 0; ii < dlen; ii++) {\n      var doc = docs[ii];\n\n      for (var jj = 0; jj < slen; jj++) {\n        key = keys[jj];\n\n        if (doc[key] !== undefined) {\n          var val = doc[key];\n          ret.val[key] = val;\n\n          if (hits[key] === undefined) {\n            hits[key] = {};\n          }\n\n          hits[key][val] = 1 + (hits[key][val] || 0);\n\n          if (hits[key][val] > (maxhits[key] || 0)) {\n            maxhits[key] = hits[key][val];\n          }\n        }\n\n        ;\n      }\n    }\n\n    ;\n\n    if (this.debug) {\n      console.log(\"Hits:\", dlen, JSON.stringify(hits), where);\n    }\n\n    ;\n\n    for (var kk = 0; kk < slen; kk++) {\n      key = keys[kk];\n\n      if (maxhits[key] !== undefined) {\n        if (maxhits[key] === 1) {\n          // every entry has unique value\n          ret.dep[key] = \"unique\";\n        } else if (maxhits[key] === dlen) {\n          ret.dep[key] = \"common\"; // all entries have same value\n        } else {\n          ret.dep[key] = \"dependent\"; // entries depend on values\n        }\n      } else {\n        ret.dep[key] = \"unknown\"; // not found in database\n      }\n    }\n\n    ;\n    ret.intprt = this.getInterpretation(state, keys, ret.dep);\n\n    if (this.debug) {\n      console.log(\"getDependancy Done:\", JSON.stringify(ret));\n    }\n\n    ;\n    return ret;\n  };\n\n  this.getInterpretation = function (state, keys, dep) {\n    var key;\n    var interpretation = {};\n    var slen = keys.length;\n\n    for (var kk = 0; kk < slen; kk++) {\n      var kkey = keys[kk];\n      interpretation[kkey] = \"control\";\n    }\n\n    ;\n\n    for (var jj = 0; jj < slen; jj++) {\n      key = keys[jj];\n\n      if (dep[key] === \"unique\") {\n        // \"unique\" keys depend on the other keys...\n        for (var rr = 0; rr < slen; rr++) {\n          var rkey = keys[rr];\n\n          if (dep[rkey] === \"unique\") {\n            // do not remove every \"unique\" key\n            if (rr > jj) {\n              interpretation[rkey] = \"redundant\"; // later control variables are redundant\n            }\n\n            ;\n          } else {\n            // remove all other variables\n            if (rr !== jj) {\n              if (dep[rkey] === \"common\") {\n                interpretation[rkey] = \"redundant\"; // \n              } else {\n                interpretation[rkey] = \"insignificant\"; //\n              }\n\n              ;\n            }\n\n            ;\n          }\n        }\n      }\n    }\n\n    var cnt = 0;\n\n    for (var ll = slen - 1; ll >= 0; ll--) {\n      key = keys[ll];\n\n      if (dep[key] === \"common\") {\n        // common keys have only one value\n        cnt = cnt + 1;\n\n        if (cnt < slen) {\n          // leave at least one redundant variable\n          interpretation[key] = \"redundant\";\n        }\n      }\n    }\n\n    ;\n    return interpretation;\n  };\n}\n\n;\nexport default Auto;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/lib/AutoLib.js"],"names":["Auto","debug","complete","toggle","state","console","log","Show","showConfig","selectTableKey","key","keyval","keywhere","keycnt","ret","sid","Path","keys","other","indexOf","tid","table","JSON","stringify","moveOther2Table","exportAllKeys","rest","lenk","length","colkey","getColKey","rowkey","getRowKey","undefined","tableKeyToPath","lens","jj","jkey","jkeyval","jkeywhere","analysis","analyse","tblkey","sel","val","othkey","concat","Utils","clean","trgkey","trgwhere","where","Database","getWhere","prikey","addWhere","ii","testkey","othtable","othdep","getDependancy","intprt","push","testval","dep","hits","maxhits","docs","getDocsCnt","slen","dlen","doc","kk","getInterpretation","interpretation","kkey","rr","rkey","cnt","ll"],"mappings":"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","sourcesContent":["//console.log(\"Loading AutoLib.js\");\n\nfunction Auto() {\n    this.debug=true;\n    this.complete=true;\n    this.toggle=function(state) {\n\tconsole.log(\"Pressed toggle\");\n\tstate.Auto.complete=!state.Auto.complete;\n\tstate.Show.showConfig(state);\n    };\n    // select given table key...\n    this.selectTableKey=function(state,key,keyval,keywhere,keycnt) { // keep abscissa\n\tif(this.debug){console.log(\"selectTableKey Entering:\",key,keyval,keywhere,keycnt);};\n\tvar ret=false;\n\tvar sid = state.Path.keys.other.indexOf(key);\n\tvar tid = state.Path.other.table.indexOf(key);\n\tconsole.log(\"SelectTableKey:\",key,sid,JSON.stringify(state.Path.keys.other));\n\tif (sid !== -1 && key !== \"\") { // key is selectable, but maybe not in table...\n\t    if (tid === -1) { // key is not a table key, move it to the front of the table...\n\t\tstate.Path.moveOther2Table(state,key);\n\t\tstate.Path.exportAllKeys(state);\n\t    }\n\t    var keys=state.Path.other.rest;\n\t    var lenk=keys.length;\n\t    var colkey=state.Path.getColKey(state);\n\t    var rowkey=state.Path.getRowKey(state);\n\t    if(this.debug){console.log(\"Autopath or not?:\",lenk,colkey,rowkey,sid,state.Auto.complete);};\n\t    if (lenk===0 || colkey===undefined || rowkey===undefined || ! state.Auto.complete ) { // nothing to consider\n\t\tret = state.Path.tableKeyToPath(state,key,keyval,keywhere,keycnt);\n\t    } else {\n\t\tif(this.debug){console.log(\"Before:\",JSON.stringify(state.Path.keys));};\n\t\tret = state.Auto.tableKeyToPath(state,key,keyval,keywhere,keycnt);\n\t    }\n\t};\n\tif (ret) {state.Path.exportAllKeys(state);};\n\tif(this.debug){console.log(\"selectTableKey Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    this.tableKeyToPath=function (state,key,keyval,keywhere,keycnt) {\n\tif(this.debug){console.log(\"tableKeyToPath Entering:\",key,keyval,keywhere,keycnt);};\n\t// look for table-key candidates in the rest-stack\n\tvar ret, lens, jj, jkey, jkeyval, jkeywhere;\n\tvar analysis=this.analyse(state,key,keywhere);\n\t// move the key\n\tret=state.Path.tableKeyToPath(state,key,keyval,keywhere,keycnt);\n\tif(this.debug){console.log(\"Analysis:\",JSON.stringify(analysis));};\n\tif (analysis.tblkey !== \"\") {  // we found a new table key\n\t    lens=analysis.sel.length;\n\t    for (jj=0;jj<lens;jj++) {\n\t\tjkey=analysis.sel[jj];\n\t\tjkeyval=analysis.val[jj];\n\t\tjkeywhere=jkey + \"=\" + jkeyval;\n\t\tstate.Path.tableKeyToPath(state,jkey,jkeyval,jkeywhere,1);\n\t    }\n\t    state.Path.keys.other=[analysis.othkey,analysis.tblkey].concat(state.Utils.clean(analysis.rest));\n\t} else if (analysis.sel.length > 0 || analysis.rest.length > 0) { // no target\n\t    lens=analysis.sel.length;\n\t    for (jj=0;jj<lens;jj++) {\n\t\tjkey=analysis.sel[jj];\n\t\tjkeyval=analysis.val[jj];\n\t\tjkeywhere=jkey + \"=\" + jkeyval;\n\t\tthis.tableKeyToPath(state,jkey,jkeyval,jkeywhere,1);\n\t    }\n\t    state.Path.keys.other=[analysis.othkey,\"\"].concat(state.Utils.clean(analysis.rest));\n\t} else {\n\t    state.Path.keys.other=[analysis.othkey];\n\t}\n\tif(this.debug){console.log(\"tableKeyToPath Path:\",JSON.stringify(state.Path.keys));};\n\tif(this.debug){console.log(\"tableKeyToPath Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    this.analyse=function(state,trgkey,trgwhere) {\n\tif(this.debug){console.log(\"analyseOther Entering:\",JSON.stringify(trgkey),trgwhere);};\n\t//other key\n\tvar keys=state.Path.other.rest;\n\tvar where=state.Database.getWhere(state);\n\tvar colkey=state.Path.getColKey(state);\n\tvar rowkey=state.Path.getRowKey(state);\n\tvar prikey=(trgkey===colkey?rowkey:colkey); // the other key\n\tvar othkey=(trgkey===colkey?rowkey:colkey); // the other key\n\tvar sel=[]; // selected\n\tvar val=[]; // values\n\tvar rest=[]; //rest\n\tvar tblkey=\"\"; // target key\n\tvar lenk=keys.length;\n\tvar keywhere=state.Database.addWhere(where,trgwhere);\n\t// redundant keys => selected\n\t// insignificant keys => pushed back\n\t// control keys => used in table\n\tfor (var ii = 0; ii< lenk; ii++) {\n\t    // first key dependencies\n\t    var testkey=keys[ii];\n\t    if(this.debug){console.log(\">>>Checking:\",testkey, \"(\",trgkey,\",\",othkey,\")\",where,trgwhere);};\n\t    var othtable=[othkey,testkey];\n\t    var othdep=this.getDependancy(state,keywhere,othtable);\n\t    if(this.debug){console.log(\"   Other:   \",othkey,testkey,JSON.stringify(othdep));};\n\t    // in case there are no targets\n\t    if (othdep.intprt[othkey]===\"insignificant\" || othdep.intprt[testkey]===\"insignificant\" || tblkey !== \"\") {    // ignore insignificant testkey\n\t\trest.push(testkey);\n\t\tif(this.debug){console.log(\"  Insignificant:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey);};\n\t    } else if (othdep.intprt[testkey]===\"redundant\") { // select redundant testkey\n\t\tvar testval=othdep.val[testkey];\n\t\tsel.push(testkey);\n\t\tval.push(testval);\n\t\tif(this.debug){console.log(\"  Redundant:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey,JSON.stringify(othdep),where);};\n\t    } else { // control key\n\t\ttblkey=testkey;                    // we have found a good candidate\n\t\tif(this.debug){console.log(\"  Target:\",testkey,JSON.stringify(sel),JSON.stringify(rest),tblkey);};\n\t    }\n\t}\n\tif(this.debug){console.log(\"Sel/Val:\",JSON.stringify(sel),JSON.stringify(val));};\n\tvar ret={sel:sel,val:val,rest:rest,tblkey:tblkey,othkey:othkey};\n\tif(this.debug){console.log(\"analyseOther Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    // check if keys are inter-dependent, (\"common\", \"unique\", \"dependent\", \"unknown\") \n    this.getDependancy=function(state,where,keys) {\n\tif(this.debug){console.log(\"getDependancy Entering:\",where,JSON.stringify(keys));};\n\tvar key;\n\t//var where = state.Database.getWhere(state);\n\tvar ret={dep:{},val:{}};\n\tvar hits={};\n\tvar maxhits={};\n\tvar docs=state.Database.getDocsCnt(state,where,keys); // current table keys\n\t//if(this.debug){console.log(\"getDependancy:\",JSON.strings(docs));};\n\tvar slen=keys.length;\n\tvar dlen = docs.length;\n\tfor (var ii = 0; ii < dlen; ii++) {\n    \t    var doc=docs[ii];\n\t    for (var jj=0;jj<slen;jj++) {\n\t\tkey=keys[jj];\n\t\tif (doc[key] !== undefined) {\n\t\t    var val=doc[key];\n\t\t    ret.val[key]=val;\n\t\t    if (hits[key]  === undefined) {hits[key]={};}\n\t\t    hits[key][val] = 1+ (hits[key][val]||0);\n\t\t    if (hits[key][val] > (maxhits[key]||0)) {\n\t\t\tmaxhits[key]=hits[key][val];\n\t\t    }\n\t\t};\n\t    }\n\t};\n\tif(this.debug){console.log(\"Hits:\",dlen,JSON.stringify(hits),where);};\n\tfor (var kk=0;kk<slen;kk++) {\n\t    key=keys[kk];\n\t    if (maxhits[key] !== undefined) {\n\t\tif (maxhits[key]  === 1) {          // every entry has unique value\n\t\t    ret.dep[key]=\"unique\";\n\t\t} else if (maxhits[key]  === dlen) {\n\t\t    ret.dep[key]=\"common\";    // all entries have same value\n\t\t} else {\n\t\t    ret.dep[key]=\"dependent\";    // entries depend on values\n\t\t}\n\t    } else {\n\t\tret.dep[key]=\"unknown\"; // not found in database\n\t    }\n\t};\n\tret.intprt=this.getInterpretation(state,keys,ret.dep);\n\tif(this.debug){console.log(\"getDependancy Done:\",JSON.stringify(ret));};\n\treturn ret;\n    };\n    this.getInterpretation=function(state,keys,dep){\n\tvar key;\n\tvar interpretation={};\n\tvar slen=keys.length;\n\tfor (var kk=0;kk<slen;kk++) {\n\t    var kkey=keys[kk];\n\t    interpretation[kkey]=\"control\";\n\t};\n\tfor (var jj=0;jj<slen;jj++) {\n\t    key=keys[jj];\n\t    if (dep[key]  === \"unique\") {// \"unique\" keys depend on the other keys...\n\t\tfor (var rr=0;rr<slen;rr++) {\n\t\t    var rkey=keys[rr];\n\t\t    if (dep[rkey] === \"unique\") { // do not remove every \"unique\" key\n\t\t\tif (rr > jj) {\n\t\t\t    interpretation[rkey]=\"redundant\"; // later control variables are redundant\n\t\t\t};\n\t\t    } else { // remove all other variables\n\t\t\tif (rr !== jj) {\n\t\t\t    if (dep[rkey] === \"common\") {\n\t\t\t\tinterpretation[rkey]=\"redundant\"; // \n\t\t\t    } else {\n\t\t\t\tinterpretation[rkey]=\"insignificant\"; //\n\t\t\t    };\n\t\t\t};\n\t\t    }\n\t\t}\n\t    }\n\t}\n\tvar cnt=0;\n\tfor (var ll=slen-1;ll>=0;ll--) {\n\t    key=keys[ll];\n\t    if (dep[key]  === \"common\") { // common keys have only one value\n\t\tcnt=cnt+1;\n\t\tif (cnt < slen) { // leave at least one redundant variable\n\t\t    interpretation[key]=\"redundant\";\n\t\t}\n\t    }\n\t};\n\treturn interpretation;\n    };\n};\nexport default Auto;\n"]},"metadata":{},"sourceType":"module"}