{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/TooltipComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TooltipIcon from '@material-ui/icons/HelpOutline';\nimport NoTooltipIcon from '@material-ui/icons/HighlightOff';\n\nvar styles = function styles(theme) {\n  return {\n    view: {\n      marginLeft: 'title'\n    },\n    button: {\n      color: 'white'\n    }\n  };\n};\n\nfunction TooltipIconMode(props) {\n  var state = props.state;\n\n  if (state.Layout.state.title === 1) {\n    return React.createElement(TooltipIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 20\n      },\n      __self: this\n    });\n  } else {\n    return React.createElement(NoTooltipIcon, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22\n      },\n      __self: this\n    });\n  }\n}\n\n;\n\nvar Tooltip =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Tooltip, _Component);\n\n  function Tooltip(props) {\n    var _this;\n\n    _classCallCheck(this, Tooltip);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Tooltip).call(this, props));\n    var state = props.state;\n    state.React.Tooltip = _assertThisInitialized(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(Tooltip, [{\n    key: \"showTooltip\",\n    value: function showTooltip(state) {\n      //console.log(\"Showing PathComponent.\",JSON.stringify(state.Path.keys));\n      this.forceUpdate();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state;\n\n      var onclick = function onclick(event) {\n        return state.Layout.toggleTooltip(state);\n      };\n\n      return React.createElement(\"div\", {\n        className: classes.view,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 39\n        },\n        __self: this\n      }, React.createElement(Button, {\n        className: classes.button,\n        onClick: onclick,\n        title: \"Show tooltip\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 40\n        },\n        __self: this\n      }, React.createElement(TooltipIconMode, {\n        state: state,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 45\n        },\n        __self: this\n      })));\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\nTooltip.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Tooltip);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/TooltipComponent.js"],"names":["React","Component","PropTypes","withStyles","Button","TooltipIcon","NoTooltipIcon","styles","theme","view","marginLeft","button","color","TooltipIconMode","props","state","Layout","title","Tooltip","forceUpdate","classes","onclick","event","toggleTooltip","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AACA,OAAOC,MAAP,MAAmB,0BAAnB;AAEA,OAAOC,WAAP,MAAwB,gCAAxB;AACA,OAAOC,aAAP,MAA0B,iCAA1B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,IAAI,EAAE;AACFC,MAAAA,UAAU,EAAE;AADV,KADe;AAIrBC,IAAAA,MAAM,EAAC;AACVC,MAAAA,KAAK,EAAC;AADI;AAJc,GAAL;AAAA,CAApB;;AAQA,SAASC,eAAT,CAA0BC,KAA1B,EAAiC;AAAA,MACtBC,KADsB,GACbD,KADa,CACtBC,KADsB;;AAE7B,MAAIA,KAAK,CAACC,MAAN,CAAaD,KAAb,CAAmBE,KAAnB,KAA2B,CAA/B,EAAkC;AACrC,WAAQ,oBAAC,WAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACI,GAFD,MAEO;AACV,WAAQ,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAR;AACI;AACJ;;AAAA;;IACKC,O;;;;;AACF,mBAAYJ,KAAZ,EAAmB;AAAA;;AAAA;;AACtB,iFAAMA,KAAN;AADsB,QAEfC,KAFe,GAEND,KAFM,CAEfC,KAFe;AAGtBA,IAAAA,KAAK,CAACf,KAAN,CAAYkB,OAAZ;AAHsB;AAIlB;;;;gCACWH,K,EAAO;AACtB;AACA,WAAKI,WAAL;AACI;;;6BACQ;AAAA,wBACW,KAAKL,KADhB;AAAA,UACLM,OADK,eACLA,OADK;AAAA,UACIL,KADJ,eACIA,KADJ;;AAEZ,UAAIM,OAAO,GAAG,SAAVA,OAAU,CAACC,KAAD;AAAA,eAAWP,KAAK,CAACC,MAAN,CAAaO,aAAb,CAA2BR,KAA3B,CAAX;AAAA,OAAd;;AACA,aACC;AAAK,QAAA,SAAS,EAAEK,OAAO,CAACX,IAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACG,oBAAC,MAAD;AACiB,QAAA,SAAS,EAAEW,OAAO,CAACT,MADpC;AAEiB,QAAA,OAAO,EAAEU,OAF1B;AAGU,QAAA,KAAK,EAAE,cAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKO,oBAAC,eAAD;AAAiB,QAAA,KAAK,EAAEN,KAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALP,CADH,CADD;AAWI;;;;EAxBiBd,S;;AA2BtBiB,OAAO,CAACM,SAAR,GAAoB;AAChBJ,EAAAA,OAAO,EAAElB,SAAS,CAACuB,MAAV,CAAiBC;AADV,CAApB;AAIA,eAAevB,UAAU,CAACI,MAAD,CAAV,CAAmBW,OAAnB,CAAf","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport TooltipIcon from '@material-ui/icons/HelpOutline';\nimport NoTooltipIcon from '@material-ui/icons/HighlightOff';\n\nconst styles = theme => ({\n    view: {\n        marginLeft: 'title',\n    },\n    button:{\n\tcolor:'white'\n    },\n});\nfunction TooltipIconMode (props) {\n    const {state} = props;\n    if (state.Layout.state.title===1) {\n\treturn (<TooltipIcon/>);\n    } else {\n\treturn (<NoTooltipIcon/>);\n    }\n};\nclass Tooltip extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state} = props;\n\tstate.React.Tooltip=this;\n    };\n    showTooltip(state) {\n\t//console.log(\"Showing PathComponent.\",JSON.stringify(state.Path.keys));\n\tthis.forceUpdate();\n    };\n    render() {\n\tconst {classes, state}=this.props;\n\tvar onclick = (event) => state.Layout.toggleTooltip(state);\n\treturn (\n\t\t<div className={classes.view}>\n\t\t   <Button\n                      className={classes.button}\n                      onClick={onclick}\n\t              title={\"Show tooltip\"}\n\t\t    >\n\t  \t       {<TooltipIconMode state={state}/>}\n                    </Button>\n\t\t</div>\n\t);\n    }\n}\n\nTooltip.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Tooltip);\n"]},"metadata":{},"sourceType":"module"}