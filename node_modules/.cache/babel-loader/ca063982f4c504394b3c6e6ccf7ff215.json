{"ast":null,"code":"//console.log(\"Loading DefaultLib.js\");\nfunction Default() {\n  this.deffile = \"defaults.json\"; // defaults file, contains default setup...\n\n  this.other = undefined;\n  this.trash = undefined;\n\n  this.init = function (state) {\n    var par = \"Default\" + state.Utils.version;\n    state.Utils.init(par, this);\n  };\n\n  this.loadDefault = function (state, callbacks) {\n    //console.log(\"loadDefault\");\n    if (state.Threshold.thrs !== undefined) {\n      // defaults already loaded, execute callback...\n      var callback = callbacks.shift();\n\n      if (callback !== undefined) {\n        callback(state, callbacks);\n      }\n    } else {\n      if (state.Database.ready) {\n        // make sure we do not re-load if we are already loading...\n        state.Database.ready = false;\n        state.Html.setLog(state, \"<em>Server-request: \" + this.deffile + \"</em>\");\n        var defHttp = new XMLHttpRequest();\n        defHttp.addEventListener(\"progress\", state.Html.progressInfo);\n        defHttp.addEventListener(\"load\", state.Html.loadInfo);\n        defHttp.addEventListener(\"error\", state.Html.errorInfo);\n        defHttp.addEventListener(\"abort\", state.Html.abortInfo);\n\n        defHttp.onreadystatechange = function () {\n          state.Database.ready = true;\n\n          if (defHttp.readyState === 4) {\n            if (defHttp.status === 200) {\n              //console.log(defHttp.responseText);\n              var json = JSON.parse(defHttp.responseText);\n\n              if (state.Threshold.thrs === undefined) {\n                state.Threshold.thrs = json.thrs;\n              }\n\n              if (state.Colors.colors === undefined) {\n                state.Colors.colors = json.colors;\n              }\n\n              if (this.other === undefined) {\n                this.other = json.other;\n              }\n\n              if (this.trash === undefined) {\n                this.trash = json.trash;\n              }\n\n              if (state.Path.order === undefined) {\n                state.Path.order = json.order;\n              }\n\n              if (state.Show.state === undefined) {\n                state.Show.state = json.state;\n              }\n\n              if (state.Layout.rotate === undefined) {\n                state.Layout.rotate = json.rotate;\n              }\n\n              if (state.Layout.priority === undefined) {\n                state.Layout.priority = json.priority;\n              } // console.log(\"Default thrs:\",JSON.stringify(state.Threshold.thrs));\n              // console.log(\"Default colors:\",JSON.stringify(Colors));\n              //console.log(\"Default other:\",JSON.stringify(this.other));\n              //console.log(\"Default trash:\",JSON.stringify(this.trash));\n              //console.log(\"Default order:\",JSON.stringify(state.Path.order));\n\n\n              var callback = callbacks.shift();\n\n              if (callback !== undefined) {\n                callback(state, callbacks);\n              }\n            } else if (state.React !== undefined && state.React.Html !== undefined) {\n              state.React.Html.setLog(state, \"<em>Unable to load \" + this.deffile + \"</em>\");\n            }\n          }\n        };\n\n        defHttp.responseType = \"\";\n        defHttp.overrideMimeType(\"text/text\");\n        defHttp.open(\"GET\", \"def/\" + this.deffile, true);\n        defHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n        defHttp.setRequestHeader('cache-control', 'max-age=0');\n        defHttp.setRequestHeader('expires', '0');\n        defHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n        defHttp.setRequestHeader('pragma', 'no-cache');\n        defHttp.send();\n      } else {\n        state.Html.setLog(state, \"<em>Already waiting for reply...</em>\");\n      }\n\n      ;\n    }\n\n    ;\n  };\n}\n\n;\nexport default Default;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/system/DefaultLib.js"],"names":["Default","deffile","other","undefined","trash","init","state","par","Utils","version","loadDefault","callbacks","Threshold","thrs","callback","shift","Database","ready","Html","setLog","defHttp","XMLHttpRequest","addEventListener","progressInfo","loadInfo","errorInfo","abortInfo","onreadystatechange","readyState","status","json","JSON","parse","responseText","Colors","colors","Path","order","Show","Layout","rotate","priority","React","responseType","overrideMimeType","open","setRequestHeader","send"],"mappings":"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","sourcesContent":["//console.log(\"Loading DefaultLib.js\");\nfunction Default() {\n    this.deffile=\"defaults.json\"; // defaults file, contains default setup...\n    this.other=undefined;\n    this.trash=undefined;\n    this.init=function(state){\n\tvar par=\"Default\"+state.Utils.version;\n\tstate.Utils.init(par,this);\n    };\n    this.loadDefault=function(state, callbacks ) {\n\t//console.log(\"loadDefault\");\n\tif (state.Threshold.thrs !== undefined) { // defaults already loaded, execute callback...\n\t    var callback=callbacks.shift();\n\t    if (callback !== undefined) {\n\t\tcallback(state,callbacks);\n\t    }\n\t} else {\n\t    if (state.Database.ready) { // make sure we do not re-load if we are already loading...\n\t\tstate.Database.ready=false;\n\t\tstate.Html.setLog(state, \"<em>Server-request: \"+this.deffile+\"</em>\");\n\t\tvar defHttp = new XMLHttpRequest();\n\t\tdefHttp.addEventListener(\"progress\",state.Html.progressInfo);\n\t\tdefHttp.addEventListener(\"load\",state.Html.loadInfo);\n\t\tdefHttp.addEventListener(\"error\",state.Html.errorInfo);\n\t\tdefHttp.addEventListener(\"abort\",state.Html.abortInfo);\n\t\tdefHttp.onreadystatechange = function() {\n\t\t    state.Database.ready=true;\n\t\t    if (defHttp.readyState  === 4) {\n\t\t\tif (defHttp.status  === 200) {\n\t\t\t    //console.log(defHttp.responseText);\n\t\t\t    var json = JSON.parse(defHttp.responseText);\n\t\t\t    if (state.Threshold.thrs  === undefined) {state.Threshold.thrs=json.thrs;}\n\t\t\t    if (state.Colors.colors  === undefined) {state.Colors.colors=json.colors;}\n\t\t\t    if (this.other  === undefined) {this.other=json.other;}\n\t\t\t    if (this.trash  === undefined) {this.trash=json.trash;}\n\t\t\t    if (state.Path.order  === undefined) {state.Path.order=json.order;}\n\t\t\t    if (state.Show.state  === undefined) {state.Show.state=json.state;}\n\t\t\t    if (state.Layout.rotate  === undefined) {state.Layout.rotate=json.rotate;}\n\t\t\t    if (state.Layout.priority  === undefined) {state.Layout.priority=json.priority;}\n\t\t\t    // console.log(\"Default thrs:\",JSON.stringify(state.Threshold.thrs));\n\t\t\t    // console.log(\"Default colors:\",JSON.stringify(Colors));\n\t\t\t    //console.log(\"Default other:\",JSON.stringify(this.other));\n\t\t\t    //console.log(\"Default trash:\",JSON.stringify(this.trash));\n\t\t\t    //console.log(\"Default order:\",JSON.stringify(state.Path.order));\n\t\t\t    var callback=callbacks.shift();\n\t\t\t    if (callback !== undefined) {\n\t\t\t\tcallback(state,callbacks);\n\t\t\t    }\n\t\t\t} else if (state.React !== undefined && state.React.Html !== undefined) {\n\t\t\t    state.React.Html.setLog(state,\"<em>Unable to load \"+this.deffile+\"</em>\");\n\t\t\t}\n\t\t    }\n\t\t}\n\t\tdefHttp.responseType=\"\";\n\t\tdefHttp.overrideMimeType(\"text/text\");\n\t\tdefHttp.open(\"GET\", \"def/\"+this.deffile, true);\n\t\tdefHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n\t\tdefHttp.setRequestHeader('cache-control', 'max-age=0');\n\t\tdefHttp.setRequestHeader('expires', '0');\n\t\tdefHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n\t\tdefHttp.setRequestHeader('pragma', 'no-cache');\n\t\tdefHttp.send(); \n\t    } else {\n\t\tstate.Html.setLog(state,\"<em>Already waiting for reply...</em>\");\n\t    };\n\t};\n    }\n};\nexport default Default;\n"]},"metadata":{},"sourceType":"module"}