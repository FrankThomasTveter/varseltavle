{"ast":null,"code":"import _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport * as THREE from 'three';\n\nvar TWEEN = require('es6-tween'); //import * as TWEEN from 'es6-tween';\n\n\nfunction random(scaleFactor) {\n  return Math.random() > 0.5 ? scaleFactor * Math.random() : -scaleFactor * Math.random();\n}\n\nvar MARKER_COLOR = '#ff0000';\nvar MARKER_LIGHT = '#ffcccc';\nvar MARKER_COMPANION_COLOR = '#ff7777';\nexport default function markerRenderer(marker) {\n  var size = Math.max(marker.value / 20, 1);\n  var geometry = new THREE.SphereGeometry(size, 10, 10);\n  console.log(\"Marker:\", JSON.stringify(marker));\n  var material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(marker.bgcolor) //    color: new THREE.Color(MARKER_COLOR),\n\n  }); // add light\n\n  var mesh = new THREE.Mesh(geometry, material);\n  var light = new THREE.PointLight(MARKER_LIGHT, 1, 0, 0);\n  mesh.children = [];\n  mesh.add(light); // add companion markers based on size\n\n  var companions = [];\n\n  for (var i = 0; i < 5; i++) {\n    var companionGeometry = new THREE.SphereGeometry(Math.min(size * Math.random() / 2, 1), 10, 10);\n    var companionMaterial = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(MARKER_COMPANION_COLOR)\n    });\n    var companion = new THREE.Mesh(companionGeometry, companionMaterial);\n    companion.lookAt(new THREE.Vector3(0, 0, 0));\n    companions.push(companion);\n    mesh.add(companion);\n  }\n\n  companions.forEach(function (companion, i) {\n    function animate() {\n      var from = {\n        opacity: 0.1,\n        position: companion.position.clone().toArray(),\n        scale: Math.max(0.5, Math.random())\n      };\n      var to = {\n        opacity: 0.5,\n        position: [random(size * 3), random(size * 3), random(size)],\n        scale: 0.01\n      };\n      var tween = new TWEEN.Tween(from).to(to, 4000).easing(TWEEN.Easing.Quadratic.InOut).delay(i * 200);\n      tween.on('update', function () {\n        var _from$position = _slicedToArray(from.position, 3),\n            x = _from$position[0],\n            y = _from$position[1],\n            z = _from$position[2];\n\n        var companionMaterial = companion.material; //\n\n        var intensityChange = random(0.05);\n\n        if (light.intensity + intensityChange > 0 && light.intensity + intensityChange < 1.5) {\n          light.intensity += intensityChange;\n        }\n\n        companionMaterial.opacity = from.opacity;\n        companion.scale.x = from.scale;\n        companion.scale.y = from.scale;\n        companion.scale.z = from.scale;\n        companion.position.set(x, y, z);\n      }).on('complete', animate).start();\n    }\n\n    animate();\n  });\n  return mesh;\n}","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/markerRenderer.ts"],"names":["THREE","TWEEN","require","random","scaleFactor","Math","MARKER_COLOR","MARKER_LIGHT","MARKER_COMPANION_COLOR","markerRenderer","marker","size","max","value","geometry","SphereGeometry","console","log","JSON","stringify","material","MeshBasicMaterial","color","Color","bgcolor","mesh","Mesh","light","PointLight","children","add","companions","i","companionGeometry","min","companionMaterial","companion","lookAt","Vector3","push","forEach","animate","from","opacity","position","clone","toArray","scale","to","tween","Tween","easing","Easing","Quadratic","InOut","delay","on","x","y","z","intensityChange","intensity","set","start"],"mappings":"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","sourcesContent":["import * as THREE from 'three';\nimport { Marker } from 'react-globe';\n\nconst TWEEN = require('es6-tween');\n//import * as TWEEN from 'es6-tween';\n\n\nfunction random(scaleFactor: number): number {\n  return Math.random() > 0.5\n    ? scaleFactor * Math.random()\n    : -scaleFactor * Math.random();\n}\n\nconst MARKER_COLOR = '#ff0000';\nconst MARKER_LIGHT = '#ffcccc';\nconst MARKER_COMPANION_COLOR = '#ff7777';\n\nexport default function markerRenderer(marker: Marker): THREE.Object3D {\n  const size = Math.max(marker.value / 20, 1);\n  const geometry = new THREE.SphereGeometry(size, 10, 10);\n  console.log(\"Marker:\",JSON.stringify(marker));\n  const material = new THREE.MeshBasicMaterial({\n    color: new THREE.Color(marker.bgcolor),\n//    color: new THREE.Color(MARKER_COLOR),\n  });\n\n  // add light\n  const mesh = new THREE.Mesh(geometry, material);\n  const light = new THREE.PointLight(MARKER_LIGHT, 1, 0, 0);\n  mesh.children = [];\n  mesh.add(light);\n\n  // add companion markers based on size\n  const companions: THREE.Mesh[] = [];\n  for (let i = 0; i < 5; i++) {\n    const companionGeometry = new THREE.SphereGeometry(\n      Math.min((size * Math.random())/2, 1),\n      10,\n      10,\n    );\n    const companionMaterial = new THREE.MeshBasicMaterial({\n      color: new THREE.Color(MARKER_COMPANION_COLOR),\n    });\n    const companion = new THREE.Mesh(companionGeometry, companionMaterial);\n    companion.lookAt(new THREE.Vector3(0, 0, 0));\n    companions.push(companion);\n    mesh.add(companion);\n  }\n\n  companions.forEach(\n    (companion, i: number): void => {\n      function animate(): void {\n        const from = {\n          opacity: 0.1,\n          position: companion.position.clone().toArray(),\n          scale: Math.max(0.5, Math.random()),\n        };\n        const to = {\n          opacity: 0.5,\n          position: [random(size * 3), random(size * 3), random(size)],\n          scale: 0.01,\n        };\n        const tween = new TWEEN.Tween(from)\n          .to(to, 4000)\n          .easing(TWEEN.Easing.Quadratic.InOut)\n          .delay(i * 200);\n        tween\n          .on(\n            'update',\n            (): void => {\n              const [x, y, z] = from.position;\n              const companionMaterial = companion.material as THREE.MeshBasicMaterial; //\n              const intensityChange = random(0.05);\n              if (\n                light.intensity + intensityChange > 0 &&\n                light.intensity + intensityChange < 1.5\n              ) {\n                light.intensity += intensityChange;\n              }\n              companionMaterial.opacity = from.opacity;\n              companion.scale.x = from.scale;\n              companion.scale.y = from.scale;\n              companion.scale.z = from.scale;\n              companion.position.set(x, y, z);\n            },\n          )\n          .on('complete', animate)\n          .start();\n      }\n      animate();\n    },\n  );\n  return mesh;\n}\n"]},"metadata":{},"sourceType":"module"}