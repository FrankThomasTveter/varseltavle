{"ast":null,"code":"import _objectWithoutProperties from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/CanvasGraphComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    canvas: {\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"hidden\"\n    },\n    pointer: {\n      cursor: \"pointer\"\n    },\n    nopointer: {},\n    div: {}\n  };\n};\n\nfunction updateCanvas(item) {\n  var _item$props = item.props,\n      state = _item$props.state,\n      elements = _item$props.elements,\n      colkey = _item$props.colkey,\n      rowkey = _item$props.rowkey,\n      colvalues = _item$props.colvalues,\n      index = _item$props.index,\n      range = _item$props.range,\n      plan = _item$props.plan,\n      level = _item$props.level,\n      bgcolor = _item$props.bgcolor;\n  var cnv = item.refs.canvas; // canvas\n\n  var ctx = cnv.getContext('2d'); // context\n  //console.log(\"Canvas:\",cnv.width,cnv.height);\n\n  var step = plan.step;\n  var height = cnv.height;\n  var elen = elements.length;\n  var blev = -1;\n  var ee;\n  var tot = 0;\n\n  for (ee = 0; ee < elen; ee++) {\n    tot = tot + elements[ee].docs.length;\n  }\n\n  ; // total number of segments\n\n  var cnt = 0;\n  var dw = cnv.width / Math.max(step, tot); // width of graph segment\n\n  var clen = 0;\n\n  if (colvalues !== undefined) {\n    clen = colvalues.length;\n  }\n\n  ; // number of columns\n\n  ctx.clearRect(0, 0, cnv.width, cnv.height); //    if (bgcolor !== undefined) {\n  //\tconsole.log(\"Clearing canvas\",bgcolor);\n  //\tctx.fillStyle=bgcolor;\n  //\tctx.fillRect(0,0,cnv.width,cnv.height);\n  //    }\n  //console.log(\"******** Canvas elements:\",elen,tot,dw,cnv.width)\n  //console.log(\"Range:\",JSON.stringify(range));\n  // draw thresholds\n\n  if (true) {\n    cnt = 0;\n\n    for (ee = 0; ee < elen; ee++) {\n      // loop over elements\n      var el = elements[ee];\n      var elevel = el.lev;\n      var color = state.Colors.getLevelColor(elevel);\n      blev = Math.max(blev, elevel);\n      var docs = el.docs;\n      var dlen = docs.length; //console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n      //console.log(\"Element:\",elevel,color,tot,cnt);\n\n      if (dlen > 0) {\n        for (var jj = 0; jj < dlen; jj++) {\n          // loop over segments in each element\n          cnt = cnt + 1;\n          var d = docs[jj];\n          state.Threshold.setGThr(state, d); //var lev=state.Threshold.getLevel(state,d);\n          //var col=state.Colors.getLevelColor(lev);\n          //console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n\n          for (var ii = index; ii < Math.min(index + step, clen); ii++) {\n            //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n            //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n            if (colvalues[ii] === \"\" || d[colkey] === colvalues[ii]) {\n              var t = state.Threshold.getThresholds(d); //console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n              //\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n              //console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\n              var min = range[0];\n              var max = range[1];\n              var mm = ii - index;\n\n              if (step < tot) {\n                mm = cnt - 1;\n              } //console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\n\n              var xmin = mm * dw; // width/10;\n\n              var xmax = (mm + 1) * dw; //width-xmin;\n\n              if (color !== undefined) {\n                for (var msr in t) {\n                  var tt = t[msr];\n                  var tmax = tt[state.Threshold.imax];\n                  var tthr = tt[state.Threshold.ithr];\n                  var tkey = tt[state.Threshold.ikey]; //var tlev  = tt[state.Threshold.ilev];\n                  //var tval  = tt[state.Threshold.ival];\n\n                  var ts;\n\n                  if (tmax) {\n                    ts = state.Threshold.thrs[tthr][tkey].max;\n                  } else {\n                    ts = state.Threshold.thrs[tthr][tkey].min;\n                  }\n\n                  ;\n                  var tlen = ts.length;\n\n                  for (var ll = 0; ll < tlen; ll++) {\n                    var tyval = ts[ll];\n                    var tzval = state.Show.scale(tyval, min, max, height, 0);\n                    var scolor = undefined;\n\n                    if (ll === level) {\n                      scolor = 'black';\n                    } else {\n                      scolor = state.Colors.getLevelColor(ll);\n                    }\n\n                    ;\n                    ctx.beginPath();\n                    ctx.lineWidth = 1;\n\n                    if (scolor !== undefined) {\n                      ctx.strokeStyle = scolor;\n                    }\n\n                    ctx.moveTo(xmin, tzval);\n                    ctx.lineTo(xmax, tzval);\n                    ctx.stroke(); //console.log(\"Stroke color:\",scolor,ll,tzval,cnv.width);\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n\n  ; // draw data\n\n  cnt = 0;\n\n  for (ee = 0; ee < elen; ee++) {\n    // loop over elements\n    var el = elements[ee];\n    var elevel = el.lev;\n    var color = state.Colors.getLevelColor(elevel);\n    blev = Math.max(blev, elevel);\n    var docs = el.docs;\n    var dlen = docs.length; //console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n    //console.log(\"Element:\",elevel,color,tot,cnt,dlen);\n\n    if (dlen > 0) {\n      for (var jj = 0; jj < dlen; jj++) {\n        // loop over segments in each element\n        cnt = cnt + 1;\n        var d = docs[jj];\n        state.Threshold.setGThr(state, d);\n        var lev = state.Threshold.getLevel(state, d);\n        var col = state.Colors.getLevelColor(lev); //console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n        //console.log(\"   Doc:\",JSON.stringify(colkey),JSON.stringify(colvalues),clen,index); // \n\n        for (var ii = index; ii < Math.min(index + step, clen); ii++) {\n          //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n          //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n          if (colvalues[ii] === \"\" || d[colkey] === colvalues[ii]) {\n            var t = state.Threshold.getThresholds(d); //console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n            //\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n            //console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\n            var min = range[0];\n            var max = range[1];\n            var ymin = min;\n\n            if (t.min !== undefined && t.min[state.Threshold.ival] !== undefined) {\n              ymin = t.min[state.Threshold.ival];\n            }\n\n            var ymax = max;\n\n            if (t.max !== undefined && t.max[state.Threshold.ival] !== undefined) {\n              ymax = t.max[state.Threshold.ival];\n            }\n\n            var mm = ii - index;\n\n            if (step < tot) {\n              mm = cnt - 1;\n            } //console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\n\n            var xmin = mm * dw; // width/10;\n\n            var xmax = (mm + 1) * dw; // width-2*xmin;\n\n            var zmin = state.Show.scale(ymin, min, max, height, 0);\n            var zmax = state.Show.scale(ymax, min, max, height, 0); //console.log(\"Fill:\",xmin,xmax,zmin,zmax,ymin,ymax,min,max,height);\n            //console.log(\"Fill:\",xmin,xmax,zmin,(zmax-zmin),height,color);\n            //ctx.fillStyle=\"cornflowerblue\";\n\n            color = col;\n\n            if (color !== undefined) {\n              var dx = Math.max(1, xmax - xmin);\n              var dz = zmax - zmin; //if (Math.abs(dz)/height < 0.5) {\n              //ctx.fillStyle=\"black\";\n              //ctx.fillRect(xmin,zmin,dx,dz);\n              //} else {\n\n              ctx.strokeStyle = 'black';\n              ctx.strokeRect(xmin, zmin, dx, dz); //}\n              //\n              //console.log(\"rect:\",lev,xmin,xmax,zmin,zmax);\n              //\n            }\n\n            ;\n          }\n        }\n      }\n    }\n  }\n\n  ;\n\n  if (tot === 0) {//console.log(\"No draw:\",JSON.stringify(colvalues),JSON.stringify(docs),dlen);\n  } else {//console.log(\"Drew:\",JSON.stringify(colvalues),tot,dlen);\n    }\n\n  ctx.lineWidth = 1;\n  var bcolor = state.Colors.getLevelColor(blev); //console.log(\"   Box:\",colkey,blev,bcolor); // JSON.stringify(lev),JSON.stringify(d),\n  //if (bcolor !== undefined) {\n  //ctx.strokeStyle='black';\n  //ctx.strokeRect(0,0, cnv.width,cnv.height);\n  //}\n  //console.log(\"CanvasGraph:\",cnv.width,cnv.height);\n}\n\nvar CanvasGraphComponent =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(CanvasGraphComponent, _React$Component);\n\n  function CanvasGraphComponent(props) {\n    var _this;\n\n    _classCallCheck(this, CanvasGraphComponent);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CanvasGraphComponent).call(this, props));\n    var state = props.state;\n    return _this;\n  }\n\n  _createClass(CanvasGraphComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          onclick = _this$props.onclick,\n          title = _this$props.title,\n          plan = _this$props.plan,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"onclick\", \"title\", \"plan\"]);\n\n      return React.createElement(\"canvas\", Object.assign({}, other, {\n        className: classes.canvas,\n        classes: classes,\n        onClick: onclick,\n        title: title,\n        plan: plan,\n        width: plan.width,\n        height: plan.cell,\n        ref: \"canvas\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return CanvasGraphComponent;\n}(React.Component); // width={plan.width} height={plan.cell}\n\n\nCanvasGraphComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CanvasGraphComponent);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/CanvasGraphComponent.js"],"names":["React","Component","PropTypes","withStyles","styles","theme","canvas","width","height","overflow","pointer","cursor","nopointer","div","updateCanvas","item","props","state","elements","colkey","rowkey","colvalues","index","range","plan","level","bgcolor","cnv","refs","ctx","getContext","step","elen","length","blev","ee","tot","docs","cnt","dw","Math","max","clen","undefined","clearRect","el","elevel","lev","color","Colors","getLevelColor","dlen","jj","d","Threshold","setGThr","ii","min","t","getThresholds","mm","xmin","xmax","msr","tt","tmax","imax","tthr","ithr","tkey","ikey","ts","thrs","tlen","ll","tyval","tzval","Show","scale","scolor","beginPath","lineWidth","strokeStyle","moveTo","lineTo","stroke","getLevel","col","ymin","ival","ymax","zmin","zmax","dx","dz","strokeRect","bcolor","CanvasGraphComponent","classes","onclick","title","other","cell","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, { Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    canvas: {\n\twidth:\"100%\",\n\theight:\"100%\",\n\toverflow:\"hidden\",\n    },\n    pointer: {\n\tcursor:\"pointer\"\n    },\n    nopointer: {\n    },\n    div :{},\n});\n\nfunction updateCanvas(item) {\n    const {state,elements,colkey,rowkey,colvalues,index,range,plan,level,bgcolor} = item.props;\n    const cnv=item.refs.canvas;        // canvas\n    const ctx = cnv.getContext('2d');  // context\n    //console.log(\"Canvas:\",cnv.width,cnv.height);\n    const step=plan.step;\n    var height = cnv.height;\n    var elen=elements.length;\n    var blev=-1;\n    var ee;\n    var tot=0; for (ee=0;ee<elen;ee++) {tot=tot+elements[ee].docs.length;}; // total number of segments\n    var cnt=0;\n    var dw= cnv.width/Math.max(step,tot); // width of graph segment\n    var clen=0; if (colvalues !== undefined) {clen=colvalues.length;}; // number of columns\n    ctx.clearRect(0, 0, cnv.width, cnv.height);\n//    if (bgcolor !== undefined) {\n//\tconsole.log(\"Clearing canvas\",bgcolor);\n//\tctx.fillStyle=bgcolor;\n//\tctx.fillRect(0,0,cnv.width,cnv.height);\n//    }\n    //console.log(\"******** Canvas elements:\",elen,tot,dw,cnv.width)\n    //console.log(\"Range:\",JSON.stringify(range));\n    // draw thresholds\n    if (true) {\n\tcnt=0;\n\tfor (ee=0;ee<elen;ee++) {   // loop over elements\n\t    var el=elements[ee];\n\t    var elevel=el.lev;\n\t    var color=state.Colors.getLevelColor(elevel);\n\t    blev=Math.max(blev,elevel);\n\t    var docs=el.docs;\n\t    var dlen=docs.length;\n\t    //console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n\t    //console.log(\"Element:\",elevel,color,tot,cnt);\n\t    if (dlen>0) {\n\t\tfor (var jj=0;jj<dlen;jj++) {   // loop over segments in each element\n\t\t    cnt=cnt+1;\n\t\t    var d=docs[jj];\n\t\t    state.Threshold.setGThr(state,d);\n\t\t    //var lev=state.Threshold.getLevel(state,d);\n\t\t    //var col=state.Colors.getLevelColor(lev);\n\t\t    //console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n\t\t    for (var ii=index;ii<Math.min(index+step,clen);ii++) {\n\t\t\t//console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n\t\t\t//console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n\t\t\tif (colvalues[ii]===\"\" || d[colkey]  === colvalues[ii]) {\n\t\t\t    var t=state.Threshold.getThresholds(d);\n\t\t\t    //console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n\t\t\t    //\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n\t\t\t    //console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\t\t\t    var min=range[0]\n\t\t\t    var max=range[1];\n\t\t\t    var mm=ii-index\n\t\t\t    if (step<tot) {mm=cnt-1;}\n\t\t\t    //console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\t\t\t    var xmin=mm*dw;       // width/10;\n\t\t\t    var xmax=(mm+1)*dw;   //width-xmin;\n\t\t\t    if (color !== undefined) {\n\t\t\t\tfor (var msr in t) {\n\t\t\t\t    var tt    = t[msr];\n\t\t\t\t    var tmax  = tt[state.Threshold.imax];\n\t\t\t\t    var tthr  = tt[state.Threshold.ithr];\n\t\t\t\t    var tkey  = tt[state.Threshold.ikey];\n\t\t\t\t    //var tlev  = tt[state.Threshold.ilev];\n\t\t\t\t    //var tval  = tt[state.Threshold.ival];\n\t\t\t\t    var ts;\n\t\t\t\t    if (tmax) {\n\t\t\t\t\tts=state.Threshold.thrs[tthr][tkey].max;\n\t\t\t\t    } else {\n\t\t\t\t\tts=state.Threshold.thrs[tthr][tkey].min;\n\t\t\t\t    };\n\t\t\t\t    var tlen=ts.length;\n\t\t\t\t    for (var ll=0;ll<tlen;ll++) {\n\t\t\t\t\tvar tyval=ts[ll];\n\t\t\t\t\tvar tzval=state.Show.scale(tyval,min,max,height,0);\n\t\t\t\t\tvar scolor=undefined;\n\t\t\t\t\tif (ll === level) {\n\t\t\t\t\t    scolor='black';\n\t\t\t\t\t} else {\n\t\t\t\t\t    scolor=state.Colors.getLevelColor(ll);\n\t\t\t\t\t};\n\t\t\t\t\tctx.beginPath();\n\t\t\t\t\tctx.lineWidth=1;\n\t\t\t\t\tif (scolor !== undefined) {ctx.strokeStyle=scolor;}\n\t\t\t\t\tctx.moveTo(xmin,tzval);\n\t\t\t\t\tctx.lineTo(xmax,tzval);\n\t\t\t\t\tctx.stroke();\n\t\t\t\t\t//console.log(\"Stroke color:\",scolor,ll,tzval,cnv.width);\n\t\t\t\t    }\n\t\t\t\t}\n\t\t\t    }\n\t\t\t}\n\t\t    }\n\t\t}\n\t    }\n\t}\n    };\n    // draw data\n    cnt=0;\n    for (ee=0;ee<elen;ee++) {   // loop over elements\n\tvar el=elements[ee];\n\tvar elevel=el.lev;\n\tvar color=state.Colors.getLevelColor(elevel);\n\tblev=Math.max(blev,elevel);\n\tvar docs=el.docs;\n\tvar dlen=docs.length;\n\t//console.log(\"   El:\",colkey,ee,elevel,blev); // JSON.stringify(lev),JSON.stringify(d),\n\t//console.log(\"Element:\",elevel,color,tot,cnt,dlen);\n\tif (dlen>0) {\n\t    for (var jj=0;jj<dlen;jj++) {   // loop over segments in each element\n\t\tcnt=cnt+1;\n\t\tvar d=docs[jj];\n\t\tstate.Threshold.setGThr(state,d);\n\t\tvar lev=state.Threshold.getLevel(state,d);\n\t\tvar col=state.Colors.getLevelColor(lev);\n\t\t//console.log(\"   Doc:\",colkey,jj,d.level,col,JSON.stringify(lev),JSON.stringify(d)); // \n\t\t//console.log(\"   Doc:\",JSON.stringify(colkey),JSON.stringify(colvalues),clen,index); // \n\t\tfor (var ii=index;ii<Math.min(index+step,clen);ii++) {\n\t\t    //console.log(\"   Checking Val:\",colkey,rowkey,ii,colvalues[ii],d[colkey]);\n\t\t    //console.log(\"Position:\",ii,jj,dlen,step,colkey,rowkey,colvalues[ii],d[colkey])\n\t\t    if (colvalues[ii]===\"\" || d[colkey]  === colvalues[ii]) {\n\t\t\tvar t=state.Threshold.getThresholds(d);\n\t\t\t//console.log(\"Making canvas:\",ii,colvalues[ii],color,JSON.stringify(d),\n\t\t\t//\t    \" Thr=\",JSON.stringify(t),width,height,JSON.stringify(range));\n\t\t\t//console.log(\"CanvasGraph:\",ii,jj,d.dtg,color,elevel,JSON.stringify(t));\n\t\t\tvar min=range[0]\n\t\t\tvar max=range[1];\n\t\t\tvar ymin=min;\n\t\t\tif (t.min !== undefined && t.min[state.Threshold.ival] !== undefined) {\n\t\t\t    ymin=t.min[state.Threshold.ival];\n\t\t\t}\n\t\t\tvar ymax=max;\n\t\t\tif (t.max !== undefined && t.max[state.Threshold.ival] !== undefined) {\n\t\t\t    ymax=t.max[state.Threshold.ival];\n\t\t\t}\n\t\t\tvar mm=ii-index\n\t\t\tif (step<tot) {mm=cnt-1;}\n\t\t\t//console.log(\" canvas position:\",mm,ii,cnt,step,tot)\n\t\t\tvar xmin=mm*dw;       // width/10;\n\t\t\tvar xmax=(mm+1)*dw;   // width-2*xmin;\n\t\t\tvar zmin=state.Show.scale(ymin,min,max,height,0);\n\t\t\tvar zmax=state.Show.scale(ymax,min,max,height,0);\n\t\t\t//console.log(\"Fill:\",xmin,xmax,zmin,zmax,ymin,ymax,min,max,height);\n\t\t\t//console.log(\"Fill:\",xmin,xmax,zmin,(zmax-zmin),height,color);\n\t\t\t//ctx.fillStyle=\"cornflowerblue\";\n\t\t\tcolor=col;\n\t\t\tif (color !== undefined) {\n\t\t\t    var dx=Math.max(1,xmax-xmin);\n\t\t\t    var dz=zmax-zmin;\n\t\t\t    //if (Math.abs(dz)/height < 0.5) {\n\t\t\t\t//ctx.fillStyle=\"black\";\n\t\t\t\t//ctx.fillRect(xmin,zmin,dx,dz);\n\t\t\t    //} else {\n\t\t\t\tctx.strokeStyle='black';\n\t\t\t\tctx.strokeRect(xmin,zmin,dx,dz);\n\t\t\t    //}\n\t\t\t    //\n\t\t\t    //console.log(\"rect:\",lev,xmin,xmax,zmin,zmax);\n\t\t\t    //\n\t\t\t};\n\t\t    }\n\t\t}\n\t    }\n\t}\n    };\n    if (tot  === 0) {\n\t//console.log(\"No draw:\",JSON.stringify(colvalues),JSON.stringify(docs),dlen);\n    } else {\n\t//console.log(\"Drew:\",JSON.stringify(colvalues),tot,dlen);\n    }\n    ctx.lineWidth=1;\n    var bcolor=state.Colors.getLevelColor(blev);\n    //console.log(\"   Box:\",colkey,blev,bcolor); // JSON.stringify(lev),JSON.stringify(d),\n    //if (bcolor !== undefined) {\n    //ctx.strokeStyle='black';\n    //ctx.strokeRect(0,0, cnv.width,cnv.height);\n    //}\n    //console.log(\"CanvasGraph:\",cnv.width,cnv.height);\n}\n    \n\nclass CanvasGraphComponent extends React.Component {\n    constructor(props) {\n        super(props);\n        const {state} = props;\n    };\n    componentDidMount() {\n        updateCanvas(this);\n    }\n    componentDidUpdate() {\n        updateCanvas(this);\n    }\n    render() {\n        const { classes, onclick, title, plan, ...other } = this.props;\n        return (\n\t\t<canvas {...other} className={classes.canvas} classes={classes} onClick={onclick} title={title} plan={plan} width={plan.width} height={plan.cell} ref=\"canvas\"/>\n        );\n    }\n}\n\n// width={plan.width} height={plan.cell}\n\nCanvasGraphComponent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CanvasGraphComponent);\n"]},"metadata":{},"sourceType":"module"}