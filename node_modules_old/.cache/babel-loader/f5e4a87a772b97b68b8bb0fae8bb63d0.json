{"ast":null,"code":"import _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useEffect, useState } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nexport default function useResize(mountRef, initialSize) {\n  var _useState = useState([0, 0]),\n      _useState2 = _slicedToArray(_useState, 2),\n      size = _useState2[0],\n      setSize = _useState2[1];\n\n  useEffect(function () {\n    var mount = mountRef.current; // update initial size\n\n    var width = 0;\n    var height = 0;\n\n    if (initialSize) {\n      // Use initialSize if it is provided\n      var _initialSize = _slicedToArray(initialSize, 2);\n\n      width = _initialSize[0];\n      height = _initialSize[1];\n    } else {\n      // Use parentElement size if resized has not updated\n      width = mount.offsetWidth;\n      height = mount.offsetHeight;\n    }\n\n    setSize([width, height]); // update resize using a resize observer\n\n    var resizeObserver = new ResizeObserver(function (entries) {\n      if (!entries || !entries.length) {\n        return;\n      }\n\n      if (initialSize === undefined) {\n        var _entries$0$contentRec = entries[0].contentRect,\n            _width = _entries$0$contentRec.width,\n            _height = _entries$0$contentRec.height;\n        setSize([_width, _height]);\n      }\n    });\n    resizeObserver.observe(mount);\n    return function () {\n      resizeObserver.unobserve(mount);\n    };\n  }, [initialSize, mountRef]);\n  return size;\n}","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/globe/useResize.js"],"names":["useEffect","useState","ResizeObserver","useResize","mountRef","initialSize","size","setSize","mount","current","width","height","offsetWidth","offsetHeight","resizeObserver","entries","length","undefined","contentRect","observe","unobserve"],"mappings":";AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,cAAP,MAA2B,0BAA3B;AACA,eAAe,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,WAA7B,EAA0C;AAAA,kBAC7BJ,QAAQ,CAAC,CAAC,CAAD,EAAI,CAAJ,CAAD,CADqB;AAAA;AAAA,MAC9CK,IAD8C;AAAA,MACxCC,OADwC;;AAErDP,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAMQ,KAAK,GAAGJ,QAAQ,CAACK,OAAvB,CADY,CAEZ;;AACA,QAAIC,KAAK,GAAG,CAAZ;AACA,QAAIC,MAAM,GAAG,CAAb;;AACA,QAAIN,WAAJ,EAAiB;AACb;AADa,wCAEKA,WAFL;;AAEZK,MAAAA,KAFY;AAELC,MAAAA,MAFK;AAGhB,KAHD,MAIK;AACD;AACAD,MAAAA,KAAK,GAAGF,KAAK,CAACI,WAAd;AACAD,MAAAA,MAAM,GAAGH,KAAK,CAACK,YAAf;AACH;;AACDN,IAAAA,OAAO,CAAC,CAACG,KAAD,EAAQC,MAAR,CAAD,CAAP,CAdY,CAeZ;;AACA,QAAMG,cAAc,GAAG,IAAIZ,cAAJ,CAAmB,UAACa,OAAD,EAAa;AACnD,UAAI,CAACA,OAAD,IAAY,CAACA,OAAO,CAACC,MAAzB,EAAiC;AAC7B;AACH;;AACD,UAAIX,WAAW,KAAKY,SAApB,EAA+B;AAAA,oCACDF,OAAO,CAAC,CAAD,CAAP,CAAWG,WADV;AAAA,YACnBR,MADmB,yBACnBA,KADmB;AAAA,YACZC,OADY,yBACZA,MADY;AAE3BJ,QAAAA,OAAO,CAAC,CAACG,MAAD,EAAQC,OAAR,CAAD,CAAP;AACH;AACJ,KARsB,CAAvB;AASAG,IAAAA,cAAc,CAACK,OAAf,CAAuBX,KAAvB;AACA,WAAO,YAAM;AACTM,MAAAA,cAAc,CAACM,SAAf,CAAyBZ,KAAzB;AACH,KAFD;AAGH,GA7BQ,EA6BN,CAACH,WAAD,EAAcD,QAAd,CA7BM,CAAT;AA8BA,SAAOE,IAAP;AACH","sourcesContent":["import { useEffect, useState } from 'react';\nimport ResizeObserver from 'resize-observer-polyfill';\nexport default function useResize(mountRef, initialSize) {\n    const [size, setSize] = useState([0, 0]);\n    useEffect(() => {\n        const mount = mountRef.current;\n        // update initial size\n        let width = 0;\n        let height = 0;\n        if (initialSize) {\n            // Use initialSize if it is provided\n            [width, height] = initialSize;\n        }\n        else {\n            // Use parentElement size if resized has not updated\n            width = mount.offsetWidth;\n            height = mount.offsetHeight;\n        }\n        setSize([width, height]);\n        // update resize using a resize observer\n        const resizeObserver = new ResizeObserver((entries) => {\n            if (!entries || !entries.length) {\n                return;\n            }\n            if (initialSize === undefined) {\n                const { width, height } = entries[0].contentRect;\n                setSize([width, height]);\n            }\n        });\n        resizeObserver.observe(mount);\n        return () => {\n            resizeObserver.unobserve(mount);\n        };\n    }, [initialSize, mountRef]);\n    return size;\n}\n"]},"metadata":{},"sourceType":"module"}