{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/ChartComponent.js\";\nimport React, { Component } from \"react\"; //useState, useEffect, useRef\n\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles'; //import {teal_palette} from '../mui/metMuiThemes';\n//import TooltipContainer from './TooltipContainer'\n\nimport MapInfo from './MapInfo';\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport worldGeoJSON from 'geojson-world-map';\nimport { Map, GeoJSON, Marker } from 'react-leaflet'; //TileLayer ,Popup\n\nL.Icon.Default.imagePath = 'images';\nvar footAndHeaderheight = \"100px\";\n\nvar styles = function styles(theme) {\n  return {\n    content: {},\n    root: {\n      height: '100%',\n      padding: 0,\n      margin: 0,\n      border: '0px solid red'\n    },\n    dataset: {},\n    map: {\n      backgroundColor: 'Gray',\n      overflow: 'hidden',\n      height: '100%'\n    }\n  };\n};\n\nvar GeoJsonMap = /*#__PURE__*/function (_Component) {\n  _inherits(GeoJsonMap, _Component);\n\n  var _super = _createSuper(GeoJsonMap);\n\n  function GeoJsonMap(props) {\n    var _this;\n\n    _classCallCheck(this, GeoJsonMap);\n\n    _this = _super.call(this, props);\n\n    _this.updateWindowDimensions = function () {\n      _this.width = window.innerWidth;\n      _this.height = window.innerHeight;\n      _this.bbx = _this.el.getBoundingClientRect(); //console.log(\"Width/Height:\",this.width,this.height,this.bbx.width,this.bbx.height)\n    };\n\n    var state = props.state;\n    state.React.Chart = _assertThisInitialized(_this);\n    _this.bbx = {\n      height: 0,\n      width: 0\n    };\n    _this._ismounted = false;\n    _this.elem = null;\n    _this.data = {\n      cnt: 99,\n      markers: [],\n      animations: [],\n      focus: [0, 0],\n      dist: 2\n    };\n    _this.update = _this.update.bind(_assertThisInitialized(_this));\n    _this.cnt = 0;\n    return _this;\n  }\n\n  _createClass(GeoJsonMap, [{\n    key: \"update\",\n    value: function update() {\n      //console.log(\"Force update EarthMap...\");\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.data = {\n        cnt: 99,\n        markers: [],\n        animations: [],\n        focus: [0, 0],\n        dist: 2\n      };\n      this._ismounted = true;\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n      window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"element\",\n    value: function element(el) {\n      if (el !== undefined && el !== null) {\n        this.el = el;\n        this.bbx = this.el.getBoundingClientRect(); //console.log(\"BBX width/height:\",this.bbx.width,this.bbx.height);\n      }\n\n      ;\n    }\n  }, {\n    key: \"onClickMarker\",\n    // getTooltipContent(marker) {\n    // \t//console.log(\"Path:\",JSON.stringify(marker.state.Path.keys));\n    // \t//console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere);\n    // \tvar state=marker.state;\n    // \tif (state.Layout.state.tooltip===2) {\n    // \t    return null;\n    // \t} else {\n    // \t    return <TooltipContainer state={marker.state} data={marker} update={this.update}/>;\n    // \t}\n    // }\n    value: function onClickMarker(marker, markerObject, event) {\n      //console.log(\"Clicked marker...\",marker.id)\n      var state = marker.state;\n      var colkey = marker.colrangekey;\n      var colrange = marker.colrange;\n      var colwhere = marker.colwhere;\n      var rowkey = marker.rowrangekey;\n      var rowrange = marker.rowrange;\n      var rowwhere = marker.rowwhere;\n      var cnt = marker.cnt; //console.log(\"Clicked marker...\",marker.id);\n\n      state.Navigate.selectItemRange(state, colkey, rowkey, colrange, rowrange, colwhere, rowwhere, cnt, 1);\n    }\n  }, {\n    key: \"handleClick\",\n    value: function handleClick() {\n      this.refs.map.leafletElement.locate();\n    }\n  }, {\n    key: \"showMap\",\n    value: function showMap(state, force) {\n      this.getMarkers(state); //this.data.markers=this.getMarkers(state);\n\n      if (force !== undefined && force) {\n        this.update();\n      }\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers(state) {\n      // get marker data\n      //console.log(\"Setting map markers...\");\n      //var ll=this.markers.length;\n      //for (var ii=0; ii < ll; ii++) {\n      //    this.markers.splice(ii,1);\n      //};\n      //this.data.markers.splice(0,this.data.markers.length);\n      var tcnt = this.cnt;\n      var markers = []; //   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\n      var matrix = state.React.matrix;\n      var first = true;\n      var sum = {\n        x2: 0,\n        y2: 0,\n        z2: 0,\n        x: 0,\n        y: 0,\n        z: 0,\n        cnt: 0\n      };\n\n      if (matrix !== undefined) {\n        state.Matrix.printElements(matrix);\n        var colkey = state.Path.getColKey(state) || \"\";\n        var rowkey = state.Path.getRowKey(state) || \"\";\n        var colvalues = state.Path.filterKeys(state, state.Matrix.values[colkey] || [\"\"]);\n        var rowvalues = state.Path.filterKeys(state, state.Matrix.values[rowkey] || [\"\"]); //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n        //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n        //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n        // make markers\n        //console.log(\"Rows:\",rowvalues.length);\n\n        var rlen = rowvalues.length;\n\n        for (var ii = 0; ii < rlen; ii++) {\n          var rowval = rowvalues[ii];\n          var rowrange = state.Grid.getLatRange(state, rowvalues[ii]);\n          var rowwhere = state.Grid.getLatWhere(state, \"lat\", rowvalues[ii]);\n          var clen = colvalues.length;\n\n          for (var jj = 0; jj < clen; jj++) {\n            var colval = colvalues[jj];\n            var colrange = state.Grid.getLonRange(state, colvalues[jj]);\n            var colwhere = state.Grid.getLonWhere(state, \"lon\", colvalues[jj]);\n            var element = state.Matrix.getMatrixElement(colval, rowval, matrix);\n\n            if (element !== undefined) {\n              var lon = element.colval;\n              var lat = element.rowval;\n              var lev = element.maxlev;\n              var svgid = element.svgid; //console.log(\"Found SVG:\",svgid);\n\n              var bgcolor = state.Colors.getLevelBgColor(lev);\n              var fgcolor = state.Colors.getLevelFgColor(lev);\n              var cnt = element.cnt;\n              tcnt = tcnt + 1;\n              var rlat = lat * Math.PI / 180;\n              var rlon = lon * Math.PI / 180;\n              var clat = Math.cos(rlat);\n              var slat = Math.sin(rlat);\n              var clon = Math.cos(rlon);\n              var slon = Math.sin(rlon);\n              var pos = {\n                x: clat * clon,\n                y: clat * slon,\n                z: slat\n              };\n              sum.cnt = sum.cnt + 1;\n              sum.x = sum.x + pos.x;\n              sum.y = sum.y + pos.y;\n              sum.z = sum.z + pos.z;\n              sum.x2 = sum.x2 + pos.x * pos.x;\n              sum.y2 = sum.y2 + pos.y * pos.y;\n              sum.z2 = sum.z2 + pos.z * pos.z;\n              var fact = 4; //console.log(\"mapComponent:\",colkey,colval,rowkey,rowval);\n              //console.log(\"Colors:\",tcnt,lev,bgcolor);\n              //console.log(\"Marker:\",tcnt,\" Pos=\",lat,lon,\" Lev=\",lev,bgcolor);\n\n              var size = {\n                width: (colrange.max - colrange.min) * clat * fact,\n                depth: (rowrange.max - rowrange.min) * fact,\n                height: 1\n              };\n              var mark = {\n                id: tcnt,\n                coordinates: [lat, lon],\n                city: \"Test\",\n                value: 5,\n                size: size,\n                element: element,\n                level: lev,\n                bgcolor: bgcolor,\n                fgcolor: fgcolor,\n                svgid: svgid,\n                state: state,\n                colkey: \"_lon\",\n                colvalues: [colval],\n                step: 1,\n                index: 0,\n                colrangekey: \"lon\",\n                colrange: colrange,\n                colwhere: colwhere,\n                rowkey: \"_lat\",\n                rowval: rowval,\n                rowrangekey: \"lat\",\n                rowrange: rowrange,\n                rowwhere: rowwhere,\n                map: true,\n                cnt: cnt\n              };\n\n              if (first) {\n                first = false; //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n              }\n\n              markers.push(mark); //this.data.markers.push(mark);\n            }\n          }\n        }\n      } else {\n        console.log(\"No matrix available...\");\n      }\n\n      if (sum.cnt > 0) {\n        var cen = {\n          cnt: sum.cnt\n        };\n        cen.x = sum.x / sum.cnt;\n        cen.y = sum.y / sum.cnt;\n        cen.z = sum.z / sum.cnt;\n        cen.x2 = sum.x2 / sum.cnt;\n        cen.y2 = sum.y2 / sum.cnt;\n        cen.z2 = sum.z2 / sum.cnt;\n        var ll = Math.sqrt(cen.x * cen.x + cen.y * cen.y + cen.z * cen.z);\n        var dist = Math.max(.01, Math.sqrt(cen.x2 - cen.x * cen.x + cen.y2 - cen.y * cen.y + cen.z2 - cen.z * cen.z));\n        var zoom = Math.min(10, Math.max(1, 2 - Math.log(dist / 0.3) / Math.log(2)));\n\n        if (ll > 0) {\n          cen.x = cen.x / ll;\n          cen.y = cen.y / ll;\n          cen.z = cen.z / ll;\n        } else {\n          cen.x = 1;\n          cen.y = 0;\n          cen.z = 0;\n        }\n\n        ll = Math.sqrt(cen.x * cen.x + cen.y * cen.y);\n        clat = Math.acos(ll) * 180 / Math.PI;\n        clon = Math.atan2(cen.y, cen.x) * 180 / Math.PI; //console.log(\"Center:\",clon,clat,dist,ll,cen,zoom);\n\n        this.data.dist = dist;\n        this.data.zoom = zoom;\n        this.data.focus = [clat, clon];\n        this.data.animations = [{\n          animationDuration: 1000,\n          coordinates: [clat, clon],\n          distanceRadiusScale: dist,\n          easingFunction: ['Linear', 'None']\n        }];\n      } //console.log(\"Markers:\",this.data.markers.length);\n\n\n      this.cnt = tcnt;\n\n      if (this.cnt > 1000000) {\n        this.cnt = 0;\n      }\n\n      ;\n      this.data.markers = markers;\n      this.data.cnt = this.data.cnt + 1;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state;\n      var height = 'calc(95% - ' + footAndHeaderheight + ')'; //var layoutMode  = state.Layout.getLayoutMode(state);\n\n      var markFunction = function markFunction(mark) {\n        //var data=JSON.stringify({rowkey:mark.rowkey,\n        //\t\t\t   rowval:mark.rowval,\n        //\t\t\t   colkey:mark.colkey,\n        //\t\t\t   colvalues:mark.colvalues,\n        //\t\t\t   index:0,\n        //\t\t\t   step:0,\n        //\t\t\t   layout:layoutMode}); \n        //<Marker data-for='cell' data-tip={data}/>\n        var size = 50;\n        var svgstr = state.Svg.getSvg(state, mark.svgid, 'black', mark.bgcolor, size); //mark.fgcolor,mark.bgcolor\n        //console.log(\"Using SVG:\",mark.svgid,svgstr,mark.fgcolor,mark.bgcolor);\n\n        var flagIcon = new L.divIcon({\n          iconSize: [size, size],\n          html: svgstr,\n          className: 'dummy'\n        }); //console.log(\"Tooltip data:\",data);\n\n        return /*#__PURE__*/React.createElement(Marker, {\n          key: mark.id,\n          mark: mark,\n          zIndexOffset: mark.level * 10,\n          position: mark.coordinates,\n          icon: flagIcon,\n          onClick: function onClick() {\n            return _this2.onClickMarker(mark);\n          },\n          __self: _this2,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 265,\n            columnNumber: 12\n          }\n        });\n      };\n\n      return /*#__PURE__*/React.createElement(\"div\", {\n        ref: function ref(el) {\n          _this2.element(el);\n        },\n        className: classes.content,\n        style: {\n          position: 'fixed',\n          marginLeft: '0%',\n          width: '90%',\n          height: height,\n          overflow: 'hidden'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 273,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(MapInfo, {\n        state: state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 4\n        }\n      }), /*#__PURE__*/React.createElement(Map, {\n        className: classes.map,\n        center: this.data.focus,\n        zoom: this.data.zoom,\n        maxZoom: 10,\n        attributionControl: true,\n        zoomControl: false,\n        doubleClickZoom: true,\n        scrollWheelZoom: true,\n        dragging: true,\n        animate: true,\n        easeLinearity: 0.35,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(GeoJSON, {\n        data: worldGeoJSON,\n        style: function style() {\n          return {\n            weight: 1,\n            color: 'darkGray',\n            //'#4a83ec',\n            opacity: 1,\n            fillColor: 'lightGray',\n            //\"#1a1d62\",\n            fillOpacity: 1 //zIndex: 1,\n\n          };\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 294,\n          columnNumber: 21\n        }\n      }), this.data.markers.map(markFunction)));\n    }\n  }]);\n\n  return GeoJsonMap;\n}(Component); //<Tooltip><h1>Test</h1></Tooltip>\n//<TooltipContainer state={state}\n// classes={{button:classes.button}}\n// element={this}\n// type={'cell'}/>\n\n\nGeoJsonMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(GeoJsonMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/ChartComponent.js"],"names":["React","Component","PropTypes","withStyles","MapInfo","L","worldGeoJSON","Map","GeoJSON","Marker","Icon","Default","imagePath","footAndHeaderheight","styles","theme","content","root","height","padding","margin","border","dataset","map","backgroundColor","overflow","GeoJsonMap","props","updateWindowDimensions","width","window","innerWidth","innerHeight","bbx","el","getBoundingClientRect","state","Chart","_ismounted","elem","data","cnt","markers","animations","focus","dist","update","bind","forceUpdate","addEventListener","removeEventListener","undefined","marker","markerObject","event","colkey","colrangekey","colrange","colwhere","rowkey","rowrangekey","rowrange","rowwhere","Navigate","selectItemRange","refs","leafletElement","locate","force","getMarkers","tcnt","matrix","first","sum","x2","y2","z2","x","y","z","Matrix","printElements","Path","getColKey","getRowKey","colvalues","filterKeys","values","rowvalues","rlen","length","ii","rowval","Grid","getLatRange","getLatWhere","clen","jj","colval","getLonRange","getLonWhere","element","getMatrixElement","lon","lat","lev","maxlev","svgid","bgcolor","Colors","getLevelBgColor","fgcolor","getLevelFgColor","rlat","Math","PI","rlon","clat","cos","slat","sin","clon","slon","pos","fact","size","max","min","depth","mark","id","coordinates","city","value","level","step","index","push","console","log","cen","ll","sqrt","zoom","acos","atan2","animationDuration","distanceRadiusScale","easingFunction","classes","markFunction","svgstr","Svg","getSvg","flagIcon","divIcon","iconSize","html","className","onClickMarker","position","marginLeft","weight","color","opacity","fillColor","fillOpacity","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\"; //useState, useEffect, useRef\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\n//import {teal_palette} from '../mui/metMuiThemes';\n\n//import TooltipContainer from './TooltipContainer'\nimport MapInfo from './MapInfo'\nimport L from 'leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport worldGeoJSON from 'geojson-world-map';\nimport { Map, GeoJSON, Marker } from 'react-leaflet';//TileLayer ,Popup\n\nL.Icon.Default.imagePath = 'images'\n\nconst footAndHeaderheight = \"100px\";\n\nconst styles = theme => ({\n    content: {},\n    root: {\n\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '0px solid red'\n    },\n    dataset: {},\n    map: {\n\tbackgroundColor:'Gray',\n\toverflow: 'hidden',\n\theight: '100%',\n    },\n});\n\nclass GeoJsonMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state} = props;\n\tstate.React.Chart=this;\n\tthis.bbx={height:0,width:0};\n\tthis._ismounted = false;\n\tthis.elem=null;\n\tthis.data={cnt:99,markers:[],animations:[],focus:[0,0],dist:2};\n\tthis.update=this.update.bind(this);\n\tthis.cnt=0;    };    \n    update() {\n\t//console.log(\"Force update EarthMap...\");\n\tthis.forceUpdate();\n    };\n    componentDidMount() {\n\tthis.data={cnt:99,markers:[],animations:[],focus:[0,0],dist:2};\n\tthis._ismounted = true;\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    } \n    componentWillUnmount() {\n\tthis._ismounted = false;\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    };\n    updateWindowDimensions = () => {\n        this.width= window.innerWidth;\n\tthis.height=window.innerHeight;\n\tthis.bbx=this.el.getBoundingClientRect();\n\t//console.log(\"Width/Height:\",this.width,this.height,this.bbx.width,this.bbx.height)\n    };\n    element(el) {\n\tif (el !== undefined && el !== null) {\n\t    this.el=el;\n\t    this.bbx=this.el.getBoundingClientRect();\n\t    //console.log(\"BBX width/height:\",this.bbx.width,this.bbx.height);\n\t};\n    };\n    // getTooltipContent(marker) {\n    // \t//console.log(\"Path:\",JSON.stringify(marker.state.Path.keys));\n    // \t//console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere);\n    // \tvar state=marker.state;\n    // \tif (state.Layout.state.tooltip===2) {\n    // \t    return null;\n    // \t} else {\n    // \t    return <TooltipContainer state={marker.state} data={marker} update={this.update}/>;\n    // \t}\n    // }\n    onClickMarker(marker, markerObject, event) {\n\t//console.log(\"Clicked marker...\",marker.id)\n\tvar state=marker.state;\n\tvar colkey=marker.colrangekey;\n\tvar colrange=marker.colrange;\n\tvar colwhere=marker.colwhere;\n\tvar rowkey=marker.rowrangekey;\n\tvar rowrange=marker.rowrange;\n\tvar rowwhere=marker.rowwhere;\n\tvar cnt=marker.cnt;\n\t//console.log(\"Clicked marker...\",marker.id);\n\tstate.Navigate.selectItemRange(state,colkey,rowkey,colrange,rowrange,colwhere,rowwhere,cnt,1);\n    };\n    handleClick() {\n\tthis.refs.map.leafletElement.locate();\n    }\n    showMap(state,force) {\n\tthis.getMarkers(state);//this.data.markers=this.getMarkers(state);\n\tif (force !== undefined && force) {\n\t    this.update();\n\t}\n    };\n    getMarkers(state) {\n\t// get marker data\n\t//console.log(\"Setting map markers...\");\n\t//var ll=this.markers.length;\n\t//for (var ii=0; ii < ll; ii++) {\n\t//    this.markers.splice(ii,1);\n\t//};\n\t//this.data.markers.splice(0,this.data.markers.length);\n\tvar tcnt=this.cnt;\n\tvar markers=[];//   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\tvar matrix=state.React.matrix;\n\tvar first=true;\n\tvar sum={x2:0,y2:0,z2:0,x:0,y:0,z:0,cnt:0};\n\tif (matrix !== undefined) {\n\t    state.Matrix.printElements(matrix);\n\t    var colkey = state.Path.getColKey(state)||\"\";\n\t    var rowkey = state.Path.getRowKey(state)||\"\";\n\t    var colvalues = state.Path.filterKeys(state,state.Matrix.values[colkey]||[\"\"]);\n\t    var rowvalues = state.Path.filterKeys(state,state.Matrix.values[rowkey]||[\"\"]);\n\t    //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n\t    //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n\t    //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n            // make markers\n\t    //console.log(\"Rows:\",rowvalues.length);\n            var rlen=rowvalues.length;\n            for(var ii=0; ii<rlen; ii++) {\n\t\tvar rowval=rowvalues[ii];\n\t\tvar rowrange=state.Grid.getLatRange(state,rowvalues[ii]);\n\t\tvar rowwhere = state.Grid.getLatWhere(state,\"lat\",rowvalues[ii]);\n\t\tvar clen=colvalues.length;\n\t\tfor(var jj=0; jj<clen; jj++) {\n\t\t    var colval=colvalues[jj];\n\t\t    var colrange=state.Grid.getLonRange(state,colvalues[jj]);\n\t\t    var colwhere = state.Grid.getLonWhere(state,\"lon\",colvalues[jj]);\n\t\t    var element=state.Matrix.getMatrixElement(colval,rowval,matrix);\n\t\t    if (element !== undefined) {\n\t\t\tvar lon=element.colval;\n\t\t\tvar lat=element.rowval;\n\t\t\tvar lev=element.maxlev;\n\t\t\tvar svgid=element.svgid;\n\t\t\t//console.log(\"Found SVG:\",svgid);\n\t\t\tvar bgcolor=state.Colors.getLevelBgColor(lev);\n\t\t\tvar fgcolor=state.Colors.getLevelFgColor(lev);\n\t\t\tvar cnt=element.cnt;\n\t\t\ttcnt=tcnt+1;\n\t\t\tvar rlat=lat*Math.PI/180;\n\t\t\tvar rlon=lon*Math.PI/180;\n\t\t\tvar clat=Math.cos(rlat);\n\t\t\tvar slat=Math.sin(rlat);\n\t\t\tvar clon=Math.cos(rlon);\n\t\t\tvar slon=Math.sin(rlon);\n\t\t\tvar pos={x:clat*clon,y:clat*slon,z:slat};\n\t\t\tsum.cnt=sum.cnt+1;\n\t\t\tsum.x=sum.x+pos.x;\n\t\t\tsum.y=sum.y+pos.y;\n\t\t\tsum.z=sum.z+pos.z;\n\t\t\tsum.x2=sum.x2+pos.x*pos.x;\n\t\t\tsum.y2=sum.y2+pos.y*pos.y;\n\t\t\tsum.z2=sum.z2+pos.z*pos.z;\n\t\t\tvar fact=4;\n\t\t\t//console.log(\"mapComponent:\",colkey,colval,rowkey,rowval);\n\t\t\t//console.log(\"Colors:\",tcnt,lev,bgcolor);\n\t\t\t//console.log(\"Marker:\",tcnt,\" Pos=\",lat,lon,\" Lev=\",lev,bgcolor);\n\t\t\tvar size={width : (colrange.max-colrange.min)*clat*fact,\n\t\t\t\t  depth : (rowrange.max-rowrange.min)*fact,\n\t\t\t\t  height: 1};\n\t\t\tvar mark={id:tcnt,\n\t\t\t\t  coordinates:[lat,lon],\n\t\t\t\t  city:\"Test\",\n\t\t\t\t  value:5,\n\t\t\t\t  size:size,\n\t\t\t\t  element:element,\n\t\t\t\t  level:lev,\n\t\t\t\t  bgcolor:bgcolor,\n\t\t\t\t  fgcolor:fgcolor,\n\t\t\t\t  svgid:svgid,\n\t\t\t\t  state:state,\n\t\t\t\t  colkey:\"_lon\",\n\t\t\t\t  colvalues:[colval],\n\t\t\t\t  step:1,\n\t\t\t\t  index:0,\n\t\t\t\t  colrangekey:\"lon\",\n\t\t\t\t  colrange:colrange,\n\t\t\t\t  colwhere:colwhere,\n\t\t\t\t  rowkey:\"_lat\",\n\t\t\t\t  rowval:rowval,\n\t\t\t\t  rowrangekey:\"lat\",\n\t\t\t\t  rowrange:rowrange,\n\t\t\t\t  rowwhere:rowwhere,\n\t\t\t\t  map:true,\n\t\t\t\t  cnt:cnt\n\t\t\t\t };\n\t\t\tif (first) {\n\t\t\t    first=false;\n\t\t\t    //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n\t\t\t}\n\t\t\tmarkers.push(mark);\n\t\t\t//this.data.markers.push(mark);\n\t\t    }\n\t\t}\n\t    }\n\t} else {\n\t    console.log(\"No matrix available...\");\n\t}\n\tif (sum.cnt>0) {\n\t    var cen={cnt:sum.cnt};\n\t    cen.x=sum.x/sum.cnt;\n\t    cen.y=sum.y/sum.cnt;\n\t    cen.z=sum.z/sum.cnt;\n\t    cen.x2=sum.x2/sum.cnt;\n\t    cen.y2=sum.y2/sum.cnt;\n\t    cen.z2=sum.z2/sum.cnt;\n\t    var ll=Math.sqrt(cen.x*cen.x + cen.y*cen.y + cen.z*cen.z);\n\t    var dist=Math.max(.01,Math.sqrt(cen.x2 - cen.x*cen.x + cen.y2 - cen.y*cen.y + cen.z2 - cen.z*cen.z));\n\t    var zoom=Math.min(10,Math.max(1,2-(Math.log(dist/(0.3)))/Math.log(2)));\n\t    if (ll>0) {\n\t\tcen.x=cen.x/ll;\n\t\tcen.y=cen.y/ll;\n\t\tcen.z=cen.z/ll;\n\t    } else {\n\t\tcen.x=1;\n\t\tcen.y=0;\n\t\tcen.z=0;\n\t    }\n\t    ll=Math.sqrt(cen.x*cen.x+cen.y*cen.y);\n\t    clat=Math.acos(ll) * 180/Math.PI;\n\t    clon=Math.atan2(cen.y,cen.x) * 180/Math.PI;\n\t    //console.log(\"Center:\",clon,clat,dist,ll,cen,zoom);\n\t    this.data.dist=dist;\n\t    this.data.zoom=zoom;\n\t    this.data.focus=[clat,clon];\n\t    this.data.animations=[{\n\t\tanimationDuration:1000,\n\t\tcoordinates:[clat,clon],\n\t\tdistanceRadiusScale:dist,\n\t\teasingFunction: ['Linear','None'],\n\t    }];\n\t}\n\t//console.log(\"Markers:\",this.data.markers.length);\n\tthis.cnt=tcnt;\n\tif (this.cnt > 1000000) {this.cnt=0;};\n\tthis.data.markers=markers;\n\tthis.data.cnt=this.data.cnt+1;\n    };\n  render() {\n      const { classes, state } = this.props;\n      var height='calc(95% - '+footAndHeaderheight+')';\n      //var layoutMode  = state.Layout.getLayoutMode(state);\n      var markFunction= (mark) => {\n\t  //var data=JSON.stringify({rowkey:mark.rowkey,\n\t //\t\t\t   rowval:mark.rowval,\n\t//\t\t\t   colkey:mark.colkey,\n\t//\t\t\t   colvalues:mark.colvalues,\n\t//\t\t\t   index:0,\n\t//\t\t\t   step:0,\n\t//\t\t\t   layout:layoutMode}); \n\t  //<Marker data-for='cell' data-tip={data}/>\n\t  var size=50;\n\t  var svgstr=state.Svg.getSvg(state,mark.svgid,'black',mark.bgcolor,size); //mark.fgcolor,mark.bgcolor\n\t  //console.log(\"Using SVG:\",mark.svgid,svgstr,mark.fgcolor,mark.bgcolor);\n\t  var flagIcon = new  L.divIcon({iconSize: [size, size],html: svgstr,className:'dummy'});\n\t  //console.log(\"Tooltip data:\",data);\n\t  return (<Marker key={mark.id}\n\t\t  mark={mark}\n\t\t  zIndexOffset={mark.level*10}\n\t\t  position={mark.coordinates}\n\t\t  icon={flagIcon}\n\t\t  onClick={()=>this.onClickMarker(mark)}\n\t\t  ></Marker>)\n      };\n      return (<div ref={el=>{this.element(el)}}\n\t      className={classes.content}\n\t      style={{position:'fixed',\n\t\t      marginLeft:'0%',\n\t\t      width: '90%',\n\t\t      height: height,\n\t\t      overflow:'hidden'}}\n\t      >\n\t\t <MapInfo state={state}/>\n\t         <Map className={classes.map}\n                    center={this.data.focus}\n                    zoom={this.data.zoom}\n                    maxZoom={10}\n                    attributionControl={true}\n                    zoomControl={false}\n                    doubleClickZoom={true}\n                    scrollWheelZoom={true}\n                    dragging={true}\n                    animate={true}\n                    easeLinearity={0.35} \n   \t         >\n                    <GeoJSON\n                       data={worldGeoJSON}\n                       style={() => ({\n\t\t\t   weight: 1,\n\t\t \t   color: 'darkGray',//'#4a83ec',\n\t\t\t   opacity: 1,\n\t\t\t   fillColor: 'lightGray',//\"#1a1d62\",\n\t\t\t   fillOpacity: 1, //zIndex: 1,\n\t\t       })}/>\n\t      {this.data.markers.map(markFunction)}\n\t      </Map>\n\t      </div>\n\t     );\n  }\n}\n\n//<Tooltip><h1>Test</h1></Tooltip>\n\t\t  \n\t      //<TooltipContainer state={state}\n\t        // classes={{button:classes.button}}\n\t        // element={this}\n\t        // type={'cell'}/>\n\nGeoJsonMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(GeoJsonMap);\n"]},"metadata":{},"sourceType":"module"}