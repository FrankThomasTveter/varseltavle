{"ast":null,"code":"import _objectWithoutProperties from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _classCallCheck from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle_new/src/react/CanvasTextComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nvar styles = function styles(theme) {\n  return {\n    canvas: {\n      width: \"100%\",\n      height: \"100%\",\n      overflow: \"hidden\"\n    },\n    pointer: {\n      cursor: \"pointer\",\n      padding: theme.spacing(0)\n    },\n    nopointer: {\n      padding: theme.spacing(0)\n    }\n  };\n};\n\nfunction drawMarker(ctx, height, offset, width) {\n  ctx.strokeStyle = 'blue';\n  ctx.beginPath();\n  ctx.moveTo(offset, 0);\n  ctx.lineTo(offset + width, height);\n  ctx.moveTo(offset + width, 0);\n  ctx.lineTo(offset, height);\n  ctx.strokeRect(offset, 0, offset + width, height);\n  ctx.stroke();\n}\n\n;\n\nfunction updateCanvas(item) {\n  var _item$props = item.props,\n      label = _item$props.label,\n      plan = _item$props.plan,\n      color = _item$props.color;\n  var cnv = item.refs.text;\n  var ctx = cnv.getContext('2d');\n  var ilabel = label || \"\"; //var cnvheight = cnv.height;\n\n  ctx.save(); //ctx.translate(newx, newy);\n\n  if (plan.font !== undefined) {\n    ctx.font = plan.font;\n  } //ctx.font = \"40px Courier\"\n\n\n  ctx.clearRect(0, 0, cnv.width, cnv.height); //\n  //ctx.strokeStyle='gray';\n  //ctx.strokeRect(0,0,cnv.width,cnv.height);\n  //\n  //ctx.rect(0,0,100,100);\n  //ctx.stroke();\n  //console.log(\">>>> Plan:\",JSON.stringify(plan),item.width,item.height);\n\n  if (color !== undefined) {\n    //console.log(\"Using color:\",color);\n    ctx.fillStyle = color;\n  } else {\n    ctx.fillStyle = 'black'; //console.log(\"Using black...\");\n  }\n\n  ;\n\n  if (plan.rotate !== undefined && plan.rotate) {\n    ctx.textAlign = \"left\"; //left right center\n\n    ctx.translate(item.width - plan.border - plan.xoffset, item.height - plan.border - plan.yoffset);\n    ctx.rotate(-Math.PI / 2);\n    ctx.fillText(ilabel, 0, 0); // labelXposition\n  } else if (plan.align === \"right\") {\n    ctx.textAlign = \"right\"; //left right center\n\n    ctx.fillText(ilabel, plan.width - plan.border + plan.xoffset, item.height - plan.border - plan.yoffset); // labelXposition\n  } else if (plan.align === \"center\") {\n    ctx.textAlign = \"center\"; //left right center\n\n    ctx.fillText(ilabel, plan.width - plan.border + plan.xoffset, item.height - plan.border - plan.yoffset); // labelXposition\n  } else {\n    ctx.fillText(ilabel, plan.border + plan.xoffset, item.height - plan.border - plan.yoffset); // labelXposition\n  }\n\n  ;\n  ctx.restore(); //ctx.rect(0,0,item.width,item.height);\n  //ctx.stroke();\n  //console.log(\"Label:\",ilabel,item.width,item.height, plan.border,plan.xoffset);\n  //console.log(\"CanvasText:\",cnv.width,cnv.height);\n\n  if (item.invalid) {\n    drawMarker(ctx, cnv.height, 0, cnv.width);\n  }\n\n  ;\n}\n\nvar CanvasTextComponent = /*#__PURE__*/function (_Component) {\n  _inherits(CanvasTextComponent, _Component);\n\n  var _super = _createSuper(CanvasTextComponent);\n\n  function CanvasTextComponent() {\n    _classCallCheck(this, CanvasTextComponent);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(CanvasTextComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      updateCanvas(this);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          onclick = _this$props.onclick,\n          title = _this$props.title,\n          plan = _this$props.plan,\n          color = _this$props.color,\n          invalid = _this$props.invalid,\n          other = _objectWithoutProperties(_this$props, [\"classes\", \"onclick\", \"title\", \"plan\", \"color\", \"invalid\"]);\n\n      this.width = plan.width;\n      this.height = plan.height;\n      this.invalid = invalid;\n      this.color = color;\n      return /*#__PURE__*/React.createElement(\"canvas\", Object.assign({}, other, {\n        className: classes.canvas,\n        classes: classes,\n        onClick: onclick,\n        title: title,\n        plan: plan,\n        width: plan.width,\n        height: plan.height,\n        ref: \"text\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 3\n        }\n      }));\n    }\n  }]);\n\n  return CanvasTextComponent;\n}(Component);\n\nCanvasTextComponent.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(CanvasTextComponent); // function getTextWidth(txt, fontname, fontsize){\n//     if(getTextWidth.c === undefined){\n//         getTextWidth.c=document.createElement('canvas');\n//         getTextWidth.ctx=getTextWidth.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextWidth.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextWidth.ctx.measureText(txt).width;\n// };\n// function getTextHeight(fontname, fontsize){\n//     if(getTextHeight.c === undefined){\n//         getTextHeight.c=document.createElement('canvas');\n//         getTextHeight.ctx=getTextHeight.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextHeight.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextHeight.ctx.measureText('M').width;\n// }","map":{"version":3,"sources":["/home/franktt/react/varseltavle_new/src/react/CanvasTextComponent.js"],"names":["React","Component","PropTypes","withStyles","styles","theme","canvas","width","height","overflow","pointer","cursor","padding","spacing","nopointer","drawMarker","ctx","offset","strokeStyle","beginPath","moveTo","lineTo","strokeRect","stroke","updateCanvas","item","props","label","plan","color","cnv","refs","text","getContext","ilabel","save","font","undefined","clearRect","fillStyle","rotate","textAlign","translate","border","xoffset","yoffset","Math","PI","fillText","align","restore","invalid","CanvasTextComponent","classes","onclick","title","other","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nconst styles = theme => ({\n    canvas: {\n\twidth:\"100%\",\n\theight:\"100%\",\n\toverflow:\"hidden\",\n    },\n    pointer: {\n\tcursor:\"pointer\",\n\tpadding: theme.spacing(0),\n    },\n    nopointer: {\n\tpadding: theme.spacing(0),\n    },\n});\nfunction drawMarker(ctx,height,offset,width) {\n    ctx.strokeStyle='blue';\n    ctx.beginPath();\n    ctx.moveTo(offset,0);\n    ctx.lineTo(offset+width,height);\n    ctx.moveTo(offset+width,0);\n    ctx.lineTo(offset,height);\n    ctx.strokeRect(offset,0,offset+width,height);\n    ctx.stroke();\n};\nfunction updateCanvas(item) {\n    const {label,plan,color} = item.props;\n    const cnv=item.refs.text;\n    const ctx = cnv.getContext('2d');\n    var ilabel=label||\"\";\n    //var cnvheight = cnv.height;\n    ctx.save();\n    //ctx.translate(newx, newy);\n    if (plan.font !== undefined) {\n\tctx.font = plan.font;\n    }\n    //ctx.font = \"40px Courier\"\n    ctx.clearRect(0, 0, cnv.width, cnv.height);\n    //\n    //ctx.strokeStyle='gray';\n    //ctx.strokeRect(0,0,cnv.width,cnv.height);\n    //\n    //ctx.rect(0,0,100,100);\n    //ctx.stroke();\n    //console.log(\">>>> Plan:\",JSON.stringify(plan),item.width,item.height);\n    if (color !== undefined) {\n\t//console.log(\"Using color:\",color);\n\tctx.fillStyle=color;\n    } else {\n\tctx.fillStyle='black';\n\t//console.log(\"Using black...\");\n    };\n    if (plan.rotate !== undefined && plan.rotate) {\n\tctx.textAlign = \"left\"; //left right center\n\tctx.translate(item.width-plan.border-plan.xoffset,item.height-plan.border-plan.yoffset);\n\tctx.rotate(-Math.PI/2);\n\tctx.fillText(ilabel, 0, 0); // labelXposition\n    } else if (plan.align === \"right\") {\n\tctx.textAlign = \"right\"; //left right center\n\tctx.fillText(ilabel, plan.width-plan.border+plan.xoffset, item.height-plan.border-plan.yoffset); // labelXposition\n    } else if (plan.align === \"center\") {\n\tctx.textAlign = \"center\"; //left right center\n\tctx.fillText(ilabel, plan.width-plan.border+plan.xoffset, item.height-plan.border-plan.yoffset); // labelXposition\n    } else {\n\tctx.fillText(ilabel, plan.border+plan.xoffset, item.height-plan.border-plan.yoffset); // labelXposition\n    };\n    ctx.restore();\n    //ctx.rect(0,0,item.width,item.height);\n    //ctx.stroke();\n    //console.log(\"Label:\",ilabel,item.width,item.height, plan.border,plan.xoffset);\n    //console.log(\"CanvasText:\",cnv.width,cnv.height);\n    if (item.invalid) {\n\tdrawMarker(ctx,cnv.height,0,cnv.width);\n    };\n}\n    \n\nclass CanvasTextComponent extends Component {\n    componentDidMount() {\n        updateCanvas(this);\n    }\n    componentDidUpdate() {\n        updateCanvas(this);\n    }\n    render() {\n        const { classes, onclick, title, plan, color, invalid, ...other } = this.props;\n\tthis.width=plan.width;\n\tthis.height=plan.height;\n\tthis.invalid=invalid;\n\tthis.color=color;\n        return (\n\t\t<canvas {...other} className={classes.canvas} classes={classes} onClick={onclick} title={title} \n\t            plan={plan} width={plan.width} height={plan.height} ref=\"text\" />\n        );\n    }\n}\n\nCanvasTextComponent.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(CanvasTextComponent);\n// function getTextWidth(txt, fontname, fontsize){\n//     if(getTextWidth.c === undefined){\n//         getTextWidth.c=document.createElement('canvas');\n//         getTextWidth.ctx=getTextWidth.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextWidth.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextWidth.ctx.measureText(txt).width;\n// };\n// function getTextHeight(fontname, fontsize){\n//     if(getTextHeight.c === undefined){\n//         getTextHeight.c=document.createElement('canvas');\n//         getTextHeight.ctx=getTextHeight.c.getContext('2d');\n//     }\n//     if (fontname !== undefined) {\n// \tgetTextHeight.ctx.font = fontsize + ' ' + fontname;\n//     }\n//     return getTextHeight.ctx.measureText('M').width;\n// }\n"]},"metadata":{},"sourceType":"module"}