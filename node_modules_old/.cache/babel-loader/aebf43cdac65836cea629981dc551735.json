{"ast":null,"code":"//console.log(\"Loading FileLib.js\");\nfunction File() {\n  this.ready = true;\n\n  this.next = function (state, response, callbacks) {\n    //console.log(\"Next:\",JSON.stringify(callbacks));\n    if (callbacks !== undefined) {\n      var callback = callbacks.shift();\n\n      if (callback !== undefined) {\n        setTimeout(callback(state, response, callbacks), 0.1);\n      }\n    }\n  };\n\n  this.load = function (state, file, callbacks) {\n    console.log(\"Loading:\", JSON.stringify(file), JSON.stringify(callbacks));\n\n    if (state.File.ready) {\n      // make sure we do not re-load if we are already loading\n      state.File.ready = false;\n      state.Html.setFootnote(state, \"Server-request: \" + file);\n      state.Html.setProgress(state, true);\n      var regHttp = new XMLHttpRequest();\n      regHttp.addEventListener(\"progress\", function (e) {\n        return state.Html.progressInfo(state, e);\n      }); //regHttp.addEventListener(\"load\",(e)=>state.Html.loadInfo(state,e));\n      //regHttp.addEventListener(\"error\",(e)=>state.Html.errorInfo(state,e));\n\n      regHttp.addEventListener(\"abort\", function (e) {\n        return state.Html.abortInfo(state, e);\n      });\n\n      regHttp.onreadystatechange = function () {\n        state.File.ready = true;\n\n        if (regHttp.readyState === 4) {\n          if (regHttp.status === 200) {\n            //console.log(regHttp.responseText);\n            var response = regHttp.responseText; //console.log(\"Ready:\",file,regHttp.readyState,regHttp.status,JSON.stringify(response))\n\n            state.File.next(state, response, callbacks);\n          } else {\n            state.Html.setFootnote(state, \"Unable to load \" + file);\n            state.Html.setProgress(state, false); //state.Html.setConsole(file+\" error\");\n          }\n        } else {\n          state.Html.setFootnote(state, file + \" error\");\n          state.Html.setProgress(state, false);\n        }\n\n        ;\n      };\n\n      regHttp.responseType = \"\";\n      regHttp.overrideMimeType(\"text/text\");\n      console.log(\"Http file:\", JSON.stringify(file));\n      regHttp.open(\"GET\", file, true);\n      regHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n      regHttp.setRequestHeader('cache-control', 'max-age=0');\n      regHttp.setRequestHeader('expires', '0');\n      regHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n      regHttp.setRequestHeader('pragma', 'no-cache');\n      regHttp.send();\n    } else {\n      //state.Html.setConsole(\"\");\n      state.Html.setFootnote(state, \"Already waiting for reply...\");\n      state.Html.setProgress(state, true);\n    }\n\n    ;\n  };\n}\n\n;\nexport default File;","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/lib/FileLib.js"],"names":["File","ready","next","state","response","callbacks","undefined","callback","shift","setTimeout","load","file","console","log","JSON","stringify","Html","setFootnote","setProgress","regHttp","XMLHttpRequest","addEventListener","e","progressInfo","abortInfo","onreadystatechange","readyState","status","responseText","responseType","overrideMimeType","open","setRequestHeader","send"],"mappings":"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","sourcesContent":["//console.log(\"Loading FileLib.js\");\n\nfunction File() {\n    this.ready=true;\n    this.next=function(state, response, callbacks ) {\n\t//console.log(\"Next:\",JSON.stringify(callbacks));\n\tif (callbacks !== undefined) {\n\t    var callback=callbacks.shift();\n\t    if (callback !== undefined) {\n\t\tsetTimeout(callback(state,response,callbacks),0.1);\n\t    }\n\t}\n    }\n    this.load=function(state, file, callbacks ) {\n\tconsole.log(\"Loading:\",JSON.stringify(file),JSON.stringify(callbacks));\n\tif (state.File.ready) { // make sure we do not re-load if we are already loading\n\t    state.File.ready=false;\n\t    state.Html.setFootnote(state, \"Server-request: \"+file);\n\t    state.Html.setProgress(state, true);\n\t    var regHttp = new XMLHttpRequest();\n\t    regHttp.addEventListener(\"progress\",(e)=>state.Html.progressInfo(state,e));\n\t    //regHttp.addEventListener(\"load\",(e)=>state.Html.loadInfo(state,e));\n\t    //regHttp.addEventListener(\"error\",(e)=>state.Html.errorInfo(state,e));\n\t    regHttp.addEventListener(\"abort\",(e)=>state.Html.abortInfo(state,e));\n\t    regHttp.onreadystatechange = function() {\n\t\tstate.File.ready=true;\n\t\tif (regHttp.readyState  === 4) {\n\t\t    if (regHttp.status  === 200) {\n\t\t\t//console.log(regHttp.responseText);\n\t\t\tvar response = regHttp.responseText;\n\t\t\t//console.log(\"Ready:\",file,regHttp.readyState,regHttp.status,JSON.stringify(response))\n\t\t\tstate.File.next(state,response,callbacks);\n\t\t    } else {\n\t\t\tstate.Html.setFootnote(state,\"Unable to load \"+file);\n\t\t\tstate.Html.setProgress(state, false);\n\t\t\t//state.Html.setConsole(file+\" error\");\n\t\t    }\n\t\t} else {\n\t\t    state.Html.setFootnote(state,file+\" error\");\t\t\n\t\t    state.Html.setProgress(state, false);\n\t\t};\n\t    };\n\t    regHttp.responseType=\"\";\n\t    regHttp.overrideMimeType(\"text/text\");\n\t    console.log(\"Http file:\",JSON.stringify(file));\n\t    regHttp.open(\"GET\", file, true);\n\t    regHttp.setRequestHeader('cache-control', 'no-cache, must-revalidate, post-check=0, pre-check=0');\n\t    regHttp.setRequestHeader('cache-control', 'max-age=0');\n\t    regHttp.setRequestHeader('expires', '0');\n\t    regHttp.setRequestHeader('expires', 'Tue, 01 Jan 1980 1:00:00 GMT');\n\t    regHttp.setRequestHeader('pragma', 'no-cache');\n\t    regHttp.send(); \n\t} else {\n\t    //state.Html.setConsole(\"\");\n\t    state.Html.setFootnote(state,\"Already waiting for reply...\");\n\t    state.Html.setProgress(state, true);\n\t};\n    };\n};\n\nexport default File;\n"]},"metadata":{},"sourceType":"module"}