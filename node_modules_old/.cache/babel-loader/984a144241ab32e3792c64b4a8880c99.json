{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nimport _slicedToArray from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/GlobeComponent.js\";\nimport React, { Component, useState, useEffect, useRef } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport ReactGlobe from '../globe/ReactGlobe';\nimport Tooltip from './Tooltip';\nimport MapInfo from './MapInfo';\nimport markerRenderer from './markerRenderer';\nimport './styles.css';\nvar footAndHeaderheight = \"100px\";\n\nvar styles = function styles(theme) {\n  return {\n    root: {\n      //\theight: '100%',\n      padding: 0,\n      margin: 0,\n      border: '0px solid red'\n    },\n    dataset: {},\n    map: {\n      overflow: 'hidden' //\theight: '100%',\n\n    }\n  };\n};\n\nfunction MapGlobe(props) {\n  var classes = props.classes,\n      onClickMarker = props.onClickMarker,\n      update = props.update; // Use State to keep the values\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      markers = _useState2[0],\n      setMarkers = _useState2[1];\n\n  var animations = [];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      sequence = _useState4[0],\n      setSequence = _useState4[1];\n\n  var id = useRef(null);\n\n  function getTooltipContent(marker) {\n    //console.log(\"Path:\",JSON.stringify(marker.state.Path.keys));\n    //console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere);\n    var state = marker.state;\n\n    if (state.Layout.state.tooltip === 2) {\n      return null;\n    } else {\n      return /*#__PURE__*/React.createElement(Tooltip, {\n        state: marker.state,\n        data: marker,\n        update: update,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 13\n        }\n      });\n    }\n  }\n\n  function updateLoop(props) {\n    if (props.data.cnt !== 0) {\n      setMarkers(props.data.markers);\n      props.data.cnt = 0;\n      setSequence(\"default\");\n    }\n\n    id.current = setTimeout(function () {\n      updateLoop(props);\n    }, 500);\n  }\n\n  ;\n\n  switch (sequence) {\n    default:\n      animations = props.data.animations;\n  }\n\n  useEffect(function () {\n    updateLoop(props);\n    return function () {\n      return id.current && clearTimeout(id.current);\n    };\n  });\n  return /*#__PURE__*/React.createElement(ReactGlobe, {\n    className: classes.map,\n    animations: animations,\n    markers: markers,\n    onClickMarker: onClickMarker,\n    getTooltipContent: getTooltipContent,\n    markerOptions: {\n      renderer: markerRenderer,\n      //activeScale:1.01,\n      enterAnimationDuration: 0.0,\n      exitAnimationDuration: 0.0,\n      offsetRadiusScale: 0.01,\n      //radiusScaleRange:[1,1],\n      enableGlow: true\n    },\n    cameraOptions: {\n      autoRotateSpeed: 0\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }\n  });\n} //, rotateSpeed:0.1\n\n\nvar EarthMap = /*#__PURE__*/function (_Component) {\n  _inherits(EarthMap, _Component);\n\n  var _super = _createSuper(EarthMap);\n\n  function EarthMap(props) {\n    var _this;\n\n    _classCallCheck(this, EarthMap);\n\n    _this = _super.call(this, props);\n    var state = _this.props.state;\n    state.React.Globe = _assertThisInitialized(_this);\n    _this._ismounted = false;\n    _this.elem = null;\n    _this.data = {\n      cnt: 99,\n      markers: [],\n      animations: [],\n      focus: [0, 0],\n      dist: 2\n    };\n    _this.update = _this.update.bind(_assertThisInitialized(_this));\n    _this.cnt = 0;\n    return _this;\n  }\n\n  _createClass(EarthMap, [{\n    key: \"update\",\n    value: function update() {\n      //console.log(\"Force update EarthMap...\");\n      this.forceUpdate();\n    }\n  }, {\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.data = {\n        cnt: 99,\n        markers: [],\n        animations: [],\n        focus: [0, 0],\n        dist: 2\n      };\n      this._ismounted = true;\n      window.addEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._ismounted = false;\n      window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    }\n  }, {\n    key: \"onClickMarker\",\n    value: function onClickMarker(marker, markerObject, event) {\n      //console.log(\"Clicked marker...\",marker.id)\n      var state = marker.state;\n      var colkey = marker.colrangekey;\n      var colrange = marker.colrange;\n      var colwhere = marker.colwhere;\n      var rowkey = marker.rowrangekey;\n      var rowrange = marker.rowrange;\n      var rowwhere = marker.rowwhere;\n      var cnt = marker.cnt; //console.log(\"Clicked marker...\",marker.id);\n\n      state.Navigate.selectItemRange(state, colkey, rowkey, colrange, rowrange, colwhere, rowwhere, cnt, 1);\n    }\n  }, {\n    key: \"showMap\",\n    value: function showMap(state, force) {\n      // dont re-render the globe... - only change the markers\n      //console.log(\"Rendering markers...\",force);\n      this.getMarkers(state); //this.data.markers=this.getMarkers(state);\n\n      if (force !== undefined && force) {\n        this.update();\n      }\n    }\n  }, {\n    key: \"getMarkers\",\n    value: function getMarkers(state) {\n      // get marker data\n      //console.log(\"Setting map markers...\");\n      //var ll=this.markers.length;\n      //for (var ii=0; ii < ll; ii++) {\n      //    this.markers.splice(ii,1);\n      //};\n      //this.data.markers.splice(0,this.data.markers.length);\n      var tcnt = this.cnt;\n      var markers = []; //   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\n      var matrix = state.React.matrix;\n      var first = true;\n      var sum = {\n        x2: 0,\n        y2: 0,\n        z2: 0,\n        x: 0,\n        y: 0,\n        z: 0,\n        cnt: 0\n      };\n\n      if (matrix !== undefined) {\n        state.Matrix.printElements(matrix);\n        var colkey = state.Path.getColKey(state) || \"\";\n        var rowkey = state.Path.getRowKey(state) || \"\";\n        var colvalues = state.Path.filterKeys(state, state.Matrix.values[colkey] || [\"\"]);\n        var rowvalues = state.Path.filterKeys(state, state.Matrix.values[rowkey] || [\"\"]); //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n        //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n        //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n        // make markers\n\n        console.log(\"Rows:\", rowvalues.length);\n        var rlen = rowvalues.length;\n\n        for (var ii = 0; ii < rlen; ii++) {\n          var rowval = rowvalues[ii];\n          var rowrange = state.Grid.getLatRange(state, rowvalues[ii]);\n          var rowwhere = state.Grid.getLatWhere(state, \"lat\", rowvalues[ii]);\n          var clen = colvalues.length;\n\n          for (var jj = 0; jj < clen; jj++) {\n            var colval = colvalues[jj];\n            var colrange = state.Grid.getLonRange(state, colvalues[jj]);\n            var colwhere = state.Grid.getLonWhere(state, \"lon\", colvalues[jj]);\n            var element = state.Matrix.getMatrixElement(colval, rowval, matrix);\n\n            if (element !== undefined) {\n              var lon = element.colval;\n              var lat = element.rowval;\n              var lev = element.maxlev;\n              var bgcolor = state.Colors.getLevelBgColor(lev);\n              var fgcolor = state.Colors.getLevelFgColor(lev);\n              var cnt = element.cnt;\n              tcnt = tcnt + 1;\n              var rlat = lat * Math.PI / 180;\n              var rlon = lon * Math.PI / 180;\n              var clat = Math.cos(rlat);\n              var slat = Math.sin(rlat);\n              var clon = Math.cos(rlon);\n              var slon = Math.sin(rlon);\n              var pos = {\n                x: clat * clon,\n                y: clat * slon,\n                z: slat\n              };\n              sum.cnt = sum.cnt + 1;\n              sum.x = sum.x + pos.x;\n              sum.y = sum.y + pos.y;\n              sum.z = sum.z + pos.z;\n              sum.x2 = sum.x2 + pos.x * pos.x;\n              sum.y2 = sum.y2 + pos.y * pos.y;\n              sum.z2 = sum.z2 + pos.z * pos.z;\n              var fact = 4; //console.log(\"mapComponent:\",colkey,colval,rowkey,rowval);\n              //console.log(\"Colors:\",tcnt,lev,bgcolor);\n\n              var size = {\n                width: (colrange.max - colrange.min) * clat * fact,\n                depth: (rowrange.max - rowrange.min) * fact,\n                height: 1\n              };\n              var mark = {\n                id: tcnt,\n                coordinates: [lat, lon],\n                city: \"Test\",\n                value: 5,\n                size: size,\n                element: element,\n                bgcolor: bgcolor,\n                fgcolor: fgcolor,\n                state: state,\n                colkey: \"_lon\",\n                colvalues: [colval],\n                step: 1,\n                index: 0,\n                colrangekey: \"lon\",\n                colrange: colrange,\n                colwhere: colwhere,\n                rowkey: \"_lat\",\n                rowval: rowval,\n                rowrangekey: \"lat\",\n                rowrange: rowrange,\n                rowwhere: rowwhere,\n                map: true,\n                cnt: cnt\n              };\n\n              if (first) {\n                first = false; //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n              }\n\n              markers.push(mark); //this.data.markers.push(mark);\n            }\n          }\n        }\n      } else {\n        console.log(\"No matrix available...\");\n      }\n\n      if (sum.cnt > 0) {\n        var cen = {};\n        cen.x = sum.x / sum.cnt;\n        cen.y = sum.y / sum.cnt;\n        cen.z = sum.z / sum.cnt;\n        cen.x2 = sum.x2 / sum.cnt;\n        cen.y2 = sum.y2 / sum.cnt;\n        cen.z2 = sum.z2 / sum.cnt;\n        var ll = Math.sqrt(cen.x * cen.x + cen.y * cen.y + cen.z * cen.z);\n        var dist = 1 + Math.max(.1, 5 * Math.sqrt(cen.x2 - cen.x * cen.x + cen.y2 - cen.y * cen.y + cen.z2 - cen.z * cen.z));\n\n        if (ll > 0) {\n          cen.x = cen.x / ll;\n          cen.y = cen.y / ll;\n          cen.z = cen.z / ll;\n        } else {\n          cen.x = 1;\n          cen.y = 0;\n          cen.z = 0;\n        }\n\n        ll = Math.sqrt(cen.x * cen.x + cen.y * cen.y);\n        clat = Math.acos(ll) * 180 / Math.PI;\n        clon = Math.atan2(cen.y, cen.x) * 180 / Math.PI; //console.log(\"Center:\",clon,clat,dist);\n\n        this.data.dist = dist;\n        this.data.focus = [clat, clon];\n        this.data.animations = [{\n          animationDuration: 1000,\n          coordinates: [clat, clon],\n          distanceRadiusScale: dist,\n          easingFunction: ['Linear', 'None']\n        }];\n      } //console.log(\"Markers:\",this.data.markers.length);\n\n\n      this.cnt = tcnt;\n\n      if (this.cnt > 1000000) {\n        this.cnt = 0;\n      }\n\n      ;\n      this.data.markers = markers;\n      this.data.cnt = this.data.cnt + 1;\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state; //, state\n      //console.log(\"Rendering map...\");\n      //this.setMarkers(state);\n\n      var height = 'calc(95% - ' + footAndHeaderheight + ')';\n      return /*#__PURE__*/React.createElement(\"div\", {\n        className: classes.root,\n        style: {\n          position: 'fixed',\n          marginLeft: '0%',\n          width: '90%',\n          height: height,\n          overflow: 'hidden'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 10\n        }\n      }, /*#__PURE__*/React.createElement(MapInfo, {\n        state: state,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 3\n        }\n      }), /*#__PURE__*/React.createElement(MapGlobe, {\n        onClickMarker: this.onClickMarker,\n        data: this.data,\n        update: this.update,\n        classes: {\n          map: classes.map\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 276,\n          columnNumber: 3\n        }\n      }));\n    }\n  }]);\n\n  return EarthMap;\n}(Component);\n\nEarthMap.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(EarthMap);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/GlobeComponent.js"],"names":["React","Component","useState","useEffect","useRef","PropTypes","withStyles","ReactGlobe","Tooltip","MapInfo","markerRenderer","footAndHeaderheight","styles","theme","root","padding","margin","border","dataset","map","overflow","MapGlobe","props","classes","onClickMarker","update","markers","setMarkers","animations","sequence","setSequence","id","getTooltipContent","marker","state","Layout","tooltip","updateLoop","data","cnt","current","setTimeout","clearTimeout","renderer","enterAnimationDuration","exitAnimationDuration","offsetRadiusScale","enableGlow","autoRotateSpeed","EarthMap","Globe","_ismounted","elem","focus","dist","bind","forceUpdate","window","addEventListener","updateWindowDimensions","removeEventListener","markerObject","event","colkey","colrangekey","colrange","colwhere","rowkey","rowrangekey","rowrange","rowwhere","Navigate","selectItemRange","force","getMarkers","undefined","tcnt","matrix","first","sum","x2","y2","z2","x","y","z","Matrix","printElements","Path","getColKey","getRowKey","colvalues","filterKeys","values","rowvalues","console","log","length","rlen","ii","rowval","Grid","getLatRange","getLatWhere","clen","jj","colval","getLonRange","getLonWhere","element","getMatrixElement","lon","lat","lev","maxlev","bgcolor","Colors","getLevelBgColor","fgcolor","getLevelFgColor","rlat","Math","PI","rlon","clat","cos","slat","sin","clon","slon","pos","fact","size","width","max","min","depth","height","mark","coordinates","city","value","step","index","push","cen","ll","sqrt","acos","atan2","animationDuration","distanceRadiusScale","easingFunction","position","marginLeft","propTypes","object","isRequired"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,EAAoCC,SAApC,EAA+CC,MAA/C,QAA4D,OAA5D;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,SAASC,UAAT,QAA2B,0BAA3B;AAEA,OAAOC,UAAP,MAAuB,qBAAvB;AAEA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,cAAP,MAA2B,kBAA3B;AAEA,OAAO,cAAP;AAEA,IAAMC,mBAAmB,GAAG,OAA5B;;AAEA,IAAMC,MAAM,GAAG,SAATA,MAAS,CAAAC,KAAK;AAAA,SAAK;AACrBC,IAAAA,IAAI,EAAE;AACV;AACCC,MAAAA,OAAO,EAAC,CAFC;AAGTC,MAAAA,MAAM,EAAC,CAHE;AAITC,MAAAA,MAAM,EAAE;AAJC,KADe;AAOrBC,IAAAA,OAAO,EAAE,EAPY;AAQrBC,IAAAA,GAAG,EAAE;AACRC,MAAAA,QAAQ,EAAE,QADF,CAET;;AAFS;AARgB,GAAL;AAAA,CAApB;;AAeA,SAASC,QAAT,CAAkBC,KAAlB,EAAyB;AAAA,MACdC,OADc,GACkBD,KADlB,CACdC,OADc;AAAA,MACNC,aADM,GACkBF,KADlB,CACNE,aADM;AAAA,MACQC,MADR,GACkBH,KADlB,CACQG,MADR,EAErB;;AAFqB,kBAGSvB,QAAQ,CAAC,EAAD,CAHjB;AAAA;AAAA,MAGdwB,OAHc;AAAA,MAGLC,UAHK;;AAIrB,MAAIC,UAAU,GAAC,EAAf;;AAJqB,mBAKU1B,QAAQ,EALlB;AAAA;AAAA,MAKf2B,QALe;AAAA,MAKLC,WALK;;AAMrB,MAAMC,EAAE,GAAC3B,MAAM,CAAC,IAAD,CAAf;;AACA,WAAS4B,iBAAT,CAA2BC,MAA3B,EAAmC;AACtC;AACA;AACA,QAAIC,KAAK,GAACD,MAAM,CAACC,KAAjB;;AACA,QAAIA,KAAK,CAACC,MAAN,CAAaD,KAAb,CAAmBE,OAAnB,KAA6B,CAAjC,EAAoC;AAChC,aAAO,IAAP;AACH,KAFD,MAEO;AACH,0BAAO,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAEH,MAAM,CAACC,KAAvB;AAA8B,QAAA,IAAI,EAAED,MAApC;AAA4C,QAAA,MAAM,EAAER,MAApD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACH;AACG;;AACD,WAASY,UAAT,CAAoBf,KAApB,EAA2B;AAC9B,QAAIA,KAAK,CAACgB,IAAN,CAAWC,GAAX,KAAmB,CAAvB,EAA0B;AACtBZ,MAAAA,UAAU,CAACL,KAAK,CAACgB,IAAN,CAAWZ,OAAZ,CAAV;AACAJ,MAAAA,KAAK,CAACgB,IAAN,CAAWC,GAAX,GAAe,CAAf;AACAT,MAAAA,WAAW,CAAC,SAAD,CAAX;AACH;;AACDC,IAAAA,EAAE,CAACS,OAAH,GAAWC,UAAU,CAAC,YAAW;AAC7BJ,MAAAA,UAAU,CAACf,KAAD,CAAV;AACH,KAFoB,EAEnB,GAFmB,CAArB;AAGI;;AAAA;;AACD,UAAOO,QAAP;AACH;AACAD,MAAAA,UAAU,GAACN,KAAK,CAACgB,IAAN,CAAWV,UAAtB;AAFG;;AAIAzB,EAAAA,SAAS,CAAE,YAAI;AAACkC,IAAAA,UAAU,CAACf,KAAD,CAAV;AACd,WAAO;AAAA,aAAMS,EAAE,CAACS,OAAH,IAAcE,YAAY,CAACX,EAAE,CAACS,OAAJ,CAAhC;AAAA,KAAP;AAAqD,GAD9C,CAAT;AAEA,sBAAQ,oBAAC,UAAD;AAAY,IAAA,SAAS,EAAEjB,OAAO,CAACJ,GAA/B;AACH,IAAA,UAAU,EAAES,UADT;AAEI,IAAA,OAAO,EAAEF,OAFb;AAGI,IAAA,aAAa,EAAEF,aAHnB;AAII,IAAA,iBAAiB,EAAEQ,iBAJvB;AAKI,IAAA,aAAa,EAAE;AAACW,MAAAA,QAAQ,EAAEjC,cAAX;AAC3B;AACAkC,MAAAA,sBAAsB,EAAC,GAFI;AAG3BC,MAAAA,qBAAqB,EAAC,GAHK;AAI3BC,MAAAA,iBAAiB,EAAC,IAJS;AAK3B;AACAC,MAAAA,UAAU,EAAC;AANgB,KALnB;AAaH,IAAA,aAAa,EAAE;AAACC,MAAAA,eAAe,EAAC;AAAjB,KAbZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAR;AAeH,C,CAED;;;IAEMC,Q;;;;;AACF,oBAAY3B,KAAZ,EAAmB;AAAA;;AAAA;;AACtB,8BAAMA,KAAN;AADsB,QAEfY,KAFe,GAER,MAAKZ,KAFG,CAEfY,KAFe;AAGtBA,IAAAA,KAAK,CAAClC,KAAN,CAAYkD,KAAZ;AACA,UAAKC,UAAL,GAAkB,KAAlB;AACA,UAAKC,IAAL,GAAU,IAAV;AACA,UAAKd,IAAL,GAAU;AAACC,MAAAA,GAAG,EAAC,EAAL;AAAQb,MAAAA,OAAO,EAAC,EAAhB;AAAmBE,MAAAA,UAAU,EAAC,EAA9B;AAAiCyB,MAAAA,KAAK,EAAC,CAAC,CAAD,EAAG,CAAH,CAAvC;AAA6CC,MAAAA,IAAI,EAAC;AAAlD,KAAV;AACA,UAAK7B,MAAL,GAAY,MAAKA,MAAL,CAAY8B,IAAZ,+BAAZ;AACA,UAAKhB,GAAL,GAAS,CAAT;AARsB;AASlB;;;;6BACQ;AACZ;AACA,WAAKiB,WAAL;AACI;;;wCACmB;AACvB,WAAKlB,IAAL,GAAU;AAACC,QAAAA,GAAG,EAAC,EAAL;AAAQb,QAAAA,OAAO,EAAC,EAAhB;AAAmBE,QAAAA,UAAU,EAAC,EAA9B;AAAiCyB,QAAAA,KAAK,EAAC,CAAC,CAAD,EAAG,CAAH,CAAvC;AAA6CC,QAAAA,IAAI,EAAC;AAAlD,OAAV;AACA,WAAKH,UAAL,GAAkB,IAAlB;AACOM,MAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkC,KAAKC,sBAAvC;AACH;;;2CACsB;AAC1B,WAAKR,UAAL,GAAkB,KAAlB;AACOM,MAAAA,MAAM,CAACG,mBAAP,CAA2B,QAA3B,EAAqC,KAAKD,sBAA1C;AACH;;;kCACa1B,M,EAAQ4B,Y,EAAcC,K,EAAO;AAC9C;AACA,UAAI5B,KAAK,GAACD,MAAM,CAACC,KAAjB;AACA,UAAI6B,MAAM,GAAC9B,MAAM,CAAC+B,WAAlB;AACA,UAAIC,QAAQ,GAAChC,MAAM,CAACgC,QAApB;AACA,UAAIC,QAAQ,GAACjC,MAAM,CAACiC,QAApB;AACA,UAAIC,MAAM,GAAClC,MAAM,CAACmC,WAAlB;AACA,UAAIC,QAAQ,GAACpC,MAAM,CAACoC,QAApB;AACA,UAAIC,QAAQ,GAACrC,MAAM,CAACqC,QAApB;AACA,UAAI/B,GAAG,GAACN,MAAM,CAACM,GAAf,CAT8C,CAU9C;;AACAL,MAAAA,KAAK,CAACqC,QAAN,CAAeC,eAAf,CAA+BtC,KAA/B,EAAqC6B,MAArC,EAA4CI,MAA5C,EAAmDF,QAAnD,EAA4DI,QAA5D,EAAqEH,QAArE,EAA8EI,QAA9E,EAAuF/B,GAAvF,EAA2F,CAA3F;AACI;;;4BACOL,K,EAAMuC,K,EAAO;AACxB;AACA;AACA,WAAKC,UAAL,CAAgBxC,KAAhB,EAHwB,CAGD;;AACvB,UAAIuC,KAAK,KAAKE,SAAV,IAAuBF,KAA3B,EAAkC;AAC9B,aAAKhD,MAAL;AACH;AACG;;;+BACUS,K,EAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAI0C,IAAI,GAAC,KAAKrC,GAAd;AACA,UAAIb,OAAO,GAAC,EAAZ,CATqB,CASN;;AACf,UAAImD,MAAM,GAAC3C,KAAK,CAAClC,KAAN,CAAY6E,MAAvB;AACA,UAAIC,KAAK,GAAC,IAAV;AACA,UAAIC,GAAG,GAAC;AAACC,QAAAA,EAAE,EAAC,CAAJ;AAAMC,QAAAA,EAAE,EAAC,CAAT;AAAWC,QAAAA,EAAE,EAAC,CAAd;AAAgBC,QAAAA,CAAC,EAAC,CAAlB;AAAoBC,QAAAA,CAAC,EAAC,CAAtB;AAAwBC,QAAAA,CAAC,EAAC,CAA1B;AAA4B9C,QAAAA,GAAG,EAAC;AAAhC,OAAR;;AACA,UAAIsC,MAAM,KAAKF,SAAf,EAA0B;AACtBzC,QAAAA,KAAK,CAACoD,MAAN,CAAaC,aAAb,CAA2BV,MAA3B;AACA,YAAId,MAAM,GAAG7B,KAAK,CAACsD,IAAN,CAAWC,SAAX,CAAqBvD,KAArB,KAA6B,EAA1C;AACA,YAAIiC,MAAM,GAAGjC,KAAK,CAACsD,IAAN,CAAWE,SAAX,CAAqBxD,KAArB,KAA6B,EAA1C;AACA,YAAIyD,SAAS,GAAGzD,KAAK,CAACsD,IAAN,CAAWI,UAAX,CAAsB1D,KAAtB,EAA4BA,KAAK,CAACoD,MAAN,CAAaO,MAAb,CAAoB9B,MAApB,KAA6B,CAAC,EAAD,CAAzD,CAAhB;AACA,YAAI+B,SAAS,GAAG5D,KAAK,CAACsD,IAAN,CAAWI,UAAX,CAAsB1D,KAAtB,EAA4BA,KAAK,CAACoD,MAAN,CAAaO,MAAb,CAAoB1B,MAApB,KAA6B,CAAC,EAAD,CAAzD,CAAhB,CALsB,CAMtB;AACA;AACA;AACO;;AACP4B,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAoBF,SAAS,CAACG,MAA9B;AACO,YAAIC,IAAI,GAACJ,SAAS,CAACG,MAAnB;;AACA,aAAI,IAAIE,EAAE,GAAC,CAAX,EAAcA,EAAE,GAACD,IAAjB,EAAuBC,EAAE,EAAzB,EAA6B;AACvC,cAAIC,MAAM,GAACN,SAAS,CAACK,EAAD,CAApB;AACA,cAAI9B,QAAQ,GAACnC,KAAK,CAACmE,IAAN,CAAWC,WAAX,CAAuBpE,KAAvB,EAA6B4D,SAAS,CAACK,EAAD,CAAtC,CAAb;AACA,cAAI7B,QAAQ,GAAGpC,KAAK,CAACmE,IAAN,CAAWE,WAAX,CAAuBrE,KAAvB,EAA6B,KAA7B,EAAmC4D,SAAS,CAACK,EAAD,CAA5C,CAAf;AACA,cAAIK,IAAI,GAACb,SAAS,CAACM,MAAnB;;AACA,eAAI,IAAIQ,EAAE,GAAC,CAAX,EAAcA,EAAE,GAACD,IAAjB,EAAuBC,EAAE,EAAzB,EAA6B;AACzB,gBAAIC,MAAM,GAACf,SAAS,CAACc,EAAD,CAApB;AACA,gBAAIxC,QAAQ,GAAC/B,KAAK,CAACmE,IAAN,CAAWM,WAAX,CAAuBzE,KAAvB,EAA6ByD,SAAS,CAACc,EAAD,CAAtC,CAAb;AACA,gBAAIvC,QAAQ,GAAGhC,KAAK,CAACmE,IAAN,CAAWO,WAAX,CAAuB1E,KAAvB,EAA6B,KAA7B,EAAmCyD,SAAS,CAACc,EAAD,CAA5C,CAAf;AACA,gBAAII,OAAO,GAAC3E,KAAK,CAACoD,MAAN,CAAawB,gBAAb,CAA8BJ,MAA9B,EAAqCN,MAArC,EAA4CvB,MAA5C,CAAZ;;AACA,gBAAIgC,OAAO,KAAKlC,SAAhB,EAA2B;AAC9B,kBAAIoC,GAAG,GAACF,OAAO,CAACH,MAAhB;AACA,kBAAIM,GAAG,GAACH,OAAO,CAACT,MAAhB;AACA,kBAAIa,GAAG,GAACJ,OAAO,CAACK,MAAhB;AACA,kBAAIC,OAAO,GAACjF,KAAK,CAACkF,MAAN,CAAaC,eAAb,CAA6BJ,GAA7B,CAAZ;AACA,kBAAIK,OAAO,GAACpF,KAAK,CAACkF,MAAN,CAAaG,eAAb,CAA6BN,GAA7B,CAAZ;AACA,kBAAI1E,GAAG,GAACsE,OAAO,CAACtE,GAAhB;AACAqC,cAAAA,IAAI,GAACA,IAAI,GAAC,CAAV;AACA,kBAAI4C,IAAI,GAACR,GAAG,GAACS,IAAI,CAACC,EAAT,GAAY,GAArB;AACA,kBAAIC,IAAI,GAACZ,GAAG,GAACU,IAAI,CAACC,EAAT,GAAY,GAArB;AACA,kBAAIE,IAAI,GAACH,IAAI,CAACI,GAAL,CAASL,IAAT,CAAT;AACA,kBAAIM,IAAI,GAACL,IAAI,CAACM,GAAL,CAASP,IAAT,CAAT;AACA,kBAAIQ,IAAI,GAACP,IAAI,CAACI,GAAL,CAASF,IAAT,CAAT;AACA,kBAAIM,IAAI,GAACR,IAAI,CAACM,GAAL,CAASJ,IAAT,CAAT;AACA,kBAAIO,GAAG,GAAC;AAAC/C,gBAAAA,CAAC,EAACyC,IAAI,GAACI,IAAR;AAAa5C,gBAAAA,CAAC,EAACwC,IAAI,GAACK,IAApB;AAAyB5C,gBAAAA,CAAC,EAACyC;AAA3B,eAAR;AACA/C,cAAAA,GAAG,CAACxC,GAAJ,GAAQwC,GAAG,CAACxC,GAAJ,GAAQ,CAAhB;AACAwC,cAAAA,GAAG,CAACI,CAAJ,GAAMJ,GAAG,CAACI,CAAJ,GAAM+C,GAAG,CAAC/C,CAAhB;AACAJ,cAAAA,GAAG,CAACK,CAAJ,GAAML,GAAG,CAACK,CAAJ,GAAM8C,GAAG,CAAC9C,CAAhB;AACAL,cAAAA,GAAG,CAACM,CAAJ,GAAMN,GAAG,CAACM,CAAJ,GAAM6C,GAAG,CAAC7C,CAAhB;AACAN,cAAAA,GAAG,CAACC,EAAJ,GAAOD,GAAG,CAACC,EAAJ,GAAOkD,GAAG,CAAC/C,CAAJ,GAAM+C,GAAG,CAAC/C,CAAxB;AACAJ,cAAAA,GAAG,CAACE,EAAJ,GAAOF,GAAG,CAACE,EAAJ,GAAOiD,GAAG,CAAC9C,CAAJ,GAAM8C,GAAG,CAAC9C,CAAxB;AACAL,cAAAA,GAAG,CAACG,EAAJ,GAAOH,GAAG,CAACG,EAAJ,GAAOgD,GAAG,CAAC7C,CAAJ,GAAM6C,GAAG,CAAC7C,CAAxB;AACA,kBAAI8C,IAAI,GAAC,CAAT,CAtB8B,CAuB9B;AACA;;AACA,kBAAIC,IAAI,GAAC;AAACC,gBAAAA,KAAK,EAAG,CAACpE,QAAQ,CAACqE,GAAT,GAAarE,QAAQ,CAACsE,GAAvB,IAA4BX,IAA5B,GAAiCO,IAA1C;AACNK,gBAAAA,KAAK,EAAG,CAACnE,QAAQ,CAACiE,GAAT,GAAajE,QAAQ,CAACkE,GAAvB,IAA4BJ,IAD9B;AAENM,gBAAAA,MAAM,EAAE;AAFF,eAAT;AAGA,kBAAIC,IAAI,GAAC;AAAC3G,gBAAAA,EAAE,EAAC6C,IAAJ;AACN+D,gBAAAA,WAAW,EAAC,CAAC3B,GAAD,EAAKD,GAAL,CADN;AAEN6B,gBAAAA,IAAI,EAAC,MAFC;AAGNC,gBAAAA,KAAK,EAAC,CAHA;AAINT,gBAAAA,IAAI,EAACA,IAJC;AAKNvB,gBAAAA,OAAO,EAACA,OALF;AAMNM,gBAAAA,OAAO,EAACA,OANF;AAONG,gBAAAA,OAAO,EAACA,OAPF;AAQNpF,gBAAAA,KAAK,EAACA,KARA;AASN6B,gBAAAA,MAAM,EAAC,MATD;AAUN4B,gBAAAA,SAAS,EAAC,CAACe,MAAD,CAVJ;AAWNoC,gBAAAA,IAAI,EAAC,CAXC;AAYNC,gBAAAA,KAAK,EAAC,CAZA;AAaN/E,gBAAAA,WAAW,EAAC,KAbN;AAcNC,gBAAAA,QAAQ,EAACA,QAdH;AAeNC,gBAAAA,QAAQ,EAACA,QAfH;AAgBNC,gBAAAA,MAAM,EAAC,MAhBD;AAiBNiC,gBAAAA,MAAM,EAACA,MAjBD;AAkBNhC,gBAAAA,WAAW,EAAC,KAlBN;AAmBNC,gBAAAA,QAAQ,EAACA,QAnBH;AAoBNC,gBAAAA,QAAQ,EAACA,QApBH;AAqBNnD,gBAAAA,GAAG,EAAC,IArBE;AAsBNoB,gBAAAA,GAAG,EAACA;AAtBE,eAAT;;AAwBA,kBAAIuC,KAAJ,EAAW;AACPA,gBAAAA,KAAK,GAAC,KAAN,CADO,CAEP;AACH;;AACDpD,cAAAA,OAAO,CAACsH,IAAR,CAAaN,IAAb,EAxD8B,CAyD9B;AACI;AACJ;AACG;AACJ,OAnFD,MAmFO;AACH3C,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACH;;AACD,UAAIjB,GAAG,CAACxC,GAAJ,GAAQ,CAAZ,EAAe;AACX,YAAI0G,GAAG,GAAC,EAAR;AACAA,QAAAA,GAAG,CAAC9D,CAAJ,GAAMJ,GAAG,CAACI,CAAJ,GAAMJ,GAAG,CAACxC,GAAhB;AACA0G,QAAAA,GAAG,CAAC7D,CAAJ,GAAML,GAAG,CAACK,CAAJ,GAAML,GAAG,CAACxC,GAAhB;AACA0G,QAAAA,GAAG,CAAC5D,CAAJ,GAAMN,GAAG,CAACM,CAAJ,GAAMN,GAAG,CAACxC,GAAhB;AACA0G,QAAAA,GAAG,CAACjE,EAAJ,GAAOD,GAAG,CAACC,EAAJ,GAAOD,GAAG,CAACxC,GAAlB;AACA0G,QAAAA,GAAG,CAAChE,EAAJ,GAAOF,GAAG,CAACE,EAAJ,GAAOF,GAAG,CAACxC,GAAlB;AACA0G,QAAAA,GAAG,CAAC/D,EAAJ,GAAOH,GAAG,CAACG,EAAJ,GAAOH,GAAG,CAACxC,GAAlB;AACA,YAAI2G,EAAE,GAACzB,IAAI,CAAC0B,IAAL,CAAUF,GAAG,CAAC9D,CAAJ,GAAM8D,GAAG,CAAC9D,CAAV,GAAc8D,GAAG,CAAC7D,CAAJ,GAAM6D,GAAG,CAAC7D,CAAxB,GAA4B6D,GAAG,CAAC5D,CAAJ,GAAM4D,GAAG,CAAC5D,CAAhD,CAAP;AACA,YAAI/B,IAAI,GAAC,IAAEmE,IAAI,CAACa,GAAL,CAAS,EAAT,EAAY,IAAEb,IAAI,CAAC0B,IAAL,CAAUF,GAAG,CAACjE,EAAJ,GAASiE,GAAG,CAAC9D,CAAJ,GAAM8D,GAAG,CAAC9D,CAAnB,GAAuB8D,GAAG,CAAChE,EAA3B,GAAgCgE,GAAG,CAAC7D,CAAJ,GAAM6D,GAAG,CAAC7D,CAA1C,GAA8C6D,GAAG,CAAC/D,EAAlD,GAAuD+D,GAAG,CAAC5D,CAAJ,GAAM4D,GAAG,CAAC5D,CAA3E,CAAd,CAAX;;AACA,YAAI6D,EAAE,GAAC,CAAP,EAAU;AACbD,UAAAA,GAAG,CAAC9D,CAAJ,GAAM8D,GAAG,CAAC9D,CAAJ,GAAM+D,EAAZ;AACAD,UAAAA,GAAG,CAAC7D,CAAJ,GAAM6D,GAAG,CAAC7D,CAAJ,GAAM8D,EAAZ;AACAD,UAAAA,GAAG,CAAC5D,CAAJ,GAAM4D,GAAG,CAAC5D,CAAJ,GAAM6D,EAAZ;AACI,SAJD,MAIO;AACVD,UAAAA,GAAG,CAAC9D,CAAJ,GAAM,CAAN;AACA8D,UAAAA,GAAG,CAAC7D,CAAJ,GAAM,CAAN;AACA6D,UAAAA,GAAG,CAAC5D,CAAJ,GAAM,CAAN;AACI;;AACD6D,QAAAA,EAAE,GAACzB,IAAI,CAAC0B,IAAL,CAAUF,GAAG,CAAC9D,CAAJ,GAAM8D,GAAG,CAAC9D,CAAV,GAAY8D,GAAG,CAAC7D,CAAJ,GAAM6D,GAAG,CAAC7D,CAAhC,CAAH;AACAwC,QAAAA,IAAI,GAACH,IAAI,CAAC2B,IAAL,CAAUF,EAAV,IAAgB,GAAhB,GAAoBzB,IAAI,CAACC,EAA9B;AACAM,QAAAA,IAAI,GAACP,IAAI,CAAC4B,KAAL,CAAWJ,GAAG,CAAC7D,CAAf,EAAiB6D,GAAG,CAAC9D,CAArB,IAA0B,GAA1B,GAA8BsC,IAAI,CAACC,EAAxC,CArBW,CAsBX;;AACA,aAAKpF,IAAL,CAAUgB,IAAV,GAAeA,IAAf;AACA,aAAKhB,IAAL,CAAUe,KAAV,GAAgB,CAACuE,IAAD,EAAMI,IAAN,CAAhB;AACA,aAAK1F,IAAL,CAAUV,UAAV,GAAqB,CAAC;AACzB0H,UAAAA,iBAAiB,EAAC,IADO;AAEzBX,UAAAA,WAAW,EAAC,CAACf,IAAD,EAAMI,IAAN,CAFa;AAGzBuB,UAAAA,mBAAmB,EAACjG,IAHK;AAIzBkG,UAAAA,cAAc,EAAE,CAAC,QAAD,EAAU,MAAV;AAJS,SAAD,CAArB;AAMH,OAlIoB,CAmIrB;;;AACA,WAAKjH,GAAL,GAASqC,IAAT;;AACA,UAAI,KAAKrC,GAAL,GAAW,OAAf,EAAwB;AAAC,aAAKA,GAAL,GAAS,CAAT;AAAY;;AAAA;AACrC,WAAKD,IAAL,CAAUZ,OAAV,GAAkBA,OAAlB;AACA,WAAKY,IAAL,CAAUC,GAAV,GAAc,KAAKD,IAAL,CAAUC,GAAV,GAAc,CAA5B;AACI;;;6BACQ;AAAA,wBACe,KAAKjB,KADpB;AAAA,UACJC,OADI,eACJA,OADI;AAAA,UACIW,KADJ,eACIA,KADJ,EAC0B;AACtC;AACA;;AACA,UAAIuG,MAAM,GAAC,gBAAc9H,mBAAd,GAAkC,GAA7C;AACA,0BAAQ;AAAK,QAAA,SAAS,EAAEY,OAAO,CAACT,IAAxB;AACA,QAAA,KAAK,EAAE;AAAC2I,UAAAA,QAAQ,EAAC,OAAV;AACbC,UAAAA,UAAU,EAAC,IADE;AAEbrB,UAAAA,KAAK,EAAE,KAFM;AAGbI,UAAAA,MAAM,EAAEA,MAHK;AAIbrH,UAAAA,QAAQ,EAAC;AAJI,SADP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBAMP,oBAAC,OAAD;AAAS,QAAA,KAAK,EAAEc,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QANO,eAOP,oBAAC,QAAD;AAAU,QAAA,aAAa,EAAE,KAAKV,aAA9B;AACU,QAAA,IAAI,EAAE,KAAKc,IADrB;AAEU,QAAA,MAAM,EAAE,KAAKb,MAFvB;AAGU,QAAA,OAAO,EAAE;AAACN,UAAAA,GAAG,EAACI,OAAO,CAACJ;AAAb,SAHnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAPO,CAAR;AAaI;;;;EAxMkBlB,S;;AA2MvBgD,QAAQ,CAAC0G,SAAT,GAAqB;AACjBpI,EAAAA,OAAO,EAAElB,SAAS,CAACuJ,MAAV,CAAiBC;AADT,CAArB;AAIA,eAAevJ,UAAU,CAACM,MAAD,CAAV,CAAmBqC,QAAnB,CAAf","sourcesContent":["import React, {Component, useState, useEffect, useRef} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport ReactGlobe from '../globe/ReactGlobe';\n\nimport Tooltip from './Tooltip'\nimport MapInfo from './MapInfo'\nimport markerRenderer from './markerRenderer';\n\nimport './styles.css';\n\nconst footAndHeaderheight = \"100px\";\n\nconst styles = theme => ({\n    root: {\n//\theight: '100%',\n\tpadding:0,\n\tmargin:0,\n\tborder: '0px solid red'\n    },\n    dataset: {},\n    map: {\n\toverflow: 'hidden',\n//\theight: '100%',\n    },\n});\n\n\nfunction MapGlobe(props) {\n    const {classes,onClickMarker,update} = props;\n    // Use State to keep the values\n    const [markers, setMarkers] = useState([]);\n    let animations=[];\n    const[sequence, setSequence] = useState();\n    const id=useRef(null)\n    function getTooltipContent(marker) {\n\t//console.log(\"Path:\",JSON.stringify(marker.state.Path.keys));\n\t//console.log(\"Marker colwhere:\",marker.colwhere,\" rowwhere:\",marker.rowwhere);\n\tvar state=marker.state;\n\tif (state.Layout.state.tooltip===2) {\n\t    return null;\n\t} else {\n\t    return <Tooltip state={marker.state} data={marker} update={update}/>;\n\t}\n    }\n    function updateLoop(props) {\n\tif (props.data.cnt !== 0) {\n\t    setMarkers(props.data.markers);\n\t    props.data.cnt=0;\n\t    setSequence(\"default\");\n\t}\n\tid.current=setTimeout(function() {\n\t    updateLoop(props)\n\t},500);\n    };\n    switch(sequence) {\n\tdefault:\n\tanimations=props.data.animations;\t\n    }\n    useEffect( ()=>{updateLoop(props);\n\t\t    return () => id.current && clearTimeout(id.current) } );\n    return (<ReactGlobe className={classes.map}\n\t        animations={animations}\n                markers={markers}\n                onClickMarker={onClickMarker}\n                getTooltipContent={getTooltipContent}\n                markerOptions={{renderer: markerRenderer,\n\t\t\t\t//activeScale:1.01,\n\t\t\t\tenterAnimationDuration:0.0,\n\t\t\t\texitAnimationDuration:0.0,\n\t\t\t\toffsetRadiusScale:0.01,\n\t\t\t\t//radiusScaleRange:[1,1],\n\t\t\t\tenableGlow:true,\n\t\t\t       }}\n\t        cameraOptions={{autoRotateSpeed:0}}\n\t/>)\n}\n\n//, rotateSpeed:0.1\n\nclass EarthMap extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state}=this.props;\n\tstate.React.Globe=this;\n\tthis._ismounted = false;\n\tthis.elem=null;\n\tthis.data={cnt:99,markers:[],animations:[],focus:[0,0],dist:2};\n\tthis.update=this.update.bind(this);\n\tthis.cnt=0;\n    };\t\n    update() {\n\t//console.log(\"Force update EarthMap...\");\n\tthis.forceUpdate();\n    };\n    componentDidMount() { \n\tthis.data={cnt:99,markers:[],animations:[],focus:[0,0],dist:2};\n\tthis._ismounted = true;\n        window.addEventListener(\"resize\", this.updateWindowDimensions);\n    };\n    componentWillUnmount() {\n\tthis._ismounted = false;\n        window.removeEventListener(\"resize\", this.updateWindowDimensions);\n    };\n    onClickMarker(marker, markerObject, event) {\n\t//console.log(\"Clicked marker...\",marker.id)\n\tvar state=marker.state;\n\tvar colkey=marker.colrangekey;\n\tvar colrange=marker.colrange;\n\tvar colwhere=marker.colwhere;\n\tvar rowkey=marker.rowrangekey;\n\tvar rowrange=marker.rowrange;\n\tvar rowwhere=marker.rowwhere;\n\tvar cnt=marker.cnt;\n\t//console.log(\"Clicked marker...\",marker.id);\n\tstate.Navigate.selectItemRange(state,colkey,rowkey,colrange,rowrange,colwhere,rowwhere,cnt,1);\n    };\n    showMap(state,force) {\n\t// dont re-render the globe... - only change the markers\n\t//console.log(\"Rendering markers...\",force);\n\tthis.getMarkers(state);//this.data.markers=this.getMarkers(state);\n\tif (force !== undefined && force) {\n\t    this.update();\n\t}\n    };\n    getMarkers(state) {\n\t// get marker data\n\t//console.log(\"Setting map markers...\");\n\t//var ll=this.markers.length;\n\t//for (var ii=0; ii < ll; ii++) {\n\t//    this.markers.splice(ii,1);\n\t//};\n\t//this.data.markers.splice(0,this.data.markers.length);\n\tvar tcnt=this.cnt;\n\tvar markers=[];//   {id:1,coordinates:[60,10],city:\"X\",value:0} --state.Matrix.getMarkers(state)\n\tvar matrix=state.React.matrix;\n\tvar first=true;\n\tvar sum={x2:0,y2:0,z2:0,x:0,y:0,z:0,cnt:0};\n\tif (matrix !== undefined) {\n\t    state.Matrix.printElements(matrix);\n\t    var colkey = state.Path.getColKey(state)||\"\";\n\t    var rowkey = state.Path.getRowKey(state)||\"\";\n\t    var colvalues = state.Path.filterKeys(state,state.Matrix.values[colkey]||[\"\"]);\n\t    var rowvalues = state.Path.filterKeys(state,state.Matrix.values[rowkey]||[\"\"]);\n\t    //console.log(\"Matrix:\",colkey,JSON.stringify(matrix));\n\t    //console.log(\"Colvalues:\",colkey,JSON.stringify(colvalues));\n\t    //console.log(\"Rowvalues:\",rowkey,JSON.stringify(rowvalues));\n            // make markers\n\t    console.log(\"Rows:\",rowvalues.length);\n            var rlen=rowvalues.length;\n            for(var ii=0; ii<rlen; ii++) {\n\t\tvar rowval=rowvalues[ii];\n\t\tvar rowrange=state.Grid.getLatRange(state,rowvalues[ii]);\n\t\tvar rowwhere = state.Grid.getLatWhere(state,\"lat\",rowvalues[ii]);\n\t\tvar clen=colvalues.length;\n\t\tfor(var jj=0; jj<clen; jj++) {\n\t\t    var colval=colvalues[jj];\n\t\t    var colrange=state.Grid.getLonRange(state,colvalues[jj]);\n\t\t    var colwhere = state.Grid.getLonWhere(state,\"lon\",colvalues[jj]);\n\t\t    var element=state.Matrix.getMatrixElement(colval,rowval,matrix);\n\t\t    if (element !== undefined) {\n\t\t\tvar lon=element.colval;\n\t\t\tvar lat=element.rowval;\n\t\t\tvar lev=element.maxlev;\n\t\t\tvar bgcolor=state.Colors.getLevelBgColor(lev);\n\t\t\tvar fgcolor=state.Colors.getLevelFgColor(lev);\n\t\t\tvar cnt=element.cnt;\n\t\t\ttcnt=tcnt+1;\n\t\t\tvar rlat=lat*Math.PI/180;\n\t\t\tvar rlon=lon*Math.PI/180;\n\t\t\tvar clat=Math.cos(rlat);\n\t\t\tvar slat=Math.sin(rlat);\n\t\t\tvar clon=Math.cos(rlon);\n\t\t\tvar slon=Math.sin(rlon);\n\t\t\tvar pos={x:clat*clon,y:clat*slon,z:slat};\n\t\t\tsum.cnt=sum.cnt+1;\n\t\t\tsum.x=sum.x+pos.x;\n\t\t\tsum.y=sum.y+pos.y;\n\t\t\tsum.z=sum.z+pos.z;\n\t\t\tsum.x2=sum.x2+pos.x*pos.x;\n\t\t\tsum.y2=sum.y2+pos.y*pos.y;\n\t\t\tsum.z2=sum.z2+pos.z*pos.z;\n\t\t\tvar fact=4;\n\t\t\t//console.log(\"mapComponent:\",colkey,colval,rowkey,rowval);\n\t\t\t//console.log(\"Colors:\",tcnt,lev,bgcolor);\n\t\t\tvar size={width : (colrange.max-colrange.min)*clat*fact,\n\t\t\t\t  depth : (rowrange.max-rowrange.min)*fact,\n\t\t\t\t  height: 1};\n\t\t\tvar mark={id:tcnt,\n\t\t\t\t  coordinates:[lat,lon],\n\t\t\t\t  city:\"Test\",\n\t\t\t\t  value:5,\n\t\t\t\t  size:size,\n\t\t\t\t  element:element,\n\t\t\t\t  bgcolor:bgcolor,\n\t\t\t\t  fgcolor:fgcolor,\n\t\t\t\t  state:state,\n\t\t\t\t  colkey:\"_lon\",\n\t\t\t\t  colvalues:[colval],\n\t\t\t\t  step:1,\n\t\t\t\t  index:0,\n\t\t\t\t  colrangekey:\"lon\",\n\t\t\t\t  colrange:colrange,\n\t\t\t\t  colwhere:colwhere,\n\t\t\t\t  rowkey:\"_lat\",\n\t\t\t\t  rowval:rowval,\n\t\t\t\t  rowrangekey:\"lat\",\n\t\t\t\t  rowrange:rowrange,\n\t\t\t\t  rowwhere:rowwhere,\n\t\t\t\t  map:true,\n\t\t\t\t  cnt:cnt\n\t\t\t\t };\n\t\t\tif (first) {\n\t\t\t    first=false;\n\t\t\t    //console.log(\"row=\",rowval,\"(\",rowwhere,\") col=\",colval,\"(\",colwhere,\") \",JSON.stringify(element));\n\t\t\t}\n\t\t\tmarkers.push(mark);\n\t\t\t//this.data.markers.push(mark);\n\t\t    }\n\t\t}\n\t    }\n\t} else {\n\t    console.log(\"No matrix available...\");\n\t}\n\tif (sum.cnt>0) {\n\t    var cen={};\n\t    cen.x=sum.x/sum.cnt;\n\t    cen.y=sum.y/sum.cnt;\n\t    cen.z=sum.z/sum.cnt;\n\t    cen.x2=sum.x2/sum.cnt;\n\t    cen.y2=sum.y2/sum.cnt;\n\t    cen.z2=sum.z2/sum.cnt;\n\t    var ll=Math.sqrt(cen.x*cen.x + cen.y*cen.y + cen.z*cen.z);\n\t    var dist=1+Math.max(.1,5*Math.sqrt(cen.x2 - cen.x*cen.x + cen.y2 - cen.y*cen.y + cen.z2 - cen.z*cen.z));\n\t    if (ll>0) {\n\t\tcen.x=cen.x/ll;\n\t\tcen.y=cen.y/ll;\n\t\tcen.z=cen.z/ll;\n\t    } else {\n\t\tcen.x=1;\n\t\tcen.y=0;\n\t\tcen.z=0;\n\t    }\n\t    ll=Math.sqrt(cen.x*cen.x+cen.y*cen.y);\n\t    clat=Math.acos(ll) * 180/Math.PI;\n\t    clon=Math.atan2(cen.y,cen.x) * 180/Math.PI;\n\t    //console.log(\"Center:\",clon,clat,dist);\n\t    this.data.dist=dist;\n\t    this.data.focus=[clat,clon];\n\t    this.data.animations=[{\n\t\tanimationDuration:1000,\n\t\tcoordinates:[clat,clon],\n\t\tdistanceRadiusScale:dist,\n\t\teasingFunction: ['Linear','None'],\n\t    }];\n\t}\n\t//console.log(\"Markers:\",this.data.markers.length);\n\tthis.cnt=tcnt;\n\tif (this.cnt > 1000000) {this.cnt=0;};\n\tthis.data.markers=markers;\n\tthis.data.cnt=this.data.cnt+1;\n    };\n    render() {\n\tconst { classes,state  } = this.props;//, state\n\t//console.log(\"Rendering map...\");\n\t//this.setMarkers(state);\n\tvar height='calc(95% - '+footAndHeaderheight+')';\n\treturn (<div className={classes.root}\n\t        style={{position:'fixed',\n\t\t\tmarginLeft:'0%',\n\t\t\twidth: '90%',\n\t\t\theight: height,\n\t\t\toverflow:'hidden'}} >\n\t\t<MapInfo state={state}/>\n\t\t<MapGlobe onClickMarker={this.onClickMarker}\n\t\t          data={this.data}\n\t\t          update={this.update}\n\t\t          classes={{map:classes.map}}/>\n\t      </div>\n\t     );\n    }\n}\n\nEarthMap.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(EarthMap);\n"]},"metadata":{},"sourceType":"module"}