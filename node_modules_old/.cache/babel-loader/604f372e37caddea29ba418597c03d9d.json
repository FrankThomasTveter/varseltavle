{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/ReloadComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport ReloadIcon from '@material-ui/icons/Autorenew';\n\nvar styles = function styles(theme) {\n  return {\n    reload: {\n      marginLeft: 'auto'\n    },\n    button: {\n      color: 'white'\n    },\n    buttonInvisible: {\n      color: 'gray'\n    }\n  };\n};\n\nvar Reload = /*#__PURE__*/function (_Component) {\n  _inherits(Reload, _Component);\n\n  var _super = _createSuper(Reload);\n\n  function Reload() {\n    _classCallCheck(this, Reload);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Reload, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          state = _this$props.state,\n          classes = _this$props.classes,\n          onclose = _this$props.onclose,\n          visible = _this$props.visible;\n      var onclick, title;\n\n      if (visible !== undefined && !visible && state.Settings.isInvisible(state, \"Reload\")) {\n        // visible={false} - settings can hide button\n        return null;\n      } else if (visible !== undefined) {\n        // show button as normal\n        if (onclose === undefined) {\n          onclick = function onclick(event) {\n            return state.Show.show(state, true);\n          };\n        } else {\n          onclick = function onclick(event) {\n            state.Show.show(state, true);\n            onclose();\n          };\n        }\n\n        ;\n        title = \"Reload table\";\n        return /*#__PURE__*/React.createElement(Button, {\n          key: \"reload\",\n          className: classes.button,\n          onClick: onclick,\n          title: title,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 34,\n            columnNumber: 14\n          }\n        }, /*#__PURE__*/React.createElement(ReloadIcon, {\n          state: state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40,\n            columnNumber: 4\n          }\n        }));\n      } else {\n        onclick = function onclick() {\n          state.Settings.toggle(state, \"Reload\");\n        };\n\n        title = \"Show Reload\";\n\n        if (state.Settings.isInvisible(state, \"Reload\")) {\n          return /*#__PURE__*/React.createElement(Button, {\n            key: \"reload\",\n            className: classes.buttonInvisible,\n            onClick: onclick,\n            title: title,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 47,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(ReloadIcon, {\n            state: state,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 4\n            }\n          }));\n        } else {\n          return /*#__PURE__*/React.createElement(Button, {\n            key: \"reload\",\n            className: classes.button,\n            onClick: onclick,\n            title: title,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 11\n            }\n          }, /*#__PURE__*/React.createElement(ReloadIcon, {\n            state: state,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 4\n            }\n          }));\n        }\n\n        ;\n      }\n    }\n  }]);\n\n  return Reload;\n}(Component);\n\nReload.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Reload);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/ReloadComponent.js"],"names":["React","Component","PropTypes","withStyles","Button","ReloadIcon","styles","theme","reload","marginLeft","button","color","buttonInvisible","Reload","props","state","classes","onclose","visible","onclick","title","undefined","Settings","isInvisible","event","Show","show","toggle","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport ReloadIcon from '@material-ui/icons/Autorenew';\n\nconst styles = theme => ({\n    reload: {\n        marginLeft: 'auto',\n    },\n    button:{\n\tcolor:'white'\n    },\n    buttonInvisible:{\n\tcolor:'gray'\n    },\n});\nclass Reload extends Component {\n    render() {\n\tconst {state, classes, onclose, visible}=this.props;\n\tvar onclick,title;\n\tif (visible !== undefined && ! visible && state.Settings.isInvisible(state,\"Reload\")) {\n\t     // visible={false} - settings can hide button\n\t    return null;\n\t} else if (visible !== undefined) {\n\t    // show button as normal\n\t    if (onclose === undefined) {\n\t\tonclick = (event) => state.Show.show(state,true);\n\t    } else {\n\t\tonclick = (event) => {state.Show.show(state,true);onclose();};\n\t    };\n\t    title=\"Reload table\";\n\t    return (<Button\n\t\tkey=\"reload\"\n\t\tclassName={classes.button}\n\t\tonClick={onclick}\n\t\ttitle={title}\n\t\t>\n\t\t{<ReloadIcon state={state}/>}\n\t\t</Button>\n\t       );\n\t} else {\n\t    onclick = () => {state.Settings.toggle(state,\"Reload\");};\n\t    title=\"Show Reload\"\n\t    if (state.Settings.isInvisible(state,\"Reload\")) {\n\t\treturn (<Button\n\t\tkey=\"reload\"\n\t\tclassName={classes.buttonInvisible}\n\t\tonClick={onclick}\n\t\ttitle={title}\n\t\t>\n\t\t{<ReloadIcon state={state}/>}\n\t\t</Button>\n\t\t   );\n\t    } else {\n\t\treturn (<Button\n\t\tkey=\"reload\"\n\t\tclassName={classes.button}\n\t\tonClick={onclick}\n\t\ttitle={title}\n\t\t>\n\t\t{<ReloadIcon state={state}/>}\n\t\t</Button>\n\t\t   );\n\t    };\n\t}\n    }\n}\n\nReload.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Reload);\n"]},"metadata":{},"sourceType":"module"}