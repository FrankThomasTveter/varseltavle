{"ast":null,"code":"var _jsxFileName = \"/home/franktt/react/varseltavle/src/globe/ReactGlobe.js\";\nimport React, { useEffect, useRef } from 'react';\nimport TooltipWrapper from './TooltipWrapper';\nimport { defaultCameraOptions, defaultFocusOptions, defaultGlobeOptions, defaultLightOptions, defaultMarkerOptions, INITIAL_COORDINATES } from './defaults';\nimport Globe from './Globe';\nimport useResize from './useResize';\nexport default function ReactGlobe(_ref) {\n  var animations = _ref.animations,\n      cameraOptions = _ref.cameraOptions,\n      focus = _ref.focus,\n      focusOptions = _ref.focusOptions,\n      globeOptions = _ref.globeOptions,\n      lightOptions = _ref.lightOptions,\n      initialCoordinates = _ref.initialCoordinates,\n      markers = _ref.markers,\n      markerOptions = _ref.markerOptions,\n      onClickMarker = _ref.onClickMarker,\n      onDefocus = _ref.onDefocus,\n      onMouseOutMarker = _ref.onMouseOutMarker,\n      onMouseOverMarker = _ref.onMouseOverMarker,\n      onGetGlobeInstance = _ref.onGetGlobeInstance,\n      onTextureLoaded = _ref.onTextureLoaded,\n      getTooltipContent = _ref.getTooltipContent,\n      initialSize = _ref.size;\n  var canvasRef = useRef();\n  var globeInstanceRef = useRef();\n  var mountRef = useRef();\n  var tooltipRef = useRef();\n  var size = useResize(mountRef, initialSize); // init\n\n  useEffect(function () {\n    var mount = mountRef.current;\n    var globeInstance = new Globe(canvasRef.current, tooltipRef.current);\n    mount.appendChild(globeInstance.renderer.domElement);\n    globeInstance.animate();\n    globeInstanceRef.current = globeInstance;\n    onGetGlobeInstance && onGetGlobeInstance(globeInstance);\n    return function () {\n      mount.removeChild(globeInstance.renderer.domElement);\n      globeInstance.destroy();\n    }; // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // update callbacks\n\n  useEffect(function () {\n    globeInstanceRef.current.updateCallbacks({\n      onClickMarker,\n      onDefocus,\n      onMouseOutMarker,\n      onMouseOverMarker,\n      onTextureLoaded\n    });\n  }, [onClickMarker, onDefocus, onMouseOutMarker, onMouseOverMarker, onTextureLoaded]); // update camera\n\n  useEffect(function () {\n    globeInstanceRef.current.updateCamera(initialCoordinates, cameraOptions);\n  }, [cameraOptions, initialCoordinates]); // update focus\n\n  useEffect(function () {\n    globeInstanceRef.current.updateFocus(focus, focusOptions);\n  }, [focus, focusOptions]); // update globe\n\n  useEffect(function () {\n    globeInstanceRef.current.updateGlobe(globeOptions);\n  }, [globeOptions]); // update lights\n\n  useEffect(function () {\n    globeInstanceRef.current.updateLights(lightOptions);\n  }, [lightOptions]); // update markers\n\n  useEffect(function () {\n    globeInstanceRef.current.updateMarkers(markers, markerOptions);\n  }, [markerOptions, markers]); // apply animations\n\n  useEffect(function () {\n    return globeInstanceRef.current.applyAnimations(animations);\n  }, [animations]); // resize\n\n  useEffect(function () {\n    globeInstanceRef.current.updateSize(size);\n  }, [size]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    ref: mountRef,\n    style: {\n      height: '100%',\n      width: '100%'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"canvas\", {\n    ref: canvasRef,\n    style: {\n      display: 'block'\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(TooltipWrapper, {\n    ref: tooltipRef,\n    getTooltipContent: getTooltipContent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 4\n    }\n  }));\n}\nReactGlobe.defaultProps = {\n  animations: [],\n  cameraOptions: defaultCameraOptions,\n  focusOptions: defaultFocusOptions,\n  globeOptions: defaultGlobeOptions,\n  lightOptions: defaultLightOptions,\n  initialCoordinates: INITIAL_COORDINATES,\n  markers: [],\n  markerOptions: defaultMarkerOptions\n};","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/globe/ReactGlobe.js"],"names":["React","useEffect","useRef","TooltipWrapper","defaultCameraOptions","defaultFocusOptions","defaultGlobeOptions","defaultLightOptions","defaultMarkerOptions","INITIAL_COORDINATES","Globe","useResize","ReactGlobe","animations","cameraOptions","focus","focusOptions","globeOptions","lightOptions","initialCoordinates","markers","markerOptions","onClickMarker","onDefocus","onMouseOutMarker","onMouseOverMarker","onGetGlobeInstance","onTextureLoaded","getTooltipContent","initialSize","size","canvasRef","globeInstanceRef","mountRef","tooltipRef","mount","current","globeInstance","appendChild","renderer","domElement","animate","removeChild","destroy","updateCallbacks","updateCamera","updateFocus","updateGlobe","updateLights","updateMarkers","applyAnimations","updateSize","height","width","display","defaultProps"],"mappings":"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","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport TooltipWrapper from './TooltipWrapper';\n\nimport {\n  defaultCameraOptions,\n  defaultFocusOptions,\n  defaultGlobeOptions,\n  defaultLightOptions,\n  defaultMarkerOptions,\n  INITIAL_COORDINATES,\n} from './defaults';\nimport Globe from './Globe';\nimport useResize from './useResize';\n\nexport default function ReactGlobe({\n  animations,\n  cameraOptions,\n  focus,\n  focusOptions,\n  globeOptions,\n  lightOptions,\n  initialCoordinates,\n  markers,\n  markerOptions,\n  onClickMarker,\n  onDefocus,\n  onMouseOutMarker,\n  onMouseOverMarker,\n  onGetGlobeInstance,\n  onTextureLoaded,\n  getTooltipContent,\n  size: initialSize,\n}) {\n  const canvasRef = useRef();\n  const globeInstanceRef = useRef();\n  const mountRef = useRef();\n  const tooltipRef = useRef();\n  const size = useResize(mountRef, initialSize);\n\n  // init\n  useEffect(() => {\n    const mount = mountRef.current;\n    const globeInstance = new Globe(canvasRef.current, tooltipRef.current);\n    mount.appendChild(globeInstance.renderer.domElement);\n    globeInstance.animate();\n    globeInstanceRef.current = globeInstance;\n    onGetGlobeInstance && onGetGlobeInstance(globeInstance);\n\n    return () => {\n      mount.removeChild(globeInstance.renderer.domElement);\n      globeInstance.destroy();\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // update callbacks\n  useEffect(() => {\n    globeInstanceRef.current.updateCallbacks({\n      onClickMarker,\n      onDefocus,\n      onMouseOutMarker,\n      onMouseOverMarker,\n      onTextureLoaded,\n    });\n  }, [\n    onClickMarker,\n    onDefocus,\n    onMouseOutMarker,\n    onMouseOverMarker,\n    onTextureLoaded,\n  ]);\n\n  // update camera\n  useEffect(() => {\n    globeInstanceRef.current.updateCamera(initialCoordinates, cameraOptions);\n  }, [cameraOptions, initialCoordinates]);\n\n  // update focus\n  useEffect(() => {\n    globeInstanceRef.current.updateFocus(focus, focusOptions);\n  }, [focus, focusOptions]);\n\n  // update globe\n  useEffect(() => {\n    globeInstanceRef.current.updateGlobe(globeOptions);\n  }, [globeOptions]);\n\n  // update lights\n  useEffect(() => {\n    globeInstanceRef.current.updateLights(lightOptions);\n  }, [lightOptions]);\n\n  // update markers\n  useEffect(() => {\n    globeInstanceRef.current.updateMarkers(markers, markerOptions);\n  }, [markerOptions, markers]);\n\n  // apply animations\n  useEffect(() => {\n    return globeInstanceRef.current.applyAnimations(animations);\n  }, [animations]);\n\n  // resize\n  useEffect(() => {\n    globeInstanceRef.current.updateSize(size);\n  }, [size]);\n\n  return (\n    <div ref={mountRef} style={{ height: '100%', width: '100%' }}>\n      <canvas ref={canvasRef} style={{ display: 'block' }} />\n\t  <TooltipWrapper ref={tooltipRef} getTooltipContent={getTooltipContent}/>\n    </div>\n  );\n}\n\nReactGlobe.defaultProps = {\n  animations: [],\n  cameraOptions: defaultCameraOptions,\n  focusOptions: defaultFocusOptions,\n  globeOptions: defaultGlobeOptions,\n  lightOptions: defaultLightOptions,\n  initialCoordinates: INITIAL_COORDINATES,\n  markers: [],\n  markerOptions: defaultMarkerOptions,\n};\n"]},"metadata":{},"sourceType":"module"}