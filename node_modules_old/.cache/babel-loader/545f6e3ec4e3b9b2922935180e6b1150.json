{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _inherits from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/franktt/react/varseltavle/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle/src/react/TooltipComponent.js\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport TooltipIcon from '@material-ui/icons/Help';\nimport ClickTooltipIcon from '@material-ui/icons/HelpOutline';\nimport NoTooltipIcon from '@material-ui/icons/HighlightOff';\n\nvar styles = function styles(theme) {\n  return {\n    view: {\n      marginLeft: 'title'\n    },\n    button: {\n      color: 'white'\n    },\n    buttonInvisible: {\n      color: 'gray'\n    }\n  };\n};\n\nfunction TooltipIconMode(props) {\n  var state = props.state; //console.log(\"TooltipComponent:\",state.Layout.state.tooltip);\n\n  if (state.Layout.state.tooltip === 0) {\n    return /*#__PURE__*/React.createElement(TooltipIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 10\n      }\n    });\n  } else if (state.Layout.state.tooltip === 1) {\n    return /*#__PURE__*/React.createElement(ClickTooltipIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 10\n      }\n    });\n  } else {\n    return /*#__PURE__*/React.createElement(NoTooltipIcon, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 10\n      }\n    });\n  }\n}\n\n;\n\nvar Tooltip = /*#__PURE__*/function (_Component) {\n  _inherits(Tooltip, _Component);\n\n  var _super = _createSuper(Tooltip);\n\n  function Tooltip() {\n    _classCallCheck(this, Tooltip);\n\n    return _super.apply(this, arguments);\n  }\n\n  _createClass(Tooltip, [{\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state,\n          visible = _this$props.visible;\n      var onclick, title;\n\n      if (visible !== undefined && !visible && state.Settings.isInvisible(state, \"Tooltip\")) {\n        return null;\n      } else if (visible !== undefined) {\n        onclick = function onclick(event) {\n          return state.Layout.toggleTooltip(state);\n        };\n\n        title = \"Show tooltip\";\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classes.view,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 3\n          }\n        }, /*#__PURE__*/React.createElement(Button, {\n          className: classes.button,\n          onClick: onclick,\n          title: title,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 6\n          }\n        }, /*#__PURE__*/React.createElement(TooltipIconMode, {\n          state: state,\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 48,\n            columnNumber: 13\n          }\n        })));\n      } else {\n        title = \"Show Tooltip\";\n\n        onclick = function onclick(event) {\n          return state.Settings.toggle(state, \"Tooltip\");\n        };\n\n        if (state.Settings.isInvisible(state, \"Tooltip\")) {\n          return /*#__PURE__*/React.createElement(Button, {\n            key: \"tooltip\",\n            className: classes.buttonInvisible,\n            onClick: onclick,\n            title: title,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 10\n            }\n          }, /*#__PURE__*/React.createElement(TooltipIconMode, {\n            state: state,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 100\n            }\n          }));\n        } else {\n          return /*#__PURE__*/React.createElement(Button, {\n            key: \"tooltip\",\n            className: classes.button,\n            onClick: onclick,\n            title: title,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 10\n            }\n          }, /*#__PURE__*/React.createElement(TooltipIconMode, {\n            state: state,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 91\n            }\n          }));\n        }\n\n        ;\n      }\n\n      ;\n    }\n  }]);\n\n  return Tooltip;\n}(Component);\n\nTooltip.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(Tooltip);","map":{"version":3,"sources":["/home/franktt/react/varseltavle/src/react/TooltipComponent.js"],"names":["React","Component","PropTypes","withStyles","Button","TooltipIcon","ClickTooltipIcon","NoTooltipIcon","styles","theme","view","marginLeft","button","color","buttonInvisible","TooltipIconMode","props","state","Layout","tooltip","Tooltip","classes","visible","onclick","title","undefined","Settings","isInvisible","event","toggleTooltip","toggle","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\n\nimport TooltipIcon from '@material-ui/icons/Help';\nimport ClickTooltipIcon from '@material-ui/icons/HelpOutline';\nimport NoTooltipIcon from '@material-ui/icons/HighlightOff';\n\nconst styles = theme => ({\n    view: {\n        marginLeft: 'title',\n    },\n    button:{\n\tcolor:'white'\n    },\n    buttonInvisible:{\n\tcolor:'gray'\n    },\n});\nfunction TooltipIconMode (props) {\n    const {state} = props;\n    //console.log(\"TooltipComponent:\",state.Layout.state.tooltip);\n    if (state.Layout.state.tooltip===0) {\n\treturn (<TooltipIcon/>);\n    } else if (state.Layout.state.tooltip===1) {\n\treturn (<ClickTooltipIcon/>);\n    } else {\n\treturn (<NoTooltipIcon/>);\n    }\n};\nclass Tooltip extends Component {\n    render() {\n\tconst {classes, state, visible}=this.props;\n\tvar onclick, title;\n\tif (visible !== undefined && ! visible && state.Settings.isInvisible(state,\"Tooltip\")) {\n\t    return null;\n\t} else if (visible !== undefined) {\n\t    onclick = (event) => state.Layout.toggleTooltip(state);\n\t    title=\"Show tooltip\";\n\t    return (\n\t\t<div className={classes.view}>\n\t\t   <Button\n                      className={classes.button}\n                      onClick={onclick}\n\t              title={title}\n\t\t    >\n\t  \t       {<TooltipIconMode state={state}/>}\n                    </Button>\n\t\t</div>\n\t    );\n\t} else {\n\t    title=\"Show Tooltip\";\n\t    onclick = (event) => state.Settings.toggle(state,\"Tooltip\");\n\t    if (state.Settings.isInvisible(state,\"Tooltip\")) {\n\t\treturn <Button key=\"tooltip\" className={classes.buttonInvisible} onClick={onclick} title={title}><TooltipIconMode state={state}/></Button>;\n\t    } else {\n\t\treturn <Button key=\"tooltip\" className={classes.button} onClick={onclick} title={title}><TooltipIconMode state={state}/></Button>;\n\t    };\n\t};\n    }\n}\n\nTooltip.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(Tooltip);\n"]},"metadata":{},"sourceType":"module"}