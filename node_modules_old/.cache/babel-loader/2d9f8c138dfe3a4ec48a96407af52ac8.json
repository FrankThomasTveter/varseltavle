{"ast":null,"code":"import _classCallCheck from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _createSuper from \"/home/franktt/react/varseltavle_new/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"/home/franktt/react/varseltavle_new/src/react/TooltipContainer.js\";\nimport React, { Component } from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport { teal_palette } from '../mui/metMuiThemes';\nimport ReactTooltip from 'react-tooltip';\nimport Tooltip from './Tooltip';\n\nvar styles = function styles(theme) {\n  return {\n    tooltip: {\n      border: '0px solid #999999',\n      backgroundColor: teal_palette.main,\n      zIndex: 100\n    },\n    button: {\n      color: 'white',\n      \"&$buttonDisabled\": {\n        color: theme.palette.primary.main\n      }\n    },\n    buttonInvisible: {},\n    buttonDisabled: {}\n  };\n};\n\nvar TooltipContainer = /*#__PURE__*/function (_Component) {\n  _inherits(TooltipContainer, _Component);\n\n  var _super = _createSuper(TooltipContainer);\n\n  function TooltipContainer(props) {\n    var _this;\n\n    _classCallCheck(this, TooltipContainer);\n\n    _this = _super.call(this, props);\n    var state = props.state;\n    state.React.Tooltip = _assertThisInitialized(_this);\n    _this.update = _this.update.bind(_assertThisInitialized(_this));\n    return _this;\n  }\n\n  _createClass(TooltipContainer, [{\n    key: \"rebuild\",\n    value: function rebuild() {//console.log(\"Rebuilding tooltip.\");\n      //ReactTooltip.rebuild();\n    }\n  }, {\n    key: \"update\",\n    value: function update() {\n      //console.log(\"Rebuilding tooltip.\");\n      this.forceUpdate();\n      ReactTooltip.rebuild();\n    }\n  }, {\n    key: \"componentDidUpdate\",\n    value: function componentDidUpdate() {\n      ReactTooltip.rebuild();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$props = this.props,\n          classes = _this$props.classes,\n          state = _this$props.state,\n          type = _this$props.type;\n\n      var overridePosition = function overridePosition(_ref, currentEvent, currentTarget, node) {\n        var left = _ref.left,\n            top = _ref.top;\n        var d = document.documentElement; //console.log(\"Top:\",top,node.clientHeight,\" left:\",left,node.clientWidth,\" window:\",d.clientHeight,d.clientWidth);\n\n        left = Math.min(d.clientWidth - node.clientWidth, left);\n        top = Math.min(d.clientHeight - node.clientHeight, top);\n        left = Math.max(0, left);\n        top = Math.max(100, top);\n        top = Math.min(d.clientHeight - node.clientHeight - 100, top);\n        return {\n          top,\n          left\n        };\n      };\n\n      var getContent = function (dataTip) {\n        if (dataTip == null) {\n          //console.log(\"Tooltip no datatip...\");\n          return null;\n        } else {\n          var data = JSON.parse(dataTip); //console.log(\"Tooltip:\",JSON.stringify(dataTip));\n\n          return /*#__PURE__*/React.createElement(Tooltip, {\n            state: state,\n            classes: {\n              tooltip: classes.tooltip\n            },\n            data: data,\n            update: this.update,\n            __self: this,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 11\n            }\n          });\n        }\n      }.bind(this); //console.log(\"##### Rendering TooltipContainer.\");\n\n\n      if (state.Layout.state.tooltip === 2) {\n        return null;\n      } else {\n        return /*#__PURE__*/React.createElement(ReactTooltip, {\n          id: type,\n          className: classes.tooltip,\n          overridePosition: overridePosition,\n          getContent: getContent,\n          effect: \"solid\",\n          delayHide: 500,\n          delayShow: 300,\n          delayUpdate: 200,\n          place: 'bottom',\n          border: true,\n          type: 'light',\n          __self: this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 70,\n            columnNumber: 14\n          }\n        });\n      }\n    }\n  }]);\n\n  return TooltipContainer;\n}(Component);\n\n;\nTooltipContainer.propTypes = {\n  classes: PropTypes.object.isRequired\n};\nexport default withStyles(styles)(TooltipContainer);","map":{"version":3,"sources":["/home/franktt/react/varseltavle_new/src/react/TooltipContainer.js"],"names":["React","Component","PropTypes","withStyles","teal_palette","ReactTooltip","Tooltip","styles","theme","tooltip","border","backgroundColor","main","zIndex","button","color","palette","primary","buttonInvisible","buttonDisabled","TooltipContainer","props","state","update","bind","forceUpdate","rebuild","classes","type","overridePosition","currentEvent","currentTarget","node","left","top","d","document","documentElement","Math","min","clientWidth","clientHeight","max","getContent","dataTip","data","JSON","parse","Layout","propTypes","object","isRequired"],"mappings":"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","sourcesContent":["import React, {Component} from \"react\";\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport {teal_palette} from '../mui/metMuiThemes';\n\nimport ReactTooltip from 'react-tooltip'\nimport Tooltip from './Tooltip'\n\nconst styles = theme => ({\n    tooltip:{\n\tborder: '0px solid #999999',\n\tbackgroundColor:teal_palette.main,\n\tzIndex:100,\n    },\n    button: {\n\tcolor:'white',\n\t\"&$buttonDisabled\": {\n            color: theme.palette.primary.main,\n\t},\n    },\n    buttonInvisible:{},\n    buttonDisabled: {},\n});\nclass TooltipContainer extends Component {\n    constructor(props) {\n\tsuper(props);\n\tconst {state} = props;\n\tstate.React.Tooltip=this;\n\tthis.update=this.update.bind(this);\n    };\n    rebuild() {\n\t//console.log(\"Rebuilding tooltip.\");\n\t//ReactTooltip.rebuild();\n    };\n    update() {\n\t//console.log(\"Rebuilding tooltip.\");\n\tthis.forceUpdate();\n\tReactTooltip.rebuild();\n    };\n    componentDidUpdate(){\n\tReactTooltip.rebuild()\n    } \n    render() {\n\tconst { classes, state, type } = this.props;\n\tvar overridePosition = ({ left, top },currentEvent, currentTarget, node) => {\n\t    const d = document.documentElement;\n\t    //console.log(\"Top:\",top,node.clientHeight,\" left:\",left,node.clientWidth,\" window:\",d.clientHeight,d.clientWidth);\n\t    left = Math.min(d.clientWidth - node.clientWidth, left);\n\t    top = Math.min(d.clientHeight - node.clientHeight, top);\n\t    left = Math.max(0, left);\n\t    top = Math.max(100, top);\n\t    top = Math.min(d.clientHeight - node.clientHeight-100, top);\n\t    return { top, left }\n\t};\n\tvar getContent= function(dataTip) {\n\t    if (dataTip==null) {\n\t\t//console.log(\"Tooltip no datatip...\");\n\t\treturn null;\n\t    } else {\n\t\tconst data=JSON.parse(dataTip);\n\t\t//console.log(\"Tooltip:\",JSON.stringify(dataTip));\n\t\treturn (<Tooltip state={state} classes={{tooltip:classes.tooltip}} data={data} update={this.update}/>);\n\t    }\n\t}.bind(this);\n\t//console.log(\"##### Rendering TooltipContainer.\");\n\tif (state.Layout.state.tooltip===2) {\n\t    return null;\n\t} else {\n\t    return (<ReactTooltip id={type}\n\t\t    className={classes.tooltip}\n\t\t    overridePosition={overridePosition}\n\t\t    getContent={getContent}\n\t\t    effect='solid'\n\t\t    delayHide={500}\n\t\t    delayShow={300}\n\t\t    delayUpdate={200}\n\t\t    place={'bottom'}\n\t\t    border={true}\n\t\t    type={'light'}\n\t\t    />);\n\t}\n    };\n};\nTooltipContainer.propTypes = {\n    classes: PropTypes.object.isRequired,\n};\n\nexport default withStyles(styles)(TooltipContainer);\n"]},"metadata":{},"sourceType":"module"}