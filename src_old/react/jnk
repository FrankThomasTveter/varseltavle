import React, {Component} from "react";
import PropTypes from 'prop-types';
import { withStyles } from '@material-ui/core/styles';
import { Map, TileLayer, Marker, Popup } from 'react-leaflet';
import DivIcon from 'react-leaflet-div-icon';
import Paper from '@material-ui/core/Paper';
import Grid from '@material-ui/core/Grid';
import homePageImg from '../images/homePageImg.png';
import Tooltip  from './TooltipContainer';
//console.log("Inside Map.")


const styles = theme => ({
    root: {
        flexGrow: 1,
    },
    paper: {
        padding: theme.spacing.unit * 2,
        textAlign: 'left',
    },
    paperImage: {
        textAlign: 'center',
        padding: theme.spacing.unit * 2,
    },
    homePageImg: {
        maxWidth: '100%',
    }
});

function Details(props) {
    const { classes, state, latlng, marker, handleClick, handleLocationFound, onLocationFound } = props; // classes, element
    var colkey = state.Path.getColKey(state)||"";
    var rowkey = state.Path.getRowKey(state)||"";
    var colvalues = state.Path.filterKeys(state,state.Matrix.values[colkey]||[""]);
    var rowvalues = state.Path.filterKeys(state,state.Matrix.values[rowkey]||[""]);
    var cellMode  = state.Layout.getCellMode(state);
    //DOM.style.font
    var border=2;
    var width=0.8*window.innerWidth;
    var height=0.8*(window.innerHeight-200);
    var plans=state.Layout.makePlans(colkey,rowkey,colvalues,rowvalues,width,height,border);
    console.log("Details => Width/Height:",window.innerWidth,window.innerHeight,plans.cell.width,plans.hdr.height)
    console.log("Colkey:",colkey," colval:",JSON.stringify(colvalues));
    console.log("Rowkey:",rowkey," rowval:",JSON.stringify(rowvalues));
    if (false) {
	return <img alt={"homepage"} className={classes.homePageImg} src={homePageImg}></img>;
    } else {
	const position = [60, 10]
	return <Map center={position} zoom={13}>
	          <TileLayer attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors' 
                             url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'/> 
               </Map>
    }
}
//        <Marker position={position}>
//          <Popup>
//            A pretty CSS3 popup. <br /> Easily customizable.
//          </Popup>
//        </Marker>

//	return <Map
//        center={latlng}
//        length={4}
//        onClick={handleClick}
//        onLocationfound={handleLocationFound}
//        ref='map'
//        zoom={13}>
//            <TileLayer
//        attribution='&copy; <a href="http://osm.org/copyright">OpenStreetMap</a> contributors'
//        url='http://{s}.tile.osm.org/{z}/{x}/{y}.png'
//            />
//           {marker}
//	</Map>



class MapChart extends Component {
    constructor(props) {
	super(props);
	const {state} = props;
	state.React.Map=this;
	this.state = {
	    hasLocation: false,
	    latlng: {
		lat: 51.505,
		lng: -0.09,
	    }
	};
    };
    showMap() {
	console.log("Rebuilding Map.");
	this.forceUpdate();
    };
    XXXXXcomponentDidMount() {
        window.addEventListener("resize", this.updateWindowDimensions);
    } 
    XXXXXupdateWindowDimensions = () => {
        this.width= window.innerWidth;
	this.height=window.innerHeight;
	this.bbx=this.el.getBoundingClientRect();
	//console.log("Width/Height:",this.width,this.height,this.bbx.width,this.bbx.height)
    };
    handleClick = function(){
	this.refs.map.leafletElement.locate();
    }.bind(this);
    handleLocationFound = function(e){
	this.setState({
	    hasLocation: true,
	    latlng: e.latlng,
	});
    }.bind(this);
    XXXXXelement(el) {
	if (el !== undefined && el !== null) {
	    this.el=el;
	    this.bbx=this.el.getBoundingClientRect();
	    //console.log("BBX width/height:",this.bbx.width,this.bbx.height);
	};
    };
    clickHandler() {
        console.log('on click handler ....');
    }
    render() {
        const { classes, state } = this.props;
	const marker = this.state.hasLocation
	      ? (
		      <DivIcon position={this.state.latlng}>
		      <svg className="user-location" viewBox="0 0 120 120" version="1.1" xmlns="http://www.w3.org/2000/svg">
		      <circle cx="60" cy="60" r="50"/>
		      </svg>
		      </DivIcon>
	      )
	      : null;
//                <Grid container spacing={24}>
//                    <Grid item xs={12}>
//                        {   <Paper className={classes.paperImage}>
	return (
            <div className={classes.root}>
				<Details state={state} classes={classes} element={this} 
			            latlng={this.state.latlng}
			            marker={marker}
			            handleClick={this.handleClick} 
			            handleLocationFound={this.handleLocationFound}/>
	    </div>
        );
//                            </Paper>}
//                    </Grid>
//                    <Grid item sm={12} xs={12}>
//                        <Paper className={classes.paperImage}>
//                            The Map layout is not implemented...
//                        </Paper>
//                    </Grid>
//                </Grid>
    }
}
//		<Tooltip state={state} classes={{button:classes.button}} element={this} type={'cell'}/>

MapChart.propTypes = {
    classes: PropTypes.object.isRequired,
};

export default withStyles(styles)(MapChart);
